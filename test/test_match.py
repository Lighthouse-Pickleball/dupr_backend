# coding: utf-8

"""
    DUPR Backend APIs

    Internal RESTful APIs to access DUPR ratings, users and provide matches.

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dupr_backend.models.match import Match

class TestMatch(unittest.TestCase):
    """Match unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Match:
        """Test Match
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Match`
        """
        model = Match()
        if include_optional:
            return Match(
                id = 56,
                user_id = 56,
                venue = '',
                location = '',
                match_score_added = True,
                tournament = '',
                league = '',
                event_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                event_format = 'SINGLES',
                score_format = dupr_backend.models.score_format.ScoreFormat(
                    id = 56, 
                    format = '', 
                    variant = '', 
                    priority = 56, 
                    games = 56, 
                    winning_score = 56, 
                    status = 'ACTIVE', ),
                confirmed = True,
                confirmation_threshold = 56,
                teams = [
                    dupr_backend.models.team.Team(
                        player1 = 4564651818, 
                        player2 = 9884984848, 
                        game1 = 7, 
                        game2 = 11, 
                        game3 = 0, 
                        game4 = 0, 
                        game5 = 0, 
                        winner = True, )
                    ],
                status = 'ACTIVE',
                modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                event = '',
                match_source = 'DUPR',
                club_id = 56,
                league_id = 56,
                bracket_id = 56,
                league_match_id = 56,
                match_type = 'SIDE_ONLY',
                used_in_initialization = True,
                elo_calculated = True,
                validator = dupr_backend.models.basic_user_info.BasicUserInfo(
                    id = 56, 
                    name = '', 
                    email = '', 
                    referral_code = '', ),
                creator = dupr_backend.models.basic_user_info.BasicUserInfo(
                    id = 56, 
                    name = '', 
                    email = '', 
                    referral_code = '', ),
                client_id = 56,
                club_name = '',
                client_name = '',
                is_pro_match = True,
                player_ids = [
                    56
                    ],
                is_elo_rated_match = True,
                is_pre_elo_match = True
            )
        else:
            return Match(
                location = '',
                match_score_added = True,
                event_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                event_format = 'SINGLES',
                confirmed = True,
                confirmation_threshold = 56,
                teams = [
                    dupr_backend.models.team.Team(
                        player1 = 4564651818, 
                        player2 = 9884984848, 
                        game1 = 7, 
                        game2 = 11, 
                        game3 = 0, 
                        game4 = 0, 
                        game5 = 0, 
                        winner = True, )
                    ],
                used_in_initialization = True,
                is_pro_match = True,
                player_ids = [
                    56
                    ],
                is_elo_rated_match = True,
                is_pre_elo_match = True,
        )
        """

    def testMatch(self):
        """Test Match"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

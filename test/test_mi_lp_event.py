# coding: utf-8

"""
    DUPR Backend APIs

    Internal RESTful APIs to access DUPR ratings, users and provide matches.

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dupr_backend.models.mi_lp_event import MiLPEvent

class TestMiLPEvent(unittest.TestCase):
    """MiLPEvent unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MiLPEvent:
        """Test MiLPEvent
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MiLPEvent`
        """
        model = MiLPEvent()
        if include_optional:
            return MiLPEvent(
                event_id = 56,
                event_name = '',
                club_id = 56,
                club_name = '',
                creator_id = 56,
                creator_name = '',
                creator_email = '',
                event_type = 'STANDARD',
                default_max_teams = 56,
                default_max_waitlist = 56,
                default_entry_fee = 1.337,
                status = 'ACTIVE',
                duration = [
                    ''
                    ],
                address_str = '',
                description = dupr_backend.models.description.Description(
                    header = '', 
                    header_type = '', 
                    content = '', 
                    content_type = '', 
                    footer = '', 
                    footer_type = '', ),
                divisions = [
                    dupr_backend.models.division.Division(
                        event_id = 56, 
                        division_id = 56, 
                        division_name = '', 
                        division_code = '', 
                        registration_period = [
                            ''
                            ], 
                        registration_start = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        registration_end = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        day1_start = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        day2_start = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        max_teams = 56, 
                        max_waitlist = 56, 
                        entry_fee = 1.337, 
                        prize = 1.337, 
                        division_type = 'DUPR12', 
                        status = 'ACTIVE', )
                    ]
            )
        else:
            return MiLPEvent(
                event_id = 56,
                event_name = '',
                club_id = 56,
                creator_id = 56,
                event_type = 'STANDARD',
                default_max_teams = 56,
                default_max_waitlist = 56,
                default_entry_fee = 1.337,
                status = 'ACTIVE',
                address_str = '',
                divisions = [
                    dupr_backend.models.division.Division(
                        event_id = 56, 
                        division_id = 56, 
                        division_name = '', 
                        division_code = '', 
                        registration_period = [
                            ''
                            ], 
                        registration_start = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        registration_end = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        day1_start = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        day2_start = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        max_teams = 56, 
                        max_waitlist = 56, 
                        entry_fee = 1.337, 
                        prize = 1.337, 
                        division_type = 'DUPR12', 
                        status = 'ACTIVE', )
                    ],
        )
        """

    def testMiLPEvent(self):
        """Test MiLPEvent"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

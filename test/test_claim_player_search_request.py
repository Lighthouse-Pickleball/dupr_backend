# coding: utf-8

"""
    DUPR Backend APIs

    Internal RESTful APIs to access DUPR ratings, users and provide matches.

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dupr_backend.models.claim_player_search_request import ClaimPlayerSearchRequest

class TestClaimPlayerSearchRequest(unittest.TestCase):
    """ClaimPlayerSearchRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ClaimPlayerSearchRequest:
        """Test ClaimPlayerSearchRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ClaimPlayerSearchRequest`
        """
        model = ClaimPlayerSearchRequest()
        if include_optional:
            return ClaimPlayerSearchRequest(
                offset = 56,
                limit = 56,
                query = '0',
                filter = dupr_backend.models.claim_player_search_filter.ClaimPlayerSearchFilter(
                    age = dupr_backend.models.age_filter.AgeFilter(
                        min_age = 20, 
                        max_age = 40, ), 
                    rating = dupr_backend.models.claim_player_rating_filter.ClaimPlayerRatingFilter(
                        min_rating = 2.3, 
                        max_rating = 3.3, 
                        type = 'DOUBLES', ), 
                    gender = 'MALE', 
                    short_address = 'King County, WA, US', 
                    lat = 72.34654645455, 
                    lng = 19.55151584984, 
                    radius_in_meters = 16093.4, ),
                sort = dupr_backend.models.claim_player_search_sort.ClaimPlayerSearchSort(
                    parameter = 'fullNameSort/singles/doubles', 
                    order = 'ASC/DESC', )
            )
        else:
            return ClaimPlayerSearchRequest(
                offset = 56,
                limit = 56,
        )
        """

    def testClaimPlayerSearchRequest(self):
        """Test ClaimPlayerSearchRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

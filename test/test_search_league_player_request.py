# coding: utf-8

"""
    DUPR Backend APIs

    Internal RESTful APIs to access DUPR ratings, users and provide matches.

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dupr_backend.models.search_league_player_request import SearchLeaguePlayerRequest

class TestSearchLeaguePlayerRequest(unittest.TestCase):
    """SearchLeaguePlayerRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SearchLeaguePlayerRequest:
        """Test SearchLeaguePlayerRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchLeaguePlayerRequest`
        """
        model = SearchLeaguePlayerRequest()
        if include_optional:
            return SearchLeaguePlayerRequest(
                bracket_id = 7828935307,
                query = '*',
                filters = dupr_backend.models.filters.Filters(
                    registration_status = 'OPEN', 
                    payment_status = 'COMPLETE/PENDING', 
                    partner_status = 'REGISTERED', 
                    is_registered = True, 
                    is_wait_listed = True, ),
                sort = dupr_backend.models.player_sort.PlayerSort(
                    parameter = 'RATINGS', 
                    order = 'ASC/DESC', ),
                league_id = 7828935307
            )
        else:
            return SearchLeaguePlayerRequest(
                bracket_id = 7828935307,
                query = '*',
                league_id = 7828935307,
        )
        """

    def testSearchLeaguePlayerRequest(self):
        """Test SearchLeaguePlayerRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

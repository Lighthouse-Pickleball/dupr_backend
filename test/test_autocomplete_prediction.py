# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

import dupr_backend
from dupr_backend.models.autocomplete_prediction import AutocompletePrediction  # noqa: E501
from dupr_backend.rest import ApiException

class TestAutocompletePrediction(unittest.TestCase):
    """AutocompletePrediction unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test AutocompletePrediction
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AutocompletePrediction`
        """
        model = dupr_backend.models.autocomplete_prediction.AutocompletePrediction()  # noqa: E501
        if include_optional :
            return AutocompletePrediction(
                description = '', 
                distance_meters = 56, 
                matched_substrings = [
                    dupr_backend.models.matched_substring.MatchedSubstring(
                        length = 56, 
                        offset = 56, )
                    ], 
                place_id = '', 
                structured_formatting = dupr_backend.models.autocomplete_structured_formatting.AutocompleteStructuredFormatting(
                    main_text = '', 
                    main_text_matched_substrings = [
                        dupr_backend.models.matched_substring.MatchedSubstring(
                            length = 56, 
                            offset = 56, )
                        ], 
                    secondary_text = '', ), 
                terms = [
                    dupr_backend.models.term.Term(
                        offset = 56, 
                        value = '', )
                    ], 
                types = [
                    ''
                    ]
            )
        else :
            return AutocompletePrediction(
        )
        """

    def testAutocompletePrediction(self):
        """Test AutocompletePrediction"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

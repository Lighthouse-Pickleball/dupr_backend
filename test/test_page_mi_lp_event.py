# coding: utf-8

"""
    DUPR Backend APIs

    Internal RESTful APIs to access DUPR ratings, users and provide matches.

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dupr_backend.models.page_mi_lp_event import PageMiLPEvent

class TestPageMiLPEvent(unittest.TestCase):
    """PageMiLPEvent unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PageMiLPEvent:
        """Test PageMiLPEvent
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PageMiLPEvent`
        """
        model = PageMiLPEvent()
        if include_optional:
            return PageMiLPEvent(
                offset = 90,
                limit = 10,
                total = 100,
                hits = [
                    dupr_backend.models.mi_lp_event.MiLPEvent(
                        event_id = 56, 
                        event_name = '', 
                        club_id = 56, 
                        club_name = '', 
                        creator_id = 56, 
                        creator_name = '', 
                        creator_email = '', 
                        event_type = 'STANDARD', 
                        default_max_teams = 56, 
                        default_max_waitlist = 56, 
                        default_entry_fee = 1.337, 
                        status = 'ACTIVE', 
                        duration = [
                            ''
                            ], 
                        address_str = '', 
                        description = dupr_backend.models.description.Description(
                            header = '', 
                            header_type = '', 
                            content = '', 
                            content_type = '', 
                            footer = '', 
                            footer_type = '', ), 
                        divisions = [
                            dupr_backend.models.division.Division(
                                event_id = 56, 
                                division_id = 56, 
                                division_name = '', 
                                division_code = '', 
                                registration_period = [
                                    ''
                                    ], 
                                registration_start = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                registration_end = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                day1_start = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                day2_start = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                max_teams = 56, 
                                max_waitlist = 56, 
                                entry_fee = 1.337, 
                                prize = 1.337, 
                                division_type = 'DUPR12', 
                                status = 'ACTIVE', )
                            ], )
                    ],
                total_value_relation = 'GREATER_THAN_OR_EQUAL_TO',
                has_previous = True,
                empty = False,
                has_more = False
            )
        else:
            return PageMiLPEvent(
                offset = 90,
                limit = 10,
                total = 100,
                total_value_relation = 'GREATER_THAN_OR_EQUAL_TO',
                has_previous = True,
                empty = False,
                has_more = False,
        )
        """

    def testPageMiLPEvent(self):
        """Test PageMiLPEvent"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictStr

from typing import Any, Dict, Optional


from dupr_backend.api_client import ApiClient
from dupr_backend.api_response import ApiResponse
from dupr_backend.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class StripeApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def account_charge_updates_using_post(self, authorization : StrictStr, stripe_signature : Annotated[StrictStr, Field(..., description="stripe-signature")], version : Annotated[StrictStr, Field(..., description="version")], body : Annotated[StrictStr, Field(..., description="body")], x_forwarded_for : Annotated[Optional[StrictStr], Field(description="x-forwarded-for")] = None, **kwargs) -> object:  # noqa: E501
        """accountChargeUpdates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.account_charge_updates_using_post(authorization, stripe_signature, version, body, x_forwarded_for, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param stripe_signature: stripe-signature (required)
        :type stripe_signature: str
        :param version: version (required)
        :type version: str
        :param body: body (required)
        :type body: str
        :param x_forwarded_for: x-forwarded-for
        :type x_forwarded_for: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the account_charge_updates_using_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.account_charge_updates_using_post_with_http_info(authorization, stripe_signature, version, body, x_forwarded_for, **kwargs)  # noqa: E501

    @validate_arguments
    def account_charge_updates_using_post_with_http_info(self, authorization : StrictStr, stripe_signature : Annotated[StrictStr, Field(..., description="stripe-signature")], version : Annotated[StrictStr, Field(..., description="version")], body : Annotated[StrictStr, Field(..., description="body")], x_forwarded_for : Annotated[Optional[StrictStr], Field(description="x-forwarded-for")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """accountChargeUpdates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.account_charge_updates_using_post_with_http_info(authorization, stripe_signature, version, body, x_forwarded_for, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param stripe_signature: stripe-signature (required)
        :type stripe_signature: str
        :param version: version (required)
        :type version: str
        :param body: body (required)
        :type body: str
        :param x_forwarded_for: x-forwarded-for
        :type x_forwarded_for: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'stripe_signature',
            'version',
            'body',
            'x_forwarded_for'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_charge_updates_using_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        if _params['stripe_signature']:
            _header_params['stripe-signature'] = _params['stripe_signature']

        if _params['x_forwarded_for']:
            _header_params['x-forwarded-for'] = _params['x_forwarded_for']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '403': None,
        }

        return self.api_client.call_api(
            '/stripe/account/{version}/charge', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def account_checkout_updates_using_post(self, authorization : StrictStr, stripe_signature : Annotated[StrictStr, Field(..., description="stripe-signature")], version : Annotated[StrictStr, Field(..., description="version")], body : Annotated[StrictStr, Field(..., description="body")], x_forwarded_for : Annotated[Optional[StrictStr], Field(description="x-forwarded-for")] = None, **kwargs) -> object:  # noqa: E501
        """accountCheckoutUpdates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.account_checkout_updates_using_post(authorization, stripe_signature, version, body, x_forwarded_for, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param stripe_signature: stripe-signature (required)
        :type stripe_signature: str
        :param version: version (required)
        :type version: str
        :param body: body (required)
        :type body: str
        :param x_forwarded_for: x-forwarded-for
        :type x_forwarded_for: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the account_checkout_updates_using_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.account_checkout_updates_using_post_with_http_info(authorization, stripe_signature, version, body, x_forwarded_for, **kwargs)  # noqa: E501

    @validate_arguments
    def account_checkout_updates_using_post_with_http_info(self, authorization : StrictStr, stripe_signature : Annotated[StrictStr, Field(..., description="stripe-signature")], version : Annotated[StrictStr, Field(..., description="version")], body : Annotated[StrictStr, Field(..., description="body")], x_forwarded_for : Annotated[Optional[StrictStr], Field(description="x-forwarded-for")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """accountCheckoutUpdates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.account_checkout_updates_using_post_with_http_info(authorization, stripe_signature, version, body, x_forwarded_for, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param stripe_signature: stripe-signature (required)
        :type stripe_signature: str
        :param version: version (required)
        :type version: str
        :param body: body (required)
        :type body: str
        :param x_forwarded_for: x-forwarded-for
        :type x_forwarded_for: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'stripe_signature',
            'version',
            'body',
            'x_forwarded_for'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_checkout_updates_using_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        if _params['stripe_signature']:
            _header_params['stripe-signature'] = _params['stripe_signature']

        if _params['x_forwarded_for']:
            _header_params['x-forwarded-for'] = _params['x_forwarded_for']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '403': None,
        }

        return self.api_client.call_api(
            '/stripe/account/{version}/checkout', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def charge_updates_using_post(self, authorization : StrictStr, stripe_signature : Annotated[StrictStr, Field(..., description="stripe-signature")], version : Annotated[StrictStr, Field(..., description="version")], body : Annotated[StrictStr, Field(..., description="body")], x_forwarded_for : Annotated[Optional[StrictStr], Field(description="x-forwarded-for")] = None, **kwargs) -> object:  # noqa: E501
        """chargeUpdates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.charge_updates_using_post(authorization, stripe_signature, version, body, x_forwarded_for, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param stripe_signature: stripe-signature (required)
        :type stripe_signature: str
        :param version: version (required)
        :type version: str
        :param body: body (required)
        :type body: str
        :param x_forwarded_for: x-forwarded-for
        :type x_forwarded_for: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the charge_updates_using_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.charge_updates_using_post_with_http_info(authorization, stripe_signature, version, body, x_forwarded_for, **kwargs)  # noqa: E501

    @validate_arguments
    def charge_updates_using_post_with_http_info(self, authorization : StrictStr, stripe_signature : Annotated[StrictStr, Field(..., description="stripe-signature")], version : Annotated[StrictStr, Field(..., description="version")], body : Annotated[StrictStr, Field(..., description="body")], x_forwarded_for : Annotated[Optional[StrictStr], Field(description="x-forwarded-for")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """chargeUpdates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.charge_updates_using_post_with_http_info(authorization, stripe_signature, version, body, x_forwarded_for, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param stripe_signature: stripe-signature (required)
        :type stripe_signature: str
        :param version: version (required)
        :type version: str
        :param body: body (required)
        :type body: str
        :param x_forwarded_for: x-forwarded-for
        :type x_forwarded_for: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'stripe_signature',
            'version',
            'body',
            'x_forwarded_for'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method charge_updates_using_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        if _params['stripe_signature']:
            _header_params['stripe-signature'] = _params['stripe_signature']

        if _params['x_forwarded_for']:
            _header_params['x-forwarded-for'] = _params['x_forwarded_for']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '403': None,
        }

        return self.api_client.call_api(
            '/stripe/{version}/charge', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def checkout_account_payment_intent_using_post(self, authorization : StrictStr, stripe_signature : Annotated[StrictStr, Field(..., description="stripe-signature")], version : Annotated[StrictStr, Field(..., description="version")], body : Annotated[StrictStr, Field(..., description="body")], x_forwarded_for : Annotated[Optional[StrictStr], Field(description="x-forwarded-for")] = None, **kwargs) -> object:  # noqa: E501
        """checkoutAccountPaymentIntent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.checkout_account_payment_intent_using_post(authorization, stripe_signature, version, body, x_forwarded_for, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param stripe_signature: stripe-signature (required)
        :type stripe_signature: str
        :param version: version (required)
        :type version: str
        :param body: body (required)
        :type body: str
        :param x_forwarded_for: x-forwarded-for
        :type x_forwarded_for: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the checkout_account_payment_intent_using_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.checkout_account_payment_intent_using_post_with_http_info(authorization, stripe_signature, version, body, x_forwarded_for, **kwargs)  # noqa: E501

    @validate_arguments
    def checkout_account_payment_intent_using_post_with_http_info(self, authorization : StrictStr, stripe_signature : Annotated[StrictStr, Field(..., description="stripe-signature")], version : Annotated[StrictStr, Field(..., description="version")], body : Annotated[StrictStr, Field(..., description="body")], x_forwarded_for : Annotated[Optional[StrictStr], Field(description="x-forwarded-for")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """checkoutAccountPaymentIntent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.checkout_account_payment_intent_using_post_with_http_info(authorization, stripe_signature, version, body, x_forwarded_for, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param stripe_signature: stripe-signature (required)
        :type stripe_signature: str
        :param version: version (required)
        :type version: str
        :param body: body (required)
        :type body: str
        :param x_forwarded_for: x-forwarded-for
        :type x_forwarded_for: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'stripe_signature',
            'version',
            'body',
            'x_forwarded_for'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checkout_account_payment_intent_using_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        if _params['stripe_signature']:
            _header_params['stripe-signature'] = _params['stripe_signature']

        if _params['x_forwarded_for']:
            _header_params['x-forwarded-for'] = _params['x_forwarded_for']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '403': None,
        }

        return self.api_client.call_api(
            '/stripe/account/{version}/payment-intent', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def checkout_payment_intent_using_post(self, authorization : StrictStr, stripe_signature : Annotated[StrictStr, Field(..., description="stripe-signature")], version : Annotated[StrictStr, Field(..., description="version")], body : Annotated[StrictStr, Field(..., description="body")], x_forwarded_for : Annotated[Optional[StrictStr], Field(description="x-forwarded-for")] = None, **kwargs) -> object:  # noqa: E501
        """checkoutPaymentIntent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.checkout_payment_intent_using_post(authorization, stripe_signature, version, body, x_forwarded_for, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param stripe_signature: stripe-signature (required)
        :type stripe_signature: str
        :param version: version (required)
        :type version: str
        :param body: body (required)
        :type body: str
        :param x_forwarded_for: x-forwarded-for
        :type x_forwarded_for: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the checkout_payment_intent_using_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.checkout_payment_intent_using_post_with_http_info(authorization, stripe_signature, version, body, x_forwarded_for, **kwargs)  # noqa: E501

    @validate_arguments
    def checkout_payment_intent_using_post_with_http_info(self, authorization : StrictStr, stripe_signature : Annotated[StrictStr, Field(..., description="stripe-signature")], version : Annotated[StrictStr, Field(..., description="version")], body : Annotated[StrictStr, Field(..., description="body")], x_forwarded_for : Annotated[Optional[StrictStr], Field(description="x-forwarded-for")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """checkoutPaymentIntent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.checkout_payment_intent_using_post_with_http_info(authorization, stripe_signature, version, body, x_forwarded_for, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param stripe_signature: stripe-signature (required)
        :type stripe_signature: str
        :param version: version (required)
        :type version: str
        :param body: body (required)
        :type body: str
        :param x_forwarded_for: x-forwarded-for
        :type x_forwarded_for: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'stripe_signature',
            'version',
            'body',
            'x_forwarded_for'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checkout_payment_intent_using_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        if _params['stripe_signature']:
            _header_params['stripe-signature'] = _params['stripe_signature']

        if _params['x_forwarded_for']:
            _header_params['x-forwarded-for'] = _params['x_forwarded_for']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '403': None,
        }

        return self.api_client.call_api(
            '/stripe/{version}/payment-intent', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def checkout_updates_using_post(self, authorization : StrictStr, stripe_signature : Annotated[StrictStr, Field(..., description="stripe-signature")], version : Annotated[StrictStr, Field(..., description="version")], body : Annotated[StrictStr, Field(..., description="body")], x_forwarded_for : Annotated[Optional[StrictStr], Field(description="x-forwarded-for")] = None, **kwargs) -> object:  # noqa: E501
        """checkoutUpdates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.checkout_updates_using_post(authorization, stripe_signature, version, body, x_forwarded_for, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param stripe_signature: stripe-signature (required)
        :type stripe_signature: str
        :param version: version (required)
        :type version: str
        :param body: body (required)
        :type body: str
        :param x_forwarded_for: x-forwarded-for
        :type x_forwarded_for: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the checkout_updates_using_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.checkout_updates_using_post_with_http_info(authorization, stripe_signature, version, body, x_forwarded_for, **kwargs)  # noqa: E501

    @validate_arguments
    def checkout_updates_using_post_with_http_info(self, authorization : StrictStr, stripe_signature : Annotated[StrictStr, Field(..., description="stripe-signature")], version : Annotated[StrictStr, Field(..., description="version")], body : Annotated[StrictStr, Field(..., description="body")], x_forwarded_for : Annotated[Optional[StrictStr], Field(description="x-forwarded-for")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """checkoutUpdates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.checkout_updates_using_post_with_http_info(authorization, stripe_signature, version, body, x_forwarded_for, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param stripe_signature: stripe-signature (required)
        :type stripe_signature: str
        :param version: version (required)
        :type version: str
        :param body: body (required)
        :type body: str
        :param x_forwarded_for: x-forwarded-for
        :type x_forwarded_for: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'stripe_signature',
            'version',
            'body',
            'x_forwarded_for'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checkout_updates_using_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        if _params['stripe_signature']:
            _header_params['stripe-signature'] = _params['stripe_signature']

        if _params['x_forwarded_for']:
            _header_params['x-forwarded-for'] = _params['x_forwarded_for']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '403': None,
        }

        return self.api_client.call_api(
            '/stripe/{version}/checkout', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def club_account_updates_using_post(self, authorization : StrictStr, stripe_signature : Annotated[StrictStr, Field(..., description="stripe-signature")], version : Annotated[StrictStr, Field(..., description="version")], body : Annotated[StrictStr, Field(..., description="body")], x_forwarded_for : Annotated[Optional[StrictStr], Field(description="x-forwarded-for")] = None, **kwargs) -> object:  # noqa: E501
        """clubAccountUpdates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.club_account_updates_using_post(authorization, stripe_signature, version, body, x_forwarded_for, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param stripe_signature: stripe-signature (required)
        :type stripe_signature: str
        :param version: version (required)
        :type version: str
        :param body: body (required)
        :type body: str
        :param x_forwarded_for: x-forwarded-for
        :type x_forwarded_for: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the club_account_updates_using_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.club_account_updates_using_post_with_http_info(authorization, stripe_signature, version, body, x_forwarded_for, **kwargs)  # noqa: E501

    @validate_arguments
    def club_account_updates_using_post_with_http_info(self, authorization : StrictStr, stripe_signature : Annotated[StrictStr, Field(..., description="stripe-signature")], version : Annotated[StrictStr, Field(..., description="version")], body : Annotated[StrictStr, Field(..., description="body")], x_forwarded_for : Annotated[Optional[StrictStr], Field(description="x-forwarded-for")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """clubAccountUpdates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.club_account_updates_using_post_with_http_info(authorization, stripe_signature, version, body, x_forwarded_for, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param stripe_signature: stripe-signature (required)
        :type stripe_signature: str
        :param version: version (required)
        :type version: str
        :param body: body (required)
        :type body: str
        :param x_forwarded_for: x-forwarded-for
        :type x_forwarded_for: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'stripe_signature',
            'version',
            'body',
            'x_forwarded_for'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method club_account_updates_using_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        if _params['stripe_signature']:
            _header_params['stripe-signature'] = _params['stripe_signature']

        if _params['x_forwarded_for']:
            _header_params['x-forwarded-for'] = _params['x_forwarded_for']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '403': None,
        }

        return self.api_client.call_api(
            '/stripe/account/{version}/updated', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def invoice_updates_using_post(self, authorization : StrictStr, stripe_signature : Annotated[StrictStr, Field(..., description="stripe-signature")], version : Annotated[StrictStr, Field(..., description="version")], body : Annotated[StrictStr, Field(..., description="body")], x_forwarded_for : Annotated[Optional[StrictStr], Field(description="x-forwarded-for")] = None, **kwargs) -> object:  # noqa: E501
        """invoiceUpdates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.invoice_updates_using_post(authorization, stripe_signature, version, body, x_forwarded_for, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param stripe_signature: stripe-signature (required)
        :type stripe_signature: str
        :param version: version (required)
        :type version: str
        :param body: body (required)
        :type body: str
        :param x_forwarded_for: x-forwarded-for
        :type x_forwarded_for: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the invoice_updates_using_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.invoice_updates_using_post_with_http_info(authorization, stripe_signature, version, body, x_forwarded_for, **kwargs)  # noqa: E501

    @validate_arguments
    def invoice_updates_using_post_with_http_info(self, authorization : StrictStr, stripe_signature : Annotated[StrictStr, Field(..., description="stripe-signature")], version : Annotated[StrictStr, Field(..., description="version")], body : Annotated[StrictStr, Field(..., description="body")], x_forwarded_for : Annotated[Optional[StrictStr], Field(description="x-forwarded-for")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """invoiceUpdates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.invoice_updates_using_post_with_http_info(authorization, stripe_signature, version, body, x_forwarded_for, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param stripe_signature: stripe-signature (required)
        :type stripe_signature: str
        :param version: version (required)
        :type version: str
        :param body: body (required)
        :type body: str
        :param x_forwarded_for: x-forwarded-for
        :type x_forwarded_for: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'stripe_signature',
            'version',
            'body',
            'x_forwarded_for'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoice_updates_using_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        if _params['stripe_signature']:
            _header_params['stripe-signature'] = _params['stripe_signature']

        if _params['x_forwarded_for']:
            _header_params['x-forwarded-for'] = _params['x_forwarded_for']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '403': None,
        }

        return self.api_client.call_api(
            '/stripe/{version}/invoices', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def subscription_updates_using_post(self, authorization : StrictStr, stripe_signature : Annotated[StrictStr, Field(..., description="stripe-signature")], version : Annotated[StrictStr, Field(..., description="version")], body : Annotated[StrictStr, Field(..., description="body")], x_forwarded_for : Annotated[Optional[StrictStr], Field(description="x-forwarded-for")] = None, **kwargs) -> object:  # noqa: E501
        """subscriptionUpdates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.subscription_updates_using_post(authorization, stripe_signature, version, body, x_forwarded_for, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param stripe_signature: stripe-signature (required)
        :type stripe_signature: str
        :param version: version (required)
        :type version: str
        :param body: body (required)
        :type body: str
        :param x_forwarded_for: x-forwarded-for
        :type x_forwarded_for: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the subscription_updates_using_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.subscription_updates_using_post_with_http_info(authorization, stripe_signature, version, body, x_forwarded_for, **kwargs)  # noqa: E501

    @validate_arguments
    def subscription_updates_using_post_with_http_info(self, authorization : StrictStr, stripe_signature : Annotated[StrictStr, Field(..., description="stripe-signature")], version : Annotated[StrictStr, Field(..., description="version")], body : Annotated[StrictStr, Field(..., description="body")], x_forwarded_for : Annotated[Optional[StrictStr], Field(description="x-forwarded-for")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """subscriptionUpdates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.subscription_updates_using_post_with_http_info(authorization, stripe_signature, version, body, x_forwarded_for, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param stripe_signature: stripe-signature (required)
        :type stripe_signature: str
        :param version: version (required)
        :type version: str
        :param body: body (required)
        :type body: str
        :param x_forwarded_for: x-forwarded-for
        :type x_forwarded_for: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'stripe_signature',
            'version',
            'body',
            'x_forwarded_for'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscription_updates_using_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        if _params['stripe_signature']:
            _header_params['stripe-signature'] = _params['stripe_signature']

        if _params['x_forwarded_for']:
            _header_params['x-forwarded-for'] = _params['x_forwarded_for']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '403': None,
        }

        return self.api_client.call_api(
            '/stripe/{version}/subscriptions', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dupr_backend.api_client import ApiClient


class EventsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def checkout_event_using_get(self, authorization, league_id, version, **kwargs):  # noqa: E501
        """checkoutEvent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.checkout_event_using_get(authorization, league_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int league_id: leagueId (required)
        :param str version: version (required)
        :param str x_forwarded_for: x-forwarded-for
        :return: SingleWrapperOfSessionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.checkout_event_using_get_with_http_info(authorization, league_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.checkout_event_using_get_with_http_info(authorization, league_id, version, **kwargs)  # noqa: E501
            return data

    def checkout_event_using_get_with_http_info(self, authorization, league_id, version, **kwargs):  # noqa: E501
        """checkoutEvent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.checkout_event_using_get_with_http_info(authorization, league_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int league_id: leagueId (required)
        :param str version: version (required)
        :param str x_forwarded_for: x-forwarded-for
        :return: SingleWrapperOfSessionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'league_id', 'version', 'x_forwarded_for']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checkout_event_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `checkout_event_using_get`")  # noqa: E501
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `checkout_event_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `checkout_event_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_forwarded_for' in params:
            header_params['x-forwarded-for'] = params['x_forwarded_for']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/event/{leagueId}/{version}/checkout', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfSessionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_league_using_delete1(self, authorization, league_id, version, **kwargs):  # noqa: E501
        """deleteLeague  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_league_using_delete1(authorization, league_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int league_id: leagueId (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_league_using_delete1_with_http_info(authorization, league_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_league_using_delete1_with_http_info(authorization, league_id, version, **kwargs)  # noqa: E501
            return data

    def delete_league_using_delete1_with_http_info(self, authorization, league_id, version, **kwargs):  # noqa: E501
        """deleteLeague  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_league_using_delete1_with_http_info(authorization, league_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int league_id: leagueId (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'league_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_league_using_delete1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_league_using_delete1`")  # noqa: E501
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `delete_league_using_delete1`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `delete_league_using_delete1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/event/{version}/{leagueId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_text_content_using_delete(self, body, authorization, version, **kwargs):  # noqa: E501
        """deleteTextContent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_text_content_using_delete(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeleteEventMediaRequest body: request (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_text_content_using_delete_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_text_content_using_delete_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
            return data

    def delete_text_content_using_delete_with_http_info(self, body, authorization, version, **kwargs):  # noqa: E501
        """deleteTextContent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_text_content_using_delete_with_http_info(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeleteEventMediaRequest body: request (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_text_content_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_text_content_using_delete`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_text_content_using_delete`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `delete_text_content_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/event/{version}/media', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def draft_using_post1(self, body, authorization, version, **kwargs):  # noqa: E501
        """draft  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.draft_using_post1(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DraftLeagueRequest body: request (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.draft_using_post1_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
        else:
            (data) = self.draft_using_post1_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
            return data

    def draft_using_post1_with_http_info(self, body, authorization, version, **kwargs):  # noqa: E501
        """draft  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.draft_using_post1_with_http_info(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DraftLeagueRequest body: request (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method draft_using_post1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `draft_using_post1`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `draft_using_post1`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `draft_using_post1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/event/{version}/draft', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_league_using_put(self, body, authorization, version, **kwargs):  # noqa: E501
        """editLeague  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_league_using_put(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EditLeagueRequest body: request (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: SingleWrapperOfLeagueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_league_using_put_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_league_using_put_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
            return data

    def edit_league_using_put_with_http_info(self, body, authorization, version, **kwargs):  # noqa: E501
        """editLeague  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_league_using_put_with_http_info(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EditLeagueRequest body: request (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: SingleWrapperOfLeagueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_league_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_league_using_put`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `edit_league_using_put`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `edit_league_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/event/{version}/edit', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfLeagueResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def end_league_using_get1(self, authorization, league_id, version, **kwargs):  # noqa: E501
        """endLeague  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.end_league_using_get1(authorization, league_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int league_id: leagueId (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.end_league_using_get1_with_http_info(authorization, league_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.end_league_using_get1_with_http_info(authorization, league_id, version, **kwargs)  # noqa: E501
            return data

    def end_league_using_get1_with_http_info(self, authorization, league_id, version, **kwargs):  # noqa: E501
        """endLeague  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.end_league_using_get1_with_http_info(authorization, league_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int league_id: leagueId (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'league_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method end_league_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `end_league_using_get1`")  # noqa: E501
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `end_league_using_get1`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `end_league_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/event/{leagueId}/{version}/end', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_event_participants_using_get(self, authorization, league_id, version, **kwargs):  # noqa: E501
        """exportEventParticipants  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_event_participants_using_get(authorization, league_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int league_id: leagueId (required)
        :param str version: version (required)
        :return: SingleWrapperOfDownloadS3Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_event_participants_using_get_with_http_info(authorization, league_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.export_event_participants_using_get_with_http_info(authorization, league_id, version, **kwargs)  # noqa: E501
            return data

    def export_event_participants_using_get_with_http_info(self, authorization, league_id, version, **kwargs):  # noqa: E501
        """exportEventParticipants  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_event_participants_using_get_with_http_info(authorization, league_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int league_id: leagueId (required)
        :param str version: version (required)
        :return: SingleWrapperOfDownloadS3Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'league_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_event_participants_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `export_event_participants_using_get`")  # noqa: E501
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `export_event_participants_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `export_event_participants_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/event/{leagueId}/participant/{version}/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfDownloadS3Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_event_payments_using_post(self, body, authorization, version, **kwargs):  # noqa: E501
        """exportEventPayments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_event_payments_using_post(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportEventPaymentRequest body: request (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: SingleWrapperOfDownloadS3Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_event_payments_using_post_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
        else:
            (data) = self.export_event_payments_using_post_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
            return data

    def export_event_payments_using_post_with_http_info(self, body, authorization, version, **kwargs):  # noqa: E501
        """exportEventPayments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_event_payments_using_post_with_http_info(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportEventPaymentRequest body: request (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: SingleWrapperOfDownloadS3Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_event_payments_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `export_event_payments_using_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `export_event_payments_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `export_event_payments_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/event/director/participant/payment/{version}/export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfDownloadS3Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_event_players_using_post1(self, body, authorization, limit, offset, version, **kwargs):  # noqa: E501
        """getAllEventPlayers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_event_players_using_post1(body, authorization, limit, offset, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchLeaguePlayerRequest body: searchLeaguePlayerRequest (required)
        :param str authorization: (required)
        :param int limit: limit (required)
        :param int offset: offset (required)
        :param str version: version (required)
        :return: SingleWrapperOfPageOfPlayerPaymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_event_players_using_post1_with_http_info(body, authorization, limit, offset, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_event_players_using_post1_with_http_info(body, authorization, limit, offset, version, **kwargs)  # noqa: E501
            return data

    def get_all_event_players_using_post1_with_http_info(self, body, authorization, limit, offset, version, **kwargs):  # noqa: E501
        """getAllEventPlayers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_event_players_using_post1_with_http_info(body, authorization, limit, offset, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchLeaguePlayerRequest body: searchLeaguePlayerRequest (required)
        :param str authorization: (required)
        :param int limit: limit (required)
        :param int offset: offset (required)
        :param str version: version (required)
        :return: SingleWrapperOfPageOfPlayerPaymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'limit', 'offset', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_event_players_using_post1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_all_event_players_using_post1`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_all_event_players_using_post1`")  # noqa: E501
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `get_all_event_players_using_post1`")  # noqa: E501
        # verify the required parameter 'offset' is set
        if ('offset' not in params or
                params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `get_all_event_players_using_post1`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_all_event_players_using_post1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/event/director/participant/{version}/all', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfPageOfPlayerPaymentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_city_autocomplete_using_get(self, authorization, version, **kwargs):  # noqa: E501
        """getCityAutocomplete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_city_autocomplete_using_get(authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str version: version (required)
        :param str search: search
        :return: ArrayWrapperOfstring
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_city_autocomplete_using_get_with_http_info(authorization, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_city_autocomplete_using_get_with_http_info(authorization, version, **kwargs)  # noqa: E501
            return data

    def get_city_autocomplete_using_get_with_http_info(self, authorization, version, **kwargs):  # noqa: E501
        """getCityAutocomplete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_city_autocomplete_using_get_with_http_info(authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str version: version (required)
        :param str search: search
        :return: ArrayWrapperOfstring
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'version', 'search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_city_autocomplete_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_city_autocomplete_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_city_autocomplete_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/event/city/{version}/autocomplete', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArrayWrapperOfstring',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_club_leagues_using_get(self, authorization, club_id, limit, offset, version, **kwargs):  # noqa: E501
        """getClubLeagues  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_club_leagues_using_get(authorization, club_id, limit, offset, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param int limit: limit (required)
        :param int offset: offset (required)
        :param str version: version (required)
        :param bool include_draft_events: includeDraftEvents
        :return: SingleWrapperOfPageOfLeagueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_club_leagues_using_get_with_http_info(authorization, club_id, limit, offset, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_club_leagues_using_get_with_http_info(authorization, club_id, limit, offset, version, **kwargs)  # noqa: E501
            return data

    def get_club_leagues_using_get_with_http_info(self, authorization, club_id, limit, offset, version, **kwargs):  # noqa: E501
        """getClubLeagues  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_club_leagues_using_get_with_http_info(authorization, club_id, limit, offset, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param int limit: limit (required)
        :param int offset: offset (required)
        :param str version: version (required)
        :param bool include_draft_events: includeDraftEvents
        :return: SingleWrapperOfPageOfLeagueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'club_id', 'limit', 'offset', 'version', 'include_draft_events']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_club_leagues_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_club_leagues_using_get`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `get_club_leagues_using_get`")  # noqa: E501
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `get_club_leagues_using_get`")  # noqa: E501
        # verify the required parameter 'offset' is set
        if ('offset' not in params or
                params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `get_club_leagues_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_club_leagues_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'include_draft_events' in params:
            query_params.append(('includeDraftEvents', params['include_draft_events']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/event/club/{version}/{clubId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfPageOfLeagueResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_league_policy_using_get(self, league_id, version, **kwargs):  # noqa: E501
        """getLeaguePolicy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_league_policy_using_get(league_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: leagueId (required)
        :param str version: version (required)
        :return: SingleWrapperOfPolicyDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_league_policy_using_get_with_http_info(league_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_league_policy_using_get_with_http_info(league_id, version, **kwargs)  # noqa: E501
            return data

    def get_league_policy_using_get_with_http_info(self, league_id, version, **kwargs):  # noqa: E501
        """getLeaguePolicy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_league_policy_using_get_with_http_info(league_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: leagueId (required)
        :param str version: version (required)
        :return: SingleWrapperOfPolicyDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_league_policy_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `get_league_policy_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_league_policy_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'league_id' in params:
            query_params.append(('leagueId', params['league_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/event/policy/{version}/content', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfPolicyDetailsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_league_using_get(self, league_id, version, **kwargs):  # noqa: E501
        """getLeague  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_league_using_get(league_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: leagueId (required)
        :param str version: version (required)
        :param str authorization:
        :return: SingleWrapperOfLeagueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_league_using_get_with_http_info(league_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_league_using_get_with_http_info(league_id, version, **kwargs)  # noqa: E501
            return data

    def get_league_using_get_with_http_info(self, league_id, version, **kwargs):  # noqa: E501
        """getLeague  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_league_using_get_with_http_info(league_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: leagueId (required)
        :param str version: version (required)
        :param str authorization:
        :return: SingleWrapperOfLeagueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id', 'version', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_league_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `get_league_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_league_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/event/{version}/{leagueId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfLeagueResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_leagues_by_user_id_using_post(self, body, authorization, id, version, **kwargs):  # noqa: E501
        """getLeaguesByUserId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_leagues_by_user_id_using_post(body, authorization, id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MyLeagueRequest body: request (required)
        :param str authorization: (required)
        :param int id: id (required)
        :param str version: version (required)
        :return: SingleWrapperOfPageOfLeagueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_leagues_by_user_id_using_post_with_http_info(body, authorization, id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_leagues_by_user_id_using_post_with_http_info(body, authorization, id, version, **kwargs)  # noqa: E501
            return data

    def get_leagues_by_user_id_using_post_with_http_info(self, body, authorization, id, version, **kwargs):  # noqa: E501
        """getLeaguesByUserId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_leagues_by_user_id_using_post_with_http_info(body, authorization, id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MyLeagueRequest body: request (required)
        :param str authorization: (required)
        :param int id: id (required)
        :param str version: version (required)
        :return: SingleWrapperOfPageOfLeagueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_leagues_by_user_id_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_leagues_by_user_id_using_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_leagues_by_user_id_using_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_leagues_by_user_id_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_leagues_by_user_id_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/event/{version}/user/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfPageOfLeagueResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_my_leagues_using_post(self, body, authorization, version, **kwargs):  # noqa: E501
        """getMyLeagues  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_my_leagues_using_post(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MyLeagueRequest body: request (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: SingleWrapperOfPageOfLeagueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_my_leagues_using_post_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_my_leagues_using_post_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
            return data

    def get_my_leagues_using_post_with_http_info(self, body, authorization, version, **kwargs):  # noqa: E501
        """getMyLeagues  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_my_leagues_using_post_with_http_info(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MyLeagueRequest body: request (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: SingleWrapperOfPageOfLeagueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_my_leagues_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_my_leagues_using_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_my_leagues_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_my_leagues_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/event/{version}/all', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfPageOfLeagueResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def join_event_using_post(self, body, authorization, league_id, version, **kwargs):  # noqa: E501
        """joinEvent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.join_event_using_post(body, authorization, league_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[JoinLeagueRequest] body: request (required)
        :param str authorization: (required)
        :param int league_id: leagueId (required)
        :param str version: version (required)
        :return: SingleWrapperOfJoinLeagueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.join_event_using_post_with_http_info(body, authorization, league_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.join_event_using_post_with_http_info(body, authorization, league_id, version, **kwargs)  # noqa: E501
            return data

    def join_event_using_post_with_http_info(self, body, authorization, league_id, version, **kwargs):  # noqa: E501
        """joinEvent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.join_event_using_post_with_http_info(body, authorization, league_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[JoinLeagueRequest] body: request (required)
        :param str authorization: (required)
        :param int league_id: leagueId (required)
        :param str version: version (required)
        :return: SingleWrapperOfJoinLeagueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'league_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method join_event_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `join_event_using_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `join_event_using_post`")  # noqa: E501
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `join_event_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `join_event_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/event/{leagueId}/{version}/join', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfJoinLeagueResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_event_using_post(self, body, authorization, league_id, version, **kwargs):  # noqa: E501
        """registerEvent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_event_using_post(body, authorization, league_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[JoinLeagueRequest] body: requests (required)
        :param str authorization: (required)
        :param int league_id: leagueId (required)
        :param str version: version (required)
        :param str x_forwarded_for: x-forwarded-for
        :return: SingleWrapperOfSessionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_event_using_post_with_http_info(body, authorization, league_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.register_event_using_post_with_http_info(body, authorization, league_id, version, **kwargs)  # noqa: E501
            return data

    def register_event_using_post_with_http_info(self, body, authorization, league_id, version, **kwargs):  # noqa: E501
        """registerEvent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_event_using_post_with_http_info(body, authorization, league_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[JoinLeagueRequest] body: requests (required)
        :param str authorization: (required)
        :param int league_id: leagueId (required)
        :param str version: version (required)
        :param str x_forwarded_for: x-forwarded-for
        :return: SingleWrapperOfSessionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'league_id', 'version', 'x_forwarded_for']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_event_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `register_event_using_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `register_event_using_post`")  # noqa: E501
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `register_event_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `register_event_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_forwarded_for' in params:
            header_params['x-forwarded-for'] = params['x_forwarded_for']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/event/{leagueId}/{version}/checkout', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfSessionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_using_post1(self, body, authorization, version, **kwargs):  # noqa: E501
        """save  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_using_post1(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LeagueRequest body: request (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_using_post1_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
        else:
            (data) = self.save_using_post1_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
            return data

    def save_using_post1_with_http_info(self, body, authorization, version, **kwargs):  # noqa: E501
        """save  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_using_post1_with_http_info(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LeagueRequest body: request (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_using_post1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `save_using_post1`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `save_using_post1`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `save_using_post1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/event/{version}/save', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_leagues_using_post(self, body, version, **kwargs):  # noqa: E501
        """searchLeagues  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_leagues_using_post(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchLeaguesRequest body: request (required)
        :param str version: version (required)
        :param str authorization:
        :return: SingleWrapperOfPageOfLeagueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_leagues_using_post_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.search_leagues_using_post_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def search_leagues_using_post_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """searchLeagues  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_leagues_using_post_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchLeaguesRequest body: request (required)
        :param str version: version (required)
        :param str authorization:
        :return: SingleWrapperOfPageOfLeagueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_leagues_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `search_leagues_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `search_leagues_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/event/{version}/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfPageOfLeagueResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

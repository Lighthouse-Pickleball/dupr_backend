# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dupr_backend.api_client import ApiClient


class AddressApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def autocomplete_using_get(self, q, st, version, **kwargs):  # noqa: E501
        """autocomplete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete_using_get(q, st, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: q (required)
        :param str st: st (required)
        :param str version: version (required)
        :return: SingleWrapperOfArrayOfAutocompletePrediction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.autocomplete_using_get_with_http_info(q, st, version, **kwargs)  # noqa: E501
        else:
            (data) = self.autocomplete_using_get_with_http_info(q, st, version, **kwargs)  # noqa: E501
            return data

    def autocomplete_using_get_with_http_info(self, q, st, version, **kwargs):  # noqa: E501
        """autocomplete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete_using_get_with_http_info(q, st, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: q (required)
        :param str st: st (required)
        :param str version: version (required)
        :return: SingleWrapperOfArrayOfAutocompletePrediction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'st', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method autocomplete_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'q' is set
        if ('q' not in params or
                params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `autocomplete_using_get`")  # noqa: E501
        # verify the required parameter 'st' is set
        if ('st' not in params or
                params['st'] is None):
            raise ValueError("Missing the required parameter `st` when calling `autocomplete_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `autocomplete_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'st' in params:
            query_params.append(('st', params['st']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/address/{version}/autocomplete', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfArrayOfAutocompletePrediction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_user_address_using_delete(self, body, authorization, version, **kwargs):  # noqa: E501
        """deleteUserAddress  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_address_using_delete(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdPayload body: request (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_user_address_using_delete_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_user_address_using_delete_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
            return data

    def delete_user_address_using_delete_with_http_info(self, body, authorization, version, **kwargs):  # noqa: E501
        """deleteUserAddress  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_address_using_delete_with_http_info(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdPayload body: request (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user_address_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_user_address_using_delete`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_user_address_using_delete`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `delete_user_address_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/address/{version}/delete', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def geocode_using_get(self, lat, lon, version, **kwargs):  # noqa: E501
        """geocode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geocode_using_get(lat, lon, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float lat: lat (required)
        :param float lon: lon (required)
        :param str version: version (required)
        :return: ArrayWrapperOfGeocodingResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.geocode_using_get_with_http_info(lat, lon, version, **kwargs)  # noqa: E501
        else:
            (data) = self.geocode_using_get_with_http_info(lat, lon, version, **kwargs)  # noqa: E501
            return data

    def geocode_using_get_with_http_info(self, lat, lon, version, **kwargs):  # noqa: E501
        """geocode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geocode_using_get_with_http_info(lat, lon, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float lat: lat (required)
        :param float lon: lon (required)
        :param str version: version (required)
        :return: ArrayWrapperOfGeocodingResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lat', 'lon', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method geocode_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lat' is set
        if ('lat' not in params or
                params['lat'] is None):
            raise ValueError("Missing the required parameter `lat` when calling `geocode_using_get`")  # noqa: E501
        # verify the required parameter 'lon' is set
        if ('lon' not in params or
                params['lon'] is None):
            raise ValueError("Missing the required parameter `lon` when calling `geocode_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `geocode_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'lat' in params:
            query_params.append(('lat', params['lat']))  # noqa: E501
        if 'lon' in params:
            query_params.append(('lon', params['lon']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/address/{version}/geocode', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArrayWrapperOfGeocodingResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def place_details_using_get(self, place_id, version, **kwargs):  # noqa: E501
        """placeDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.place_details_using_get(place_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str place_id: placeId (required)
        :param str version: version (required)
        :return: SingleWrapperOfGeocodingResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.place_details_using_get_with_http_info(place_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.place_details_using_get_with_http_info(place_id, version, **kwargs)  # noqa: E501
            return data

    def place_details_using_get_with_http_info(self, place_id, version, **kwargs):  # noqa: E501
        """placeDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.place_details_using_get_with_http_info(place_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str place_id: placeId (required)
        :param str version: version (required)
        :return: SingleWrapperOfGeocodingResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['place_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method place_details_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'place_id' is set
        if ('place_id' not in params or
                params['place_id'] is None):
            raise ValueError("Missing the required parameter `place_id` when calling `place_details_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `place_details_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'place_id' in params:
            query_params.append(('placeId', params['place_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/address/{version}/details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfGeocodingResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_address_using_put(self, body, version, **kwargs):  # noqa: E501
        """saveAddress  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_address_using_put(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddressRequest body: request (required)
        :param str version: version (required)
        :return: SingleWrapperOfIdPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_address_using_put_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.save_address_using_put_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def save_address_using_put_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """saveAddress  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_address_using_put_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddressRequest body: request (required)
        :param str version: version (required)
        :return: SingleWrapperOfIdPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_address_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `save_address_using_put`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `save_address_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/address/{version}/save', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfIdPayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

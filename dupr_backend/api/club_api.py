# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dupr_backend.api_client import ApiClient


class ClubApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_club_using_put(self, body, authorization, version, **kwargs):  # noqa: E501
        """addClub  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_club_using_put(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClubRequest body: request (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_club_using_put_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
        else:
            (data) = self.add_club_using_put_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
            return data

    def add_club_using_put_with_http_info(self, body, authorization, version, **kwargs):  # noqa: E501
        """addClub  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_club_using_put_with_http_info(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClubRequest body: request (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_club_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_club_using_put`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `add_club_using_put`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `add_club_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{version}/add', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_member_admin_using_put(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """addMemberAdmin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_member_admin_using_put(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserListRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_member_admin_using_put_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.add_member_admin_using_put_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
            return data

    def add_member_admin_using_put_with_http_info(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """addMemberAdmin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_member_admin_using_put_with_http_info(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserListRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'club_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_member_admin_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_member_admin_using_put`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `add_member_admin_using_put`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `add_member_admin_using_put`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `add_member_admin_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/members/{version}/add', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_member_multiple_admin_using_put(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """addMemberMultipleAdmin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_member_multiple_admin_using_put(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClubMemberAddRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: SingleWrapperOfClubMemberManyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_member_multiple_admin_using_put_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.add_member_multiple_admin_using_put_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
            return data

    def add_member_multiple_admin_using_put_with_http_info(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """addMemberMultipleAdmin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_member_multiple_admin_using_put_with_http_info(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClubMemberAddRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: SingleWrapperOfClubMemberManyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'club_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_member_multiple_admin_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_member_multiple_admin_using_put`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `add_member_multiple_admin_using_put`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `add_member_multiple_admin_using_put`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `add_member_multiple_admin_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/members/{version}/multiple/add', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfClubMemberManyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_member_multiple_csv_admin_using_put(self, authorization, club_id, version, **kwargs):  # noqa: E501
        """addMemberMultipleCsvAdmin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_member_multiple_csv_admin_using_put(authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :param str request:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_member_multiple_csv_admin_using_put_with_http_info(authorization, club_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.add_member_multiple_csv_admin_using_put_with_http_info(authorization, club_id, version, **kwargs)  # noqa: E501
            return data

    def add_member_multiple_csv_admin_using_put_with_http_info(self, authorization, club_id, version, **kwargs):  # noqa: E501
        """addMemberMultipleCsvAdmin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_member_multiple_csv_admin_using_put_with_http_info(authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :param str request:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'club_id', 'version', 'request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_member_multiple_csv_admin_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `add_member_multiple_csv_admin_using_put`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `add_member_multiple_csv_admin_using_put`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `add_member_multiple_csv_admin_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'request' in params:
            local_var_files['request'] = params['request']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/members/{version}/csv/add', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_member_request_using_put(self, authorization, club_id, version, **kwargs):  # noqa: E501
        """addMemberRequest  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_member_request_using_put(authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_member_request_using_put_with_http_info(authorization, club_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.add_member_request_using_put_with_http_info(authorization, club_id, version, **kwargs)  # noqa: E501
            return data

    def add_member_request_using_put_with_http_info(self, authorization, club_id, version, **kwargs):  # noqa: E501
        """addMemberRequest  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_member_request_using_put_with_http_info(authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'club_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_member_request_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `add_member_request_using_put`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `add_member_request_using_put`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `add_member_request_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/members/{version}/join', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def approve_roles_using_post(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """approveRoles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_roles_using_post(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdsListRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.approve_roles_using_post_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.approve_roles_using_post_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
            return data

    def approve_roles_using_post_with_http_info(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """approveRoles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_roles_using_post_with_http_info(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdsListRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'club_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method approve_roles_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `approve_roles_using_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `approve_roles_using_post`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `approve_roles_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `approve_roles_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/{version}/approve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_roles_using_post(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """assignRoles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_roles_using_post(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssignRoleRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_roles_using_post_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_roles_using_post_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
            return data

    def assign_roles_using_post_with_http_info(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """assignRoles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_roles_using_post_with_http_info(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssignRoleRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'club_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_roles_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assign_roles_using_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `assign_roles_using_post`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `assign_roles_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `assign_roles_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/roles/{version}/assign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def club_match_history_by_filters_using_post(self, body, authorization, version, **kwargs):  # noqa: E501
        """clubMatchHistoryByFilters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.club_match_history_by_filters_using_post(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClubMatchHistoryRequest body: request (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: SingleWrapperOfPageOfMatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.club_match_history_by_filters_using_post_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
        else:
            (data) = self.club_match_history_by_filters_using_post_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
            return data

    def club_match_history_by_filters_using_post_with_http_info(self, body, authorization, version, **kwargs):  # noqa: E501
        """clubMatchHistoryByFilters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.club_match_history_by_filters_using_post_with_http_info(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClubMatchHistoryRequest body: request (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: SingleWrapperOfPageOfMatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method club_match_history_by_filters_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `club_match_history_by_filters_using_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `club_match_history_by_filters_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `club_match_history_by_filters_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/match/{version}/history', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfPageOfMatchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def club_match_history_using_get(self, authorization, club_id, limit, offset, version, **kwargs):  # noqa: E501
        """clubMatchHistory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.club_match_history_using_get(authorization, club_id, limit, offset, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param int limit: limit (required)
        :param int offset: offset (required)
        :param str version: version (required)
        :return: SingleWrapperOfPageOfMatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.club_match_history_using_get_with_http_info(authorization, club_id, limit, offset, version, **kwargs)  # noqa: E501
        else:
            (data) = self.club_match_history_using_get_with_http_info(authorization, club_id, limit, offset, version, **kwargs)  # noqa: E501
            return data

    def club_match_history_using_get_with_http_info(self, authorization, club_id, limit, offset, version, **kwargs):  # noqa: E501
        """clubMatchHistory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.club_match_history_using_get_with_http_info(authorization, club_id, limit, offset, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param int limit: limit (required)
        :param int offset: offset (required)
        :param str version: version (required)
        :return: SingleWrapperOfPageOfMatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'club_id', 'limit', 'offset', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method club_match_history_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `club_match_history_using_get`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `club_match_history_using_get`")  # noqa: E501
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `club_match_history_using_get`")  # noqa: E501
        # verify the required parameter 'offset' is set
        if ('offset' not in params or
                params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `club_match_history_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `club_match_history_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/{version}/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfPageOfMatchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def club_save_match_using_put(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """clubSaveMatch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.club_save_match_using_put(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MatchRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.club_save_match_using_put_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.club_save_match_using_put_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
            return data

    def club_save_match_using_put_with_http_info(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """clubSaveMatch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.club_save_match_using_put_with_http_info(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MatchRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'club_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method club_save_match_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `club_save_match_using_put`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `club_save_match_using_put`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `club_save_match_using_put`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `club_save_match_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/match/{version}/save', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_club_match_using_post(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """deleteClubMatch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_club_match_using_post(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeleteMatchRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_club_match_using_post_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_club_match_using_post_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
            return data

    def delete_club_match_using_post_with_http_info(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """deleteClubMatch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_club_match_using_post_with_http_info(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeleteMatchRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'club_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_club_match_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_club_match_using_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_club_match_using_post`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `delete_club_match_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `delete_club_match_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/match/{id}/{version}/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_member_admin_using_delete(self, authorization, club_id, user_ids, version, **kwargs):  # noqa: E501
        """deleteMemberAdmin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_member_admin_using_delete(authorization, club_id, user_ids, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param list[int] user_ids: userIds (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_member_admin_using_delete_with_http_info(authorization, club_id, user_ids, version, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_member_admin_using_delete_with_http_info(authorization, club_id, user_ids, version, **kwargs)  # noqa: E501
            return data

    def delete_member_admin_using_delete_with_http_info(self, authorization, club_id, user_ids, version, **kwargs):  # noqa: E501
        """deleteMemberAdmin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_member_admin_using_delete_with_http_info(authorization, club_id, user_ids, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param list[int] user_ids: userIds (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'club_id', 'user_ids', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_member_admin_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_member_admin_using_delete`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `delete_member_admin_using_delete`")  # noqa: E501
        # verify the required parameter 'user_ids' is set
        if ('user_ids' not in params or
                params['user_ids'] is None):
            raise ValueError("Missing the required parameter `user_ids` when calling `delete_member_admin_using_delete`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `delete_member_admin_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'user_ids' in params:
            query_params.append(('userIds', params['user_ids']))  # noqa: E501
            collection_formats['userIds'] = 'multi'  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/members/{version}/remove', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_member_request_using_delete(self, authorization, club_id, version, **kwargs):  # noqa: E501
        """deleteMemberRequest  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_member_request_using_delete(authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_member_request_using_delete_with_http_info(authorization, club_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_member_request_using_delete_with_http_info(authorization, club_id, version, **kwargs)  # noqa: E501
            return data

    def delete_member_request_using_delete_with_http_info(self, authorization, club_id, version, **kwargs):  # noqa: E501
        """deleteMemberRequest  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_member_request_using_delete_with_http_info(authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'club_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_member_request_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_member_request_using_delete`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `delete_member_request_using_delete`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `delete_member_request_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/members/{version}/leave', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_club_match_using_put(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """editClubMatch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_club_match_using_put(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MatchUpdateRequest body: matchUpdateRequest (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: SingleWrapperOfMatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_club_match_using_put_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_club_match_using_put_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
            return data

    def edit_club_match_using_put_with_http_info(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """editClubMatch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_club_match_using_put_with_http_info(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MatchUpdateRequest body: matchUpdateRequest (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: SingleWrapperOfMatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'club_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_club_match_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_club_match_using_put`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `edit_club_match_using_put`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `edit_club_match_using_put`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `edit_club_match_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/match/{id}/{version}/edit', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfMatchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_club_roles_using_get(self, authorization, version, **kwargs):  # noqa: E501
        """getAllClubRoles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_club_roles_using_get(authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str version: version (required)
        :return: ArrayWrapperOfClubListingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_club_roles_using_get_with_http_info(authorization, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_club_roles_using_get_with_http_info(authorization, version, **kwargs)  # noqa: E501
            return data

    def get_all_club_roles_using_get_with_http_info(self, authorization, version, **kwargs):  # noqa: E501
        """getAllClubRoles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_club_roles_using_get_with_http_info(authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str version: version (required)
        :return: ArrayWrapperOfClubListingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_club_roles_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_all_club_roles_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_all_club_roles_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/roles/{version}/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArrayWrapperOfClubListingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_currency_details_using_get(self, authorization, version, **kwargs):  # noqa: E501
        """getAllCurrencyDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_currency_details_using_get(authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str version: version (required)
        :return: ArrayWrapperOfCurrencyDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_currency_details_using_get_with_http_info(authorization, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_currency_details_using_get_with_http_info(authorization, version, **kwargs)  # noqa: E501
            return data

    def get_all_currency_details_using_get_with_http_info(self, authorization, version, **kwargs):  # noqa: E501
        """getAllCurrencyDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_currency_details_using_get_with_http_info(authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str version: version (required)
        :return: ArrayWrapperOfCurrencyDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_currency_details_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_all_currency_details_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_all_currency_details_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/currency/{version}/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArrayWrapperOfCurrencyDetailsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_members_download_using_post(self, authorization, club_id, version, **kwargs):  # noqa: E501
        """getAllMembersDownload  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_members_download_using_post(authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: SingleWrapperOfDownloadS3Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_members_download_using_post_with_http_info(authorization, club_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_members_download_using_post_with_http_info(authorization, club_id, version, **kwargs)  # noqa: E501
            return data

    def get_all_members_download_using_post_with_http_info(self, authorization, club_id, version, **kwargs):  # noqa: E501
        """getAllMembersDownload  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_members_download_using_post_with_http_info(authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: SingleWrapperOfDownloadS3Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'club_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_members_download_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_all_members_download_using_post`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `get_all_members_download_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_all_members_download_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/members/{version}/all/download', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfDownloadS3Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_members_using_post(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """getAllMembers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_members_using_post(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClubMembersSearchRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: SingleWrapperOfPageOfClubMemberResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_members_using_post_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_members_using_post_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
            return data

    def get_all_members_using_post_with_http_info(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """getAllMembers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_members_using_post_with_http_info(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClubMembersSearchRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: SingleWrapperOfPageOfClubMemberResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'club_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_members_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_all_members_using_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_all_members_using_post`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `get_all_members_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_all_members_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/members/{version}/all', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfPageOfClubMemberResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_roles_using_get1(self, authorization, version, **kwargs):  # noqa: E501
        """getAllRoles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_roles_using_get1(authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str version: version (required)
        :return: ArrayWrapperOfRoleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_roles_using_get1_with_http_info(authorization, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_roles_using_get1_with_http_info(authorization, version, **kwargs)  # noqa: E501
            return data

    def get_all_roles_using_get1_with_http_info(self, authorization, version, **kwargs):  # noqa: E501
        """getAllRoles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_roles_using_get1_with_http_info(authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str version: version (required)
        :return: ArrayWrapperOfRoleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_roles_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_all_roles_using_get1`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_all_roles_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/roles/{version}/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArrayWrapperOfRoleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_staff_members_using_get(self, authorization, club_id, version, **kwargs):  # noqa: E501
        """getAllStaffMembers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_staff_members_using_get(authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: SingleWrapperOfStaffClubMemberResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_staff_members_using_get_with_http_info(authorization, club_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_staff_members_using_get_with_http_info(authorization, club_id, version, **kwargs)  # noqa: E501
            return data

    def get_all_staff_members_using_get_with_http_info(self, authorization, club_id, version, **kwargs):  # noqa: E501
        """getAllStaffMembers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_staff_members_using_get_with_http_info(authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: SingleWrapperOfStaffClubMemberResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'club_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_staff_members_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_all_staff_members_using_get`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `get_all_staff_members_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_all_staff_members_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/members/{version}/staff', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfStaffClubMemberResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_club_pending_invites_using_post(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """getClubPendingInvites  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_club_pending_invites_using_post(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClubMembersSearchRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: SingleWrapperOfPageOfClubMemberResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_club_pending_invites_using_post_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_club_pending_invites_using_post_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
            return data

    def get_club_pending_invites_using_post_with_http_info(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """getClubPendingInvites  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_club_pending_invites_using_post_with_http_info(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClubMembersSearchRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: SingleWrapperOfPageOfClubMemberResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'club_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_club_pending_invites_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_club_pending_invites_using_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_club_pending_invites_using_post`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `get_club_pending_invites_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_club_pending_invites_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/members/{version}/pending/invites', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfPageOfClubMemberResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_club_restrictions_using_post1(self, authorization, club_id, version, **kwargs):  # noqa: E501
        """getClubRestrictions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_club_restrictions_using_post1(authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_club_restrictions_using_post1_with_http_info(authorization, club_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_club_restrictions_using_post1_with_http_info(authorization, club_id, version, **kwargs)  # noqa: E501
            return data

    def get_club_restrictions_using_post1_with_http_info(self, authorization, club_id, version, **kwargs):  # noqa: E501
        """getClubRestrictions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_club_restrictions_using_post1_with_http_info(authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'club_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_club_restrictions_using_post1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_club_restrictions_using_post1`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `get_club_restrictions_using_post1`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_club_restrictions_using_post1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/{version}/restrictions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_club_roles_player_using_post(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """getClubRolesPlayer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_club_roles_player_using_post(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: SingleWrapperOfRoleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_club_roles_player_using_post_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_club_roles_player_using_post_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
            return data

    def get_club_roles_player_using_post_with_http_info(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """getClubRolesPlayer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_club_roles_player_using_post_with_http_info(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: SingleWrapperOfRoleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'club_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_club_roles_player_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_club_roles_player_using_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_club_roles_player_using_post`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `get_club_roles_player_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_club_roles_player_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/roles/{version}/permission', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfRoleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_club_roles_staff_using_get(self, authorization, version, **kwargs):  # noqa: E501
        """getClubRolesStaff  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_club_roles_staff_using_get(authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str version: version (required)
        :return: SingleWrapperOfMapOfstringAndobject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_club_roles_staff_using_get_with_http_info(authorization, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_club_roles_staff_using_get_with_http_info(authorization, version, **kwargs)  # noqa: E501
            return data

    def get_club_roles_staff_using_get_with_http_info(self, authorization, version, **kwargs):  # noqa: E501
        """getClubRolesStaff  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_club_roles_staff_using_get_with_http_info(authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str version: version (required)
        :return: SingleWrapperOfMapOfstringAndobject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_club_roles_staff_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_club_roles_staff_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_club_roles_staff_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/roles/{version}/staff', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfMapOfstringAndobject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_club_roles_using_post(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """getClubRoles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_club_roles_using_post(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: SingleWrapperOfRoleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_club_roles_using_post_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_club_roles_using_post_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
            return data

    def get_club_roles_using_post_with_http_info(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """getClubRoles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_club_roles_using_post_with_http_info(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: SingleWrapperOfRoleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'club_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_club_roles_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_club_roles_using_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_club_roles_using_post`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `get_club_roles_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_club_roles_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/roles/{version}/user', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfRoleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_club_using_get(self, authorization, club_id, version, **kwargs):  # noqa: E501
        """getClub  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_club_using_get(authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: SingleWrapperOfClubResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_club_using_get_with_http_info(authorization, club_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_club_using_get_with_http_info(authorization, club_id, version, **kwargs)  # noqa: E501
            return data

    def get_club_using_get_with_http_info(self, authorization, club_id, version, **kwargs):  # noqa: E501
        """getClub  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_club_using_get_with_http_info(authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: SingleWrapperOfClubResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'club_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_club_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_club_using_get`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `get_club_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_club_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{version}/{clubId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfClubResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_clubs_using_get(self, authorization, limit, offset, own, q, version, **kwargs):  # noqa: E501
        """getClubs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_clubs_using_get(authorization, limit, offset, own, q, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int limit: limit (required)
        :param int offset: offset (required)
        :param bool own: own (required)
        :param str q: q (required)
        :param str version: version (required)
        :return: SingleWrapperOfPageOfClubResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_clubs_using_get_with_http_info(authorization, limit, offset, own, q, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_clubs_using_get_with_http_info(authorization, limit, offset, own, q, version, **kwargs)  # noqa: E501
            return data

    def get_clubs_using_get_with_http_info(self, authorization, limit, offset, own, q, version, **kwargs):  # noqa: E501
        """getClubs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_clubs_using_get_with_http_info(authorization, limit, offset, own, q, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int limit: limit (required)
        :param int offset: offset (required)
        :param bool own: own (required)
        :param str q: q (required)
        :param str version: version (required)
        :return: SingleWrapperOfPageOfClubResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'limit', 'offset', 'own', 'q', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_clubs_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_clubs_using_get`")  # noqa: E501
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `get_clubs_using_get`")  # noqa: E501
        # verify the required parameter 'offset' is set
        if ('offset' not in params or
                params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `get_clubs_using_get`")  # noqa: E501
        # verify the required parameter 'own' is set
        if ('own' not in params or
                params['own'] is None):
            raise ValueError("Missing the required parameter `own` when calling `get_clubs_using_get`")  # noqa: E501
        # verify the required parameter 'q' is set
        if ('q' not in params or
                params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `get_clubs_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_clubs_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'own' in params:
            query_params.append(('own', params['own']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{version}/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfPageOfClubResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_clubs_using_post(self, body, authorization, version, **kwargs):  # noqa: E501
        """getClubs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_clubs_using_post(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClubSearch body: clubSearch (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: SingleWrapperOfPageOfClubResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_clubs_using_post_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_clubs_using_post_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
            return data

    def get_clubs_using_post_with_http_info(self, body, authorization, version, **kwargs):  # noqa: E501
        """getClubs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_clubs_using_post_with_http_info(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClubSearch body: clubSearch (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: SingleWrapperOfPageOfClubResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_clubs_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_clubs_using_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_clubs_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_clubs_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{version}/all', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfPageOfClubResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_currency_details_using_get(self, authorization, currency_code, version, **kwargs):  # noqa: E501
        """getCurrencyDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_currency_details_using_get(authorization, currency_code, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str currency_code: currencyCode (required)
        :param str version: version (required)
        :return: SingleWrapperOfCurrencyDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_currency_details_using_get_with_http_info(authorization, currency_code, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_currency_details_using_get_with_http_info(authorization, currency_code, version, **kwargs)  # noqa: E501
            return data

    def get_currency_details_using_get_with_http_info(self, authorization, currency_code, version, **kwargs):  # noqa: E501
        """getCurrencyDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_currency_details_using_get_with_http_info(authorization, currency_code, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str currency_code: currencyCode (required)
        :param str version: version (required)
        :return: SingleWrapperOfCurrencyDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'currency_code', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_currency_details_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_currency_details_using_get`")  # noqa: E501
        # verify the required parameter 'currency_code' is set
        if ('currency_code' not in params or
                params['currency_code'] is None):
            raise ValueError("Missing the required parameter `currency_code` when calling `get_currency_details_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_currency_details_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'currency_code' in params:
            path_params['currencyCode'] = params['currency_code']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/currency/{version}/{currencyCode}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfCurrencyDetailsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_match_using_get1(self, authorization, club_id, id, version, **kwargs):  # noqa: E501
        """getMatch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_match_using_get1(authorization, club_id, id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param int id: id (required)
        :param str version: version (required)
        :return: SingleWrapperOfMatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_match_using_get1_with_http_info(authorization, club_id, id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_match_using_get1_with_http_info(authorization, club_id, id, version, **kwargs)  # noqa: E501
            return data

    def get_match_using_get1_with_http_info(self, authorization, club_id, id, version, **kwargs):  # noqa: E501
        """getMatch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_match_using_get1_with_http_info(authorization, club_id, id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param int id: id (required)
        :param str version: version (required)
        :return: SingleWrapperOfMatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'club_id', 'id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_match_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_match_using_get1`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `get_match_using_get1`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_match_using_get1`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_match_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/match/{id}/{version}/get', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfMatchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_ranking_using_post(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """getMembersRanking  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_ranking_using_post(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClubMembersSearchRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: SingleWrapperOfClubMemberRankingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_ranking_using_post_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_ranking_using_post_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
            return data

    def get_members_ranking_using_post_with_http_info(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """getMembersRanking  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_ranking_using_post_with_http_info(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClubMembersSearchRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: SingleWrapperOfClubMemberRankingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'club_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_ranking_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_members_ranking_using_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_members_ranking_using_post`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `get_members_ranking_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_members_ranking_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/{version}/ranking', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfClubMemberRankingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invite_single_member_using_put(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """inviteSingleMember  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invite_single_member_using_put(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InviteRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: SingleWrapperOfstring
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invite_single_member_using_put_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.invite_single_member_using_put_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
            return data

    def invite_single_member_using_put_with_http_info(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """inviteSingleMember  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invite_single_member_using_put_with_http_info(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InviteRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: SingleWrapperOfstring
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'club_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invite_single_member_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `invite_single_member_using_put`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `invite_single_member_using_put`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `invite_single_member_using_put`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `invite_single_member_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/members/{version}/invite', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfstring',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_roles_using_post(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """removeRoles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_roles_using_post(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssignRoleRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_roles_using_post_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_roles_using_post_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
            return data

    def remove_roles_using_post_with_http_info(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """removeRoles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_roles_using_post_with_http_info(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssignRoleRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'club_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_roles_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `remove_roles_using_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `remove_roles_using_post`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `remove_roles_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `remove_roles_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/roles/{version}/remove', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_verified_club_match_csv_using_put(self, authorization, id, version, **kwargs):  # noqa: E501
        """saveVerifiedClubMatchCSV  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_verified_club_match_csv_using_put(authorization, id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int id: id (required)
        :param str version: version (required)
        :param str request:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_verified_club_match_csv_using_put_with_http_info(authorization, id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.save_verified_club_match_csv_using_put_with_http_info(authorization, id, version, **kwargs)  # noqa: E501
            return data

    def save_verified_club_match_csv_using_put_with_http_info(self, authorization, id, version, **kwargs):  # noqa: E501
        """saveVerifiedClubMatchCSV  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_verified_club_match_csv_using_put_with_http_info(authorization, id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int id: id (required)
        :param str version: version (required)
        :param str request:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'id', 'version', 'request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_verified_club_match_csv_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `save_verified_club_match_csv_using_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `save_verified_club_match_csv_using_put`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `save_verified_club_match_csv_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'request' in params:
            local_var_files['request'] = params['request']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{id}/match/verified/{version}/save/csv/add', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_approval_status_using_post(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """updateApprovalStatus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_approval_status_using_post(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StatusRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_approval_status_using_post_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.update_approval_status_using_post_with_http_info(body, authorization, club_id, version, **kwargs)  # noqa: E501
            return data

    def update_approval_status_using_post_with_http_info(self, body, authorization, club_id, version, **kwargs):  # noqa: E501
        """updateApprovalStatus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_approval_status_using_post_with_http_info(body, authorization, club_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StatusRequest body: request (required)
        :param str authorization: (required)
        :param int club_id: clubId (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'club_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_approval_status_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_approval_status_using_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_approval_status_using_post`")  # noqa: E501
        # verify the required parameter 'club_id' is set
        if ('club_id' not in params or
                params['club_id'] is None):
            raise ValueError("Missing the required parameter `club_id` when calling `update_approval_status_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `update_approval_status_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_id' in params:
            path_params['clubId'] = params['club_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/{version}/approval', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_club_using_post(self, body, authorization, version, **kwargs):  # noqa: E501
        """updateClub  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_club_using_post(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClubRequest body: request (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_club_using_post_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
        else:
            (data) = self.update_club_using_post_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
            return data

    def update_club_using_post_with_http_info(self, body, authorization, version, **kwargs):  # noqa: E501
        """updateClub  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_club_using_post_with_http_info(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClubRequest body: request (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_club_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_club_using_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_club_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `update_club_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{version}/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_staff_members_using_put(self, body, authorization, version, **kwargs):  # noqa: E501
        """updateStaffMembers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_staff_members_using_put(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StaffClubMemberRequest body: request (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_staff_members_using_put_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
        else:
            (data) = self.update_staff_members_using_put_with_http_info(body, authorization, version, **kwargs)  # noqa: E501
            return data

    def update_staff_members_using_put_with_http_info(self, body, authorization, version, **kwargs):  # noqa: E501
        """updateStaffMembers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_staff_members_using_put_with_http_info(body, authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StaffClubMemberRequest body: request (required)
        :param str authorization: (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_staff_members_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_staff_members_using_put`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_staff_members_using_put`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `update_staff_members_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/club/{clubId}/members/{version}/staff', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

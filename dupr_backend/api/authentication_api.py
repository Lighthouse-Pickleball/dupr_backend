# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dupr_backend.api_client import ApiClient


class AuthenticationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def device_registration_using_put(self, body, version, **kwargs):  # noqa: E501
        """deviceRegistration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_registration_using_put(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceRequest body: request (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_registration_using_put_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.device_registration_using_put_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def device_registration_using_put_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """deviceRegistration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_registration_using_put_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceRequest body: request (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_registration_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `device_registration_using_put`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `device_registration_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/{version}/device', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def email_already_exists_using_get(self, email, version, **kwargs):  # noqa: E501
        """emailAlreadyExists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.email_already_exists_using_get(email, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: email (required)
        :param str version: version (required)
        :return: SingleWrapperOfboolean
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.email_already_exists_using_get_with_http_info(email, version, **kwargs)  # noqa: E501
        else:
            (data) = self.email_already_exists_using_get_with_http_info(email, version, **kwargs)  # noqa: E501
            return data

    def email_already_exists_using_get_with_http_info(self, email, version, **kwargs):  # noqa: E501
        """emailAlreadyExists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.email_already_exists_using_get_with_http_info(email, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: email (required)
        :param str version: version (required)
        :return: SingleWrapperOfboolean
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_already_exists_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `email_already_exists_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `email_already_exists_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/email/{version}/exists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfboolean',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def email_exists_using_post(self, body, version, **kwargs):  # noqa: E501
        """emailExists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.email_exists_using_post(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmailExistRequest body: emailExistRequest (required)
        :param str version: version (required)
        :return: SingleWrapperOfboolean
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.email_exists_using_post_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.email_exists_using_post_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def email_exists_using_post_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """emailExists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.email_exists_using_post_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmailExistRequest body: emailExistRequest (required)
        :param str version: version (required)
        :return: SingleWrapperOfboolean
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_exists_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `email_exists_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `email_exists_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/email/{version}/exists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfboolean',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def initiate_reset_password_using_get(self, email, version, **kwargs):  # noqa: E501
        """initiateResetPassword  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.initiate_reset_password_using_get(email, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: email (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.initiate_reset_password_using_get_with_http_info(email, version, **kwargs)  # noqa: E501
        else:
            (data) = self.initiate_reset_password_using_get_with_http_info(email, version, **kwargs)  # noqa: E501
            return data

    def initiate_reset_password_using_get_with_http_info(self, email, version, **kwargs):  # noqa: E501
        """initiateResetPassword  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.initiate_reset_password_using_get_with_http_info(email, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: email (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method initiate_reset_password_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `initiate_reset_password_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `initiate_reset_password_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/password/{version}/initiate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def login_read_only_token_using_post(self, body, x_authorization, version, **kwargs):  # noqa: E501
        """loginReadOnlyToken  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_read_only_token_using_post(body, x_authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoginRequest body: request (required)
        :param str x_authorization: x-authorization (required)
        :param str version: version (required)
        :param str x_forwarded_for: x-forwarded-for
        :return: SingleWrapperOfobject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.login_read_only_token_using_post_with_http_info(body, x_authorization, version, **kwargs)  # noqa: E501
        else:
            (data) = self.login_read_only_token_using_post_with_http_info(body, x_authorization, version, **kwargs)  # noqa: E501
            return data

    def login_read_only_token_using_post_with_http_info(self, body, x_authorization, version, **kwargs):  # noqa: E501
        """loginReadOnlyToken  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_read_only_token_using_post_with_http_info(body, x_authorization, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoginRequest body: request (required)
        :param str x_authorization: x-authorization (required)
        :param str version: version (required)
        :param str x_forwarded_for: x-forwarded-for
        :return: SingleWrapperOfobject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_authorization', 'version', 'x_forwarded_for']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login_read_only_token_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `login_read_only_token_using_post`")  # noqa: E501
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `login_read_only_token_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `login_read_only_token_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501
        if 'x_forwarded_for' in params:
            header_params['x-forwarded-for'] = params['x_forwarded_for']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/{version}/login-read-only-token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfobject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def login_read_only_token_with_full_access_token_using_post(self, version, x_authorization, **kwargs):  # noqa: E501
        """loginReadOnlyTokenWithFullAccessToken  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_read_only_token_with_full_access_token_using_post(version, x_authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: version (required)
        :param str x_authorization: x-authorization (required)
        :param str x_forwarded_for: x-forwarded-for
        :return: SingleWrapperOfobject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.login_read_only_token_with_full_access_token_using_post_with_http_info(version, x_authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.login_read_only_token_with_full_access_token_using_post_with_http_info(version, x_authorization, **kwargs)  # noqa: E501
            return data

    def login_read_only_token_with_full_access_token_using_post_with_http_info(self, version, x_authorization, **kwargs):  # noqa: E501
        """loginReadOnlyTokenWithFullAccessToken  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_read_only_token_with_full_access_token_using_post_with_http_info(version, x_authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: version (required)
        :param str x_authorization: x-authorization (required)
        :param str x_forwarded_for: x-forwarded-for
        :return: SingleWrapperOfobject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'x_authorization', 'x_forwarded_for']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login_read_only_token_with_full_access_token_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `login_read_only_token_with_full_access_token_using_post`")  # noqa: E501
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `login_read_only_token_with_full_access_token_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501
        if 'x_forwarded_for' in params:
            header_params['x-forwarded-for'] = params['x_forwarded_for']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/{version}/login-read-only-token-with-session', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfobject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def login_using_post(self, body, version, **kwargs):  # noqa: E501
        """login  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_using_post(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoginRequest body: request (required)
        :param str version: version (required)
        :param str x_forwarded_for: x-forwarded-for
        :return: SingleWrapperOfAuthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.login_using_post_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.login_using_post_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def login_using_post_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """login  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_using_post_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoginRequest body: request (required)
        :param str version: version (required)
        :param str x_forwarded_for: x-forwarded-for
        :return: SingleWrapperOfAuthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version', 'x_forwarded_for']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `login_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `login_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_forwarded_for' in params:
            header_params['x-forwarded-for'] = params['x_forwarded_for']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/{version}/login', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfAuthResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def panel_login_using_post(self, body, version, **kwargs):  # noqa: E501
        """panelLogin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.panel_login_using_post(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoginRequest body: request (required)
        :param str version: version (required)
        :param str x_forwarded_for: x-forwarded-for
        :return: SingleWrapperOfAuthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.panel_login_using_post_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.panel_login_using_post_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def panel_login_using_post_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """panelLogin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.panel_login_using_post_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoginRequest body: request (required)
        :param str version: version (required)
        :param str x_forwarded_for: x-forwarded-for
        :return: SingleWrapperOfAuthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version', 'x_forwarded_for']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method panel_login_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `panel_login_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `panel_login_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_forwarded_for' in params:
            header_params['x-forwarded-for'] = params['x_forwarded_for']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/panel/{version}/login', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfAuthResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def refresh_access_token_using_get(self, version, x_refresh_token, **kwargs):  # noqa: E501
        """refreshAccessToken  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refresh_access_token_using_get(version, x_refresh_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: version (required)
        :param str x_refresh_token: x-refresh-token (required)
        :return: SingleWrapperOfstring
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.refresh_access_token_using_get_with_http_info(version, x_refresh_token, **kwargs)  # noqa: E501
        else:
            (data) = self.refresh_access_token_using_get_with_http_info(version, x_refresh_token, **kwargs)  # noqa: E501
            return data

    def refresh_access_token_using_get_with_http_info(self, version, x_refresh_token, **kwargs):  # noqa: E501
        """refreshAccessToken  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refresh_access_token_using_get_with_http_info(version, x_refresh_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: version (required)
        :param str x_refresh_token: x-refresh-token (required)
        :return: SingleWrapperOfstring
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'x_refresh_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refresh_access_token_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `refresh_access_token_using_get`")  # noqa: E501
        # verify the required parameter 'x_refresh_token' is set
        if ('x_refresh_token' not in params or
                params['x_refresh_token'] is None):
            raise ValueError("Missing the required parameter `x_refresh_token` when calling `refresh_access_token_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_refresh_token' in params:
            header_params['x-refresh-token'] = params['x_refresh_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/{version}/refresh', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfstring',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_using_post(self, body, version, **kwargs):  # noqa: E501
        """register  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_using_post(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlayerSignUpRequest body: request (required)
        :param str version: version (required)
        :param str x_forwarded_for: x-forwarded-for
        :return: SingleWrapperOfAuthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_using_post_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.register_using_post_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def register_using_post_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """register  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_using_post_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlayerSignUpRequest body: request (required)
        :param str version: version (required)
        :param str x_forwarded_for: x-forwarded-for
        :return: SingleWrapperOfAuthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version', 'x_forwarded_for']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `register_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `register_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_forwarded_for' in params:
            header_params['x-forwarded-for'] = params['x_forwarded_for']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/{version}/signup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfAuthResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_password_using_get(self, code, email, version, x_password, **kwargs):  # noqa: E501
        """resetPassword  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_password_using_get(code, email, version, x_password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: code (required)
        :param str email: email (required)
        :param str version: version (required)
        :param str x_password: x-password (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_password_using_get_with_http_info(code, email, version, x_password, **kwargs)  # noqa: E501
        else:
            (data) = self.reset_password_using_get_with_http_info(code, email, version, x_password, **kwargs)  # noqa: E501
            return data

    def reset_password_using_get_with_http_info(self, code, email, version, x_password, **kwargs):  # noqa: E501
        """resetPassword  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_password_using_get_with_http_info(code, email, version, x_password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: code (required)
        :param str email: email (required)
        :param str version: version (required)
        :param str x_password: x-password (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code', 'email', 'version', 'x_password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_password_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `reset_password_using_get`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `reset_password_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `reset_password_using_get`")  # noqa: E501
        # verify the required parameter 'x_password' is set
        if ('x_password' not in params or
                params['x_password'] is None):
            raise ValueError("Missing the required parameter `x_password` when calling `reset_password_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'code' in params:
            query_params.append(('code', params['code']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501

        header_params = {}
        if 'x_password' in params:
            header_params['x-password'] = params['x_password']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/password/{version}/reset', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_verification_email_using_get(self, email, version, **kwargs):  # noqa: E501
        """sendVerificationEmail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_verification_email_using_get(email, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: email (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_verification_email_using_get_with_http_info(email, version, **kwargs)  # noqa: E501
        else:
            (data) = self.send_verification_email_using_get_with_http_info(email, version, **kwargs)  # noqa: E501
            return data

    def send_verification_email_using_get_with_http_info(self, email, version, **kwargs):  # noqa: E501
        """sendVerificationEmail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_verification_email_using_get_with_http_info(email, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: email (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_verification_email_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `send_verification_email_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `send_verification_email_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/email/{version}/resend', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def validate_ambassador_code_using_get(self, code, version, **kwargs):  # noqa: E501
        """validateAmbassadorCode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_ambassador_code_using_get(code, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: code (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.validate_ambassador_code_using_get_with_http_info(code, version, **kwargs)  # noqa: E501
        else:
            (data) = self.validate_ambassador_code_using_get_with_http_info(code, version, **kwargs)  # noqa: E501
            return data

    def validate_ambassador_code_using_get_with_http_info(self, code, version, **kwargs):  # noqa: E501
        """validateAmbassadorCode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_ambassador_code_using_get_with_http_info(code, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: code (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_ambassador_code_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `validate_ambassador_code_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `validate_ambassador_code_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'code' in params:
            query_params.append(('code', params['code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/{version}/validate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verify_email_address_using_get(self, code, email, version, **kwargs):  # noqa: E501
        """verifyEmailAddress  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_email_address_using_get(code, email, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: code (required)
        :param str email: email (required)
        :param str version: version (required)
        :return: SingleWrapperOfboolean
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.verify_email_address_using_get_with_http_info(code, email, version, **kwargs)  # noqa: E501
        else:
            (data) = self.verify_email_address_using_get_with_http_info(code, email, version, **kwargs)  # noqa: E501
            return data

    def verify_email_address_using_get_with_http_info(self, code, email, version, **kwargs):  # noqa: E501
        """verifyEmailAddress  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_email_address_using_get_with_http_info(code, email, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: code (required)
        :param str email: email (required)
        :param str version: version (required)
        :return: SingleWrapperOfboolean
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code', 'email', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verify_email_address_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `verify_email_address_using_get`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `verify_email_address_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `verify_email_address_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'code' in params:
            query_params.append(('code', params['code']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/email/{version}/verify', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfboolean',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verify_user_email_using_post(self, body, version, **kwargs):  # noqa: E501
        """verifyUserEmail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_user_email_using_post(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VerifyTokenRequest body: verifyTokenRequest (required)
        :param str version: version (required)
        :return: SingleWrapperOfUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.verify_user_email_using_post_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.verify_user_email_using_post_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def verify_user_email_using_post_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """verifyUserEmail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_user_email_using_post_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VerifyTokenRequest body: verifyTokenRequest (required)
        :param str version: version (required)
        :return: SingleWrapperOfUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verify_user_email_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `verify_user_email_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `verify_user_email_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/email/{version}/verify', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfUserResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

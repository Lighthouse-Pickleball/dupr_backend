# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr

from typing import Optional

from dupr_backend.models.array_wrapper_of_activity_user import ArrayWrapperOfActivityUser
from dupr_backend.models.array_wrapper_of_post_reaction_response import ArrayWrapperOfPostReactionResponse
from dupr_backend.models.array_wrapper_of_post_response import ArrayWrapperOfPostResponse
from dupr_backend.models.array_wrapper_of_reaction import ArrayWrapperOfReaction
from dupr_backend.models.post_request import PostRequest
from dupr_backend.models.react_delete_request import ReactDeleteRequest
from dupr_backend.models.react_request import ReactRequest
from dupr_backend.models.single_wrapper_of_following_info import SingleWrapperOfFollowingInfo
from dupr_backend.models.single_wrapper_of_page_of_user_suggestion import SingleWrapperOfPageOfUserSuggestion
from dupr_backend.models.single_wrapper_of_post_response import SingleWrapperOfPostResponse
from dupr_backend.models.single_wrapper_of_reaction import SingleWrapperOfReaction
from dupr_backend.models.single_wrapper_of_unit import SingleWrapperOfUnit
from dupr_backend.models.wrapper import Wrapper

from dupr_backend.api_client import ApiClient
from dupr_backend.api_response import ApiResponse
from dupr_backend.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ActivityNewsfeedsForUserApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def comments_using_get1(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], post_id : Annotated[StrictStr, Field(..., description="The post Id")], version : Annotated[StrictStr, Field(..., description="version")], limit : Annotated[Optional[StrictInt], Field(description="limit")] = None, ref : Annotated[Optional[StrictStr], Field(description="ref")] = None, **kwargs) -> ArrayWrapperOfPostReactionResponse:  # noqa: E501
        """comments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.comments_using_get1(authorization, feed_id, post_id, version, limit, ref, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param post_id: The post Id (required)
        :type post_id: str
        :param version: version (required)
        :type version: str
        :param limit: limit
        :type limit: int
        :param ref: ref
        :type ref: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArrayWrapperOfPostReactionResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the comments_using_get1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.comments_using_get1_with_http_info(authorization, feed_id, post_id, version, limit, ref, **kwargs)  # noqa: E501

    @validate_arguments
    def comments_using_get1_with_http_info(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], post_id : Annotated[StrictStr, Field(..., description="The post Id")], version : Annotated[StrictStr, Field(..., description="version")], limit : Annotated[Optional[StrictInt], Field(description="limit")] = None, ref : Annotated[Optional[StrictStr], Field(description="ref")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """comments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.comments_using_get1_with_http_info(authorization, feed_id, post_id, version, limit, ref, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param post_id: The post Id (required)
        :type post_id: str
        :param version: version (required)
        :type version: str
        :param limit: limit
        :type limit: int
        :param ref: ref
        :type ref: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArrayWrapperOfPostReactionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'feed_id',
            'post_id',
            'version',
            'limit',
            'ref'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method comments_using_get1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['feed_id']:
            _path_params['feedId'] = _params['feed_id']

        if _params['post_id']:
            _path_params['postId'] = _params['post_id']

        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('ref') is not None:  # noqa: E501
            _query_params.append(('ref', _params['ref']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "ArrayWrapperOfPostReactionResponse",
            '403': None,
        }

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/{postId}/comments', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_post_using_post2(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], version : Annotated[StrictStr, Field(..., description="version")], request : Annotated[PostRequest, Field(..., description="request")], **kwargs) -> SingleWrapperOfPostResponse:  # noqa: E501
        """createPost  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_post_using_post2(authorization, feed_id, version, request, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param version: version (required)
        :type version: str
        :param request: request (required)
        :type request: PostRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SingleWrapperOfPostResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_post_using_post2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_post_using_post2_with_http_info(authorization, feed_id, version, request, **kwargs)  # noqa: E501

    @validate_arguments
    def create_post_using_post2_with_http_info(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], version : Annotated[StrictStr, Field(..., description="version")], request : Annotated[PostRequest, Field(..., description="request")], **kwargs) -> ApiResponse:  # noqa: E501
        """createPost  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_post_using_post2_with_http_info(authorization, feed_id, version, request, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param version: version (required)
        :type version: str
        :param request: request (required)
        :type request: PostRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SingleWrapperOfPostResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'feed_id',
            'version',
            'request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_post_using_post2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['feed_id']:
            _path_params['feedId'] = _params['feed_id']

        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request'] is not None:
            _body_params = _params['request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SingleWrapperOfPostResponse",
            '403': None,
        }

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_comment_using_delete1(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], post_id : Annotated[StrictStr, Field(..., description="The post Id")], version : Annotated[StrictStr, Field(..., description="version")], react : Annotated[ReactDeleteRequest, Field(..., description="The react Id")], **kwargs) -> SingleWrapperOfUnit:  # noqa: E501
        """deleteComment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_comment_using_delete1(authorization, feed_id, post_id, version, react, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param post_id: The post Id (required)
        :type post_id: str
        :param version: version (required)
        :type version: str
        :param react: The react Id (required)
        :type react: ReactDeleteRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SingleWrapperOfUnit
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the delete_comment_using_delete1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.delete_comment_using_delete1_with_http_info(authorization, feed_id, post_id, version, react, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_comment_using_delete1_with_http_info(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], post_id : Annotated[StrictStr, Field(..., description="The post Id")], version : Annotated[StrictStr, Field(..., description="version")], react : Annotated[ReactDeleteRequest, Field(..., description="The react Id")], **kwargs) -> ApiResponse:  # noqa: E501
        """deleteComment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_comment_using_delete1_with_http_info(authorization, feed_id, post_id, version, react, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param post_id: The post Id (required)
        :type post_id: str
        :param version: version (required)
        :type version: str
        :param react: The react Id (required)
        :type react: ReactDeleteRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SingleWrapperOfUnit, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'feed_id',
            'post_id',
            'version',
            'react'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_comment_using_delete1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['feed_id']:
            _path_params['feedId'] = _params['feed_id']

        if _params['post_id']:
            _path_params['postId'] = _params['post_id']

        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['react'] is not None:
            _body_params = _params['react']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SingleWrapperOfUnit",
            '403': None,
        }

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/{postId}/react', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def edit_post_using_put1(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], post_id : Annotated[StrictStr, Field(..., description="The post Id")], version : Annotated[StrictStr, Field(..., description="version")], post_request : Annotated[PostRequest, Field(..., description="postRequest")], **kwargs) -> SingleWrapperOfPostResponse:  # noqa: E501
        """editPost  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.edit_post_using_put1(authorization, feed_id, post_id, version, post_request, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param post_id: The post Id (required)
        :type post_id: str
        :param version: version (required)
        :type version: str
        :param post_request: postRequest (required)
        :type post_request: PostRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SingleWrapperOfPostResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the edit_post_using_put1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.edit_post_using_put1_with_http_info(authorization, feed_id, post_id, version, post_request, **kwargs)  # noqa: E501

    @validate_arguments
    def edit_post_using_put1_with_http_info(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], post_id : Annotated[StrictStr, Field(..., description="The post Id")], version : Annotated[StrictStr, Field(..., description="version")], post_request : Annotated[PostRequest, Field(..., description="postRequest")], **kwargs) -> ApiResponse:  # noqa: E501
        """editPost  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.edit_post_using_put1_with_http_info(authorization, feed_id, post_id, version, post_request, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param post_id: The post Id (required)
        :type post_id: str
        :param version: version (required)
        :type version: str
        :param post_request: postRequest (required)
        :type post_request: PostRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SingleWrapperOfPostResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'feed_id',
            'post_id',
            'version',
            'post_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_post_using_put1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['feed_id']:
            _path_params['feedId'] = _params['feed_id']

        if _params['post_id']:
            _path_params['postId'] = _params['post_id']

        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['post_request'] is not None:
            _body_params = _params['post_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SingleWrapperOfPostResponse",
            '403': None,
        }

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/{postId}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def fetch_feeds_using_get2(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], version : Annotated[StrictStr, Field(..., description="version")], limit : Annotated[Optional[StrictInt], Field(description="limit")] = None, ref : Annotated[Optional[StrictStr], Field(description="ref")] = None, **kwargs) -> ArrayWrapperOfPostResponse:  # noqa: E501
        """fetchFeeds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_feeds_using_get2(authorization, feed_id, version, limit, ref, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param version: version (required)
        :type version: str
        :param limit: limit
        :type limit: int
        :param ref: ref
        :type ref: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArrayWrapperOfPostResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the fetch_feeds_using_get2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.fetch_feeds_using_get2_with_http_info(authorization, feed_id, version, limit, ref, **kwargs)  # noqa: E501

    @validate_arguments
    def fetch_feeds_using_get2_with_http_info(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], version : Annotated[StrictStr, Field(..., description="version")], limit : Annotated[Optional[StrictInt], Field(description="limit")] = None, ref : Annotated[Optional[StrictStr], Field(description="ref")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """fetchFeeds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_feeds_using_get2_with_http_info(authorization, feed_id, version, limit, ref, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param version: version (required)
        :type version: str
        :param limit: limit
        :type limit: int
        :param ref: ref
        :type ref: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArrayWrapperOfPostResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'feed_id',
            'version',
            'limit',
            'ref'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_feeds_using_get2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['feed_id']:
            _path_params['feedId'] = _params['feed_id']

        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('ref') is not None:  # noqa: E501
            _query_params.append(('ref', _params['ref']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "ArrayWrapperOfPostResponse",
            '403': None,
        }

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def follow_using_post2(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], version : Annotated[StrictStr, Field(..., description="version")], **kwargs) -> Wrapper:  # noqa: E501
        """follow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.follow_using_post2(authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param version: version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Wrapper
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the follow_using_post2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.follow_using_post2_with_http_info(authorization, feed_id, version, **kwargs)  # noqa: E501

    @validate_arguments
    def follow_using_post2_with_http_info(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], version : Annotated[StrictStr, Field(..., description="version")], **kwargs) -> ApiResponse:  # noqa: E501
        """follow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.follow_using_post2_with_http_info(authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param version: version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Wrapper, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'feed_id',
            'version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method follow_using_post2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['feed_id']:
            _path_params['feedId'] = _params['feed_id']

        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Wrapper",
            '403': None,
        }

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/follow', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_following_info_using_get(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], version : Annotated[StrictStr, Field(..., description="version")], **kwargs) -> SingleWrapperOfFollowingInfo:  # noqa: E501
        """getFollowingInfo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_following_info_using_get(authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param version: version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SingleWrapperOfFollowingInfo
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_following_info_using_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_following_info_using_get_with_http_info(authorization, feed_id, version, **kwargs)  # noqa: E501

    @validate_arguments
    def get_following_info_using_get_with_http_info(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], version : Annotated[StrictStr, Field(..., description="version")], **kwargs) -> ApiResponse:  # noqa: E501
        """getFollowingInfo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_following_info_using_get_with_http_info(authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param version: version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SingleWrapperOfFollowingInfo, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'feed_id',
            'version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_following_info_using_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['feed_id']:
            _path_params['feedId'] = _params['feed_id']

        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SingleWrapperOfFollowingInfo",
            '403': None,
        }

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/followingInfo', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_list_followers_using_get(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], version : Annotated[StrictStr, Field(..., description="version")], limit : Annotated[Optional[StrictInt], Field(description="limit")] = None, offset : Annotated[Optional[StrictInt], Field(description="offset")] = None, **kwargs) -> ArrayWrapperOfActivityUser:  # noqa: E501
        """getListFollowers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_list_followers_using_get(authorization, feed_id, version, limit, offset, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param version: version (required)
        :type version: str
        :param limit: limit
        :type limit: int
        :param offset: offset
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArrayWrapperOfActivityUser
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_list_followers_using_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_list_followers_using_get_with_http_info(authorization, feed_id, version, limit, offset, **kwargs)  # noqa: E501

    @validate_arguments
    def get_list_followers_using_get_with_http_info(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], version : Annotated[StrictStr, Field(..., description="version")], limit : Annotated[Optional[StrictInt], Field(description="limit")] = None, offset : Annotated[Optional[StrictInt], Field(description="offset")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """getListFollowers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_list_followers_using_get_with_http_info(authorization, feed_id, version, limit, offset, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param version: version (required)
        :type version: str
        :param limit: limit
        :type limit: int
        :param offset: offset
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArrayWrapperOfActivityUser, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'feed_id',
            'version',
            'limit',
            'offset'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_followers_using_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['feed_id']:
            _path_params['feedId'] = _params['feed_id']

        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "ArrayWrapperOfActivityUser",
            '403': None,
        }

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/followers', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_list_followings_using_get(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], version : Annotated[StrictStr, Field(..., description="version")], limit : Annotated[Optional[StrictInt], Field(description="limit")] = None, offset : Annotated[Optional[StrictInt], Field(description="offset")] = None, **kwargs) -> ArrayWrapperOfActivityUser:  # noqa: E501
        """getListFollowings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_list_followings_using_get(authorization, feed_id, version, limit, offset, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param version: version (required)
        :type version: str
        :param limit: limit
        :type limit: int
        :param offset: offset
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArrayWrapperOfActivityUser
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_list_followings_using_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_list_followings_using_get_with_http_info(authorization, feed_id, version, limit, offset, **kwargs)  # noqa: E501

    @validate_arguments
    def get_list_followings_using_get_with_http_info(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], version : Annotated[StrictStr, Field(..., description="version")], limit : Annotated[Optional[StrictInt], Field(description="limit")] = None, offset : Annotated[Optional[StrictInt], Field(description="offset")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """getListFollowings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_list_followings_using_get_with_http_info(authorization, feed_id, version, limit, offset, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param version: version (required)
        :type version: str
        :param limit: limit
        :type limit: int
        :param offset: offset
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArrayWrapperOfActivityUser, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'feed_id',
            'version',
            'limit',
            'offset'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_followings_using_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['feed_id']:
            _path_params['feedId'] = _params['feed_id']

        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "ArrayWrapperOfActivityUser",
            '403': None,
        }

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/followings', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_post_detail_using_get1(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], post_id : Annotated[StrictStr, Field(..., description="The post Id")], version : Annotated[StrictStr, Field(..., description="version")], **kwargs) -> SingleWrapperOfPostResponse:  # noqa: E501
        """getPostDetail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_post_detail_using_get1(authorization, feed_id, post_id, version, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param post_id: The post Id (required)
        :type post_id: str
        :param version: version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SingleWrapperOfPostResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_post_detail_using_get1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_post_detail_using_get1_with_http_info(authorization, feed_id, post_id, version, **kwargs)  # noqa: E501

    @validate_arguments
    def get_post_detail_using_get1_with_http_info(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], post_id : Annotated[StrictStr, Field(..., description="The post Id")], version : Annotated[StrictStr, Field(..., description="version")], **kwargs) -> ApiResponse:  # noqa: E501
        """getPostDetail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_post_detail_using_get1_with_http_info(authorization, feed_id, post_id, version, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param post_id: The post Id (required)
        :type post_id: str
        :param version: version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SingleWrapperOfPostResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'feed_id',
            'post_id',
            'version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_post_detail_using_get1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['feed_id']:
            _path_params['feedId'] = _params['feed_id']

        if _params['post_id']:
            _path_params['postId'] = _params['post_id']

        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SingleWrapperOfPostResponse",
            '403': None,
        }

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/{postId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_user_suggestion_using_get1(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], version : Annotated[StrictStr, Field(..., description="version")], limit : Annotated[Optional[StrictInt], Field(description="limit")] = None, offset : Annotated[Optional[StrictInt], Field(description="offset")] = None, **kwargs) -> SingleWrapperOfPageOfUserSuggestion:  # noqa: E501
        """getUserSuggestion  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_user_suggestion_using_get1(authorization, feed_id, version, limit, offset, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param version: version (required)
        :type version: str
        :param limit: limit
        :type limit: int
        :param offset: offset
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SingleWrapperOfPageOfUserSuggestion
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_user_suggestion_using_get1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_user_suggestion_using_get1_with_http_info(authorization, feed_id, version, limit, offset, **kwargs)  # noqa: E501

    @validate_arguments
    def get_user_suggestion_using_get1_with_http_info(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], version : Annotated[StrictStr, Field(..., description="version")], limit : Annotated[Optional[StrictInt], Field(description="limit")] = None, offset : Annotated[Optional[StrictInt], Field(description="offset")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """getUserSuggestion  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_user_suggestion_using_get1_with_http_info(authorization, feed_id, version, limit, offset, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param version: version (required)
        :type version: str
        :param limit: limit
        :type limit: int
        :param offset: offset
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SingleWrapperOfPageOfUserSuggestion, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'feed_id',
            'version',
            'limit',
            'offset'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_suggestion_using_get1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['feed_id']:
            _path_params['feedId'] = _params['feed_id']

        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SingleWrapperOfPageOfUserSuggestion",
            '403': None,
        }

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/user-suggestion', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def react_using_post2(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], post_id : Annotated[StrictStr, Field(..., description="The post Id")], version : Annotated[StrictStr, Field(..., description="version")], request : Annotated[ReactRequest, Field(..., description="request")], **kwargs) -> SingleWrapperOfReaction:  # noqa: E501
        """react  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.react_using_post2(authorization, feed_id, post_id, version, request, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param post_id: The post Id (required)
        :type post_id: str
        :param version: version (required)
        :type version: str
        :param request: request (required)
        :type request: ReactRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SingleWrapperOfReaction
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the react_using_post2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.react_using_post2_with_http_info(authorization, feed_id, post_id, version, request, **kwargs)  # noqa: E501

    @validate_arguments
    def react_using_post2_with_http_info(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], post_id : Annotated[StrictStr, Field(..., description="The post Id")], version : Annotated[StrictStr, Field(..., description="version")], request : Annotated[ReactRequest, Field(..., description="request")], **kwargs) -> ApiResponse:  # noqa: E501
        """react  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.react_using_post2_with_http_info(authorization, feed_id, post_id, version, request, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param post_id: The post Id (required)
        :type post_id: str
        :param version: version (required)
        :type version: str
        :param request: request (required)
        :type request: ReactRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SingleWrapperOfReaction, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'feed_id',
            'post_id',
            'version',
            'request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method react_using_post2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['feed_id']:
            _path_params['feedId'] = _params['feed_id']

        if _params['post_id']:
            _path_params['postId'] = _params['post_id']

        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request'] is not None:
            _body_params = _params['request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SingleWrapperOfReaction",
            '403': None,
        }

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/{postId}/react', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def reactions_using_get1(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], post_id : Annotated[StrictStr, Field(..., description="The post Id")], version : Annotated[StrictStr, Field(..., description="version")], limit : Annotated[Optional[StrictInt], Field(description="limit")] = None, ref : Annotated[Optional[StrictStr], Field(description="ref")] = None, **kwargs) -> ArrayWrapperOfReaction:  # noqa: E501
        """reactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.reactions_using_get1(authorization, feed_id, post_id, version, limit, ref, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param post_id: The post Id (required)
        :type post_id: str
        :param version: version (required)
        :type version: str
        :param limit: limit
        :type limit: int
        :param ref: ref
        :type ref: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArrayWrapperOfReaction
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the reactions_using_get1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.reactions_using_get1_with_http_info(authorization, feed_id, post_id, version, limit, ref, **kwargs)  # noqa: E501

    @validate_arguments
    def reactions_using_get1_with_http_info(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], post_id : Annotated[StrictStr, Field(..., description="The post Id")], version : Annotated[StrictStr, Field(..., description="version")], limit : Annotated[Optional[StrictInt], Field(description="limit")] = None, ref : Annotated[Optional[StrictStr], Field(description="ref")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """reactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.reactions_using_get1_with_http_info(authorization, feed_id, post_id, version, limit, ref, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param post_id: The post Id (required)
        :type post_id: str
        :param version: version (required)
        :type version: str
        :param limit: limit
        :type limit: int
        :param ref: ref
        :type ref: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArrayWrapperOfReaction, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'feed_id',
            'post_id',
            'version',
            'limit',
            'ref'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reactions_using_get1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['feed_id']:
            _path_params['feedId'] = _params['feed_id']

        if _params['post_id']:
            _path_params['postId'] = _params['post_id']

        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('ref') is not None:  # noqa: E501
            _query_params.append(('ref', _params['ref']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "ArrayWrapperOfReaction",
            '403': None,
        }

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/{postId}/reactions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def remove_post_using_delete1(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], post_id : Annotated[StrictStr, Field(..., description="The post Id")], version : Annotated[StrictStr, Field(..., description="version")], **kwargs) -> SingleWrapperOfUnit:  # noqa: E501
        """removePost  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_post_using_delete1(authorization, feed_id, post_id, version, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param post_id: The post Id (required)
        :type post_id: str
        :param version: version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SingleWrapperOfUnit
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the remove_post_using_delete1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.remove_post_using_delete1_with_http_info(authorization, feed_id, post_id, version, **kwargs)  # noqa: E501

    @validate_arguments
    def remove_post_using_delete1_with_http_info(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], post_id : Annotated[StrictStr, Field(..., description="The post Id")], version : Annotated[StrictStr, Field(..., description="version")], **kwargs) -> ApiResponse:  # noqa: E501
        """removePost  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_post_using_delete1_with_http_info(authorization, feed_id, post_id, version, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param post_id: The post Id (required)
        :type post_id: str
        :param version: version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SingleWrapperOfUnit, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'feed_id',
            'post_id',
            'version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_post_using_delete1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['feed_id']:
            _path_params['feedId'] = _params['feed_id']

        if _params['post_id']:
            _path_params['postId'] = _params['post_id']

        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SingleWrapperOfUnit",
            '403': None,
        }

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/{postId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def timeline_using_get(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], version : Annotated[StrictStr, Field(..., description="version")], limit : Annotated[Optional[StrictInt], Field(description="limit")] = None, ref : Annotated[Optional[StrictStr], Field(description="ref")] = None, **kwargs) -> ArrayWrapperOfPostResponse:  # noqa: E501
        """timeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.timeline_using_get(authorization, feed_id, version, limit, ref, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param version: version (required)
        :type version: str
        :param limit: limit
        :type limit: int
        :param ref: ref
        :type ref: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArrayWrapperOfPostResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the timeline_using_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.timeline_using_get_with_http_info(authorization, feed_id, version, limit, ref, **kwargs)  # noqa: E501

    @validate_arguments
    def timeline_using_get_with_http_info(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], version : Annotated[StrictStr, Field(..., description="version")], limit : Annotated[Optional[StrictInt], Field(description="limit")] = None, ref : Annotated[Optional[StrictStr], Field(description="ref")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """timeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.timeline_using_get_with_http_info(authorization, feed_id, version, limit, ref, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param version: version (required)
        :type version: str
        :param limit: limit
        :type limit: int
        :param ref: ref
        :type ref: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArrayWrapperOfPostResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'feed_id',
            'version',
            'limit',
            'ref'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method timeline_using_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['feed_id']:
            _path_params['feedId'] = _params['feed_id']

        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('ref') is not None:  # noqa: E501
            _query_params.append(('ref', _params['ref']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "ArrayWrapperOfPostResponse",
            '403': None,
        }

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/timeline', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def unfollow_using_delete2(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], version : Annotated[StrictStr, Field(..., description="version")], **kwargs) -> Wrapper:  # noqa: E501
        """unfollow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unfollow_using_delete2(authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param version: version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Wrapper
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the unfollow_using_delete2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.unfollow_using_delete2_with_http_info(authorization, feed_id, version, **kwargs)  # noqa: E501

    @validate_arguments
    def unfollow_using_delete2_with_http_info(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], version : Annotated[StrictStr, Field(..., description="version")], **kwargs) -> ApiResponse:  # noqa: E501
        """unfollow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unfollow_using_delete2_with_http_info(authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param version: version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Wrapper, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'feed_id',
            'version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unfollow_using_delete2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['feed_id']:
            _path_params['feedId'] = _params['feed_id']

        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Wrapper",
            '403': None,
        }

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/follow', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_comment_using_put1(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], post_id : Annotated[StrictStr, Field(..., description="The post Id")], version : Annotated[StrictStr, Field(..., description="version")], request : Annotated[ReactRequest, Field(..., description="request")], **kwargs) -> Wrapper:  # noqa: E501
        """updateComment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_comment_using_put1(authorization, feed_id, post_id, version, request, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param post_id: The post Id (required)
        :type post_id: str
        :param version: version (required)
        :type version: str
        :param request: request (required)
        :type request: ReactRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Wrapper
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the update_comment_using_put1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.update_comment_using_put1_with_http_info(authorization, feed_id, post_id, version, request, **kwargs)  # noqa: E501

    @validate_arguments
    def update_comment_using_put1_with_http_info(self, authorization : StrictStr, feed_id : Annotated[StrictInt, Field(..., description="The user's feed Id")], post_id : Annotated[StrictStr, Field(..., description="The post Id")], version : Annotated[StrictStr, Field(..., description="version")], request : Annotated[ReactRequest, Field(..., description="request")], **kwargs) -> ApiResponse:  # noqa: E501
        """updateComment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_comment_using_put1_with_http_info(authorization, feed_id, post_id, version, request, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param feed_id: The user's feed Id (required)
        :type feed_id: int
        :param post_id: The post Id (required)
        :type post_id: str
        :param version: version (required)
        :type version: str
        :param request: request (required)
        :type request: ReactRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Wrapper, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'feed_id',
            'post_id',
            'version',
            'request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_comment_using_put1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['feed_id']:
            _path_params['feedId'] = _params['feed_id']

        if _params['post_id']:
            _path_params['postId'] = _params['post_id']

        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request'] is not None:
            _body_params = _params['request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Wrapper",
            '403': None,
        }

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/{postId}/react', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

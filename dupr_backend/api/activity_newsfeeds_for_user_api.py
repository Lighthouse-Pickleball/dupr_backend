# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dupr_backend.api_client import ApiClient


class ActivityNewsfeedsForUserApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def comments_using_get1(self, authorization, feed_id, post_id, version, **kwargs):  # noqa: E501
        """comments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.comments_using_get1(authorization, feed_id, post_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str post_id: The post Id (required)
        :param str version: version (required)
        :param int limit: limit
        :param str ref: ref
        :return: ArrayWrapperOfPostReactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.comments_using_get1_with_http_info(authorization, feed_id, post_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.comments_using_get1_with_http_info(authorization, feed_id, post_id, version, **kwargs)  # noqa: E501
            return data

    def comments_using_get1_with_http_info(self, authorization, feed_id, post_id, version, **kwargs):  # noqa: E501
        """comments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.comments_using_get1_with_http_info(authorization, feed_id, post_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str post_id: The post Id (required)
        :param str version: version (required)
        :param int limit: limit
        :param str ref: ref
        :return: ArrayWrapperOfPostReactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'feed_id', 'post_id', 'version', 'limit', 'ref']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method comments_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `comments_using_get1`")  # noqa: E501
        # verify the required parameter 'feed_id' is set
        if ('feed_id' not in params or
                params['feed_id'] is None):
            raise ValueError("Missing the required parameter `feed_id` when calling `comments_using_get1`")  # noqa: E501
        # verify the required parameter 'post_id' is set
        if ('post_id' not in params or
                params['post_id'] is None):
            raise ValueError("Missing the required parameter `post_id` when calling `comments_using_get1`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `comments_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feed_id' in params:
            path_params['feedId'] = params['feed_id']  # noqa: E501
        if 'post_id' in params:
            path_params['postId'] = params['post_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'ref' in params:
            query_params.append(('ref', params['ref']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/{postId}/comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArrayWrapperOfPostReactionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_post_using_post2(self, body, authorization, feed_id, version, **kwargs):  # noqa: E501
        """createPost  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_post_using_post2(body, authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostRequest body: request (required)
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str version: version (required)
        :return: SingleWrapperOfPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_post_using_post2_with_http_info(body, authorization, feed_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.create_post_using_post2_with_http_info(body, authorization, feed_id, version, **kwargs)  # noqa: E501
            return data

    def create_post_using_post2_with_http_info(self, body, authorization, feed_id, version, **kwargs):  # noqa: E501
        """createPost  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_post_using_post2_with_http_info(body, authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostRequest body: request (required)
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str version: version (required)
        :return: SingleWrapperOfPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'feed_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_post_using_post2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_post_using_post2`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_post_using_post2`")  # noqa: E501
        # verify the required parameter 'feed_id' is set
        if ('feed_id' not in params or
                params['feed_id'] is None):
            raise ValueError("Missing the required parameter `feed_id` when calling `create_post_using_post2`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `create_post_using_post2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feed_id' in params:
            path_params['feedId'] = params['feed_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_comment_using_delete1(self, body, authorization, feed_id, post_id, version, **kwargs):  # noqa: E501
        """deleteComment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_comment_using_delete1(body, authorization, feed_id, post_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReactDeleteRequest body: The react Id (required)
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str post_id: The post Id (required)
        :param str version: version (required)
        :return: SingleWrapperOfUnit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_comment_using_delete1_with_http_info(body, authorization, feed_id, post_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_comment_using_delete1_with_http_info(body, authorization, feed_id, post_id, version, **kwargs)  # noqa: E501
            return data

    def delete_comment_using_delete1_with_http_info(self, body, authorization, feed_id, post_id, version, **kwargs):  # noqa: E501
        """deleteComment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_comment_using_delete1_with_http_info(body, authorization, feed_id, post_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReactDeleteRequest body: The react Id (required)
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str post_id: The post Id (required)
        :param str version: version (required)
        :return: SingleWrapperOfUnit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'feed_id', 'post_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_comment_using_delete1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_comment_using_delete1`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_comment_using_delete1`")  # noqa: E501
        # verify the required parameter 'feed_id' is set
        if ('feed_id' not in params or
                params['feed_id'] is None):
            raise ValueError("Missing the required parameter `feed_id` when calling `delete_comment_using_delete1`")  # noqa: E501
        # verify the required parameter 'post_id' is set
        if ('post_id' not in params or
                params['post_id'] is None):
            raise ValueError("Missing the required parameter `post_id` when calling `delete_comment_using_delete1`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `delete_comment_using_delete1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feed_id' in params:
            path_params['feedId'] = params['feed_id']  # noqa: E501
        if 'post_id' in params:
            path_params['postId'] = params['post_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/{postId}/react', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfUnit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_post_using_put1(self, body, authorization, feed_id, post_id, version, **kwargs):  # noqa: E501
        """editPost  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_post_using_put1(body, authorization, feed_id, post_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostRequest body: postRequest (required)
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str post_id: The post Id (required)
        :param str version: version (required)
        :return: SingleWrapperOfPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_post_using_put1_with_http_info(body, authorization, feed_id, post_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_post_using_put1_with_http_info(body, authorization, feed_id, post_id, version, **kwargs)  # noqa: E501
            return data

    def edit_post_using_put1_with_http_info(self, body, authorization, feed_id, post_id, version, **kwargs):  # noqa: E501
        """editPost  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_post_using_put1_with_http_info(body, authorization, feed_id, post_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostRequest body: postRequest (required)
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str post_id: The post Id (required)
        :param str version: version (required)
        :return: SingleWrapperOfPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'feed_id', 'post_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_post_using_put1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_post_using_put1`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `edit_post_using_put1`")  # noqa: E501
        # verify the required parameter 'feed_id' is set
        if ('feed_id' not in params or
                params['feed_id'] is None):
            raise ValueError("Missing the required parameter `feed_id` when calling `edit_post_using_put1`")  # noqa: E501
        # verify the required parameter 'post_id' is set
        if ('post_id' not in params or
                params['post_id'] is None):
            raise ValueError("Missing the required parameter `post_id` when calling `edit_post_using_put1`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `edit_post_using_put1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feed_id' in params:
            path_params['feedId'] = params['feed_id']  # noqa: E501
        if 'post_id' in params:
            path_params['postId'] = params['post_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/{postId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_feeds_using_get2(self, authorization, feed_id, version, **kwargs):  # noqa: E501
        """fetchFeeds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_feeds_using_get2(authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str version: version (required)
        :param int limit: limit
        :param str ref: ref
        :return: ArrayWrapperOfPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fetch_feeds_using_get2_with_http_info(authorization, feed_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.fetch_feeds_using_get2_with_http_info(authorization, feed_id, version, **kwargs)  # noqa: E501
            return data

    def fetch_feeds_using_get2_with_http_info(self, authorization, feed_id, version, **kwargs):  # noqa: E501
        """fetchFeeds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_feeds_using_get2_with_http_info(authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str version: version (required)
        :param int limit: limit
        :param str ref: ref
        :return: ArrayWrapperOfPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'feed_id', 'version', 'limit', 'ref']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_feeds_using_get2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `fetch_feeds_using_get2`")  # noqa: E501
        # verify the required parameter 'feed_id' is set
        if ('feed_id' not in params or
                params['feed_id'] is None):
            raise ValueError("Missing the required parameter `feed_id` when calling `fetch_feeds_using_get2`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `fetch_feeds_using_get2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feed_id' in params:
            path_params['feedId'] = params['feed_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'ref' in params:
            query_params.append(('ref', params['ref']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArrayWrapperOfPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def follow_using_post2(self, authorization, feed_id, version, **kwargs):  # noqa: E501
        """follow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.follow_using_post2(authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.follow_using_post2_with_http_info(authorization, feed_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.follow_using_post2_with_http_info(authorization, feed_id, version, **kwargs)  # noqa: E501
            return data

    def follow_using_post2_with_http_info(self, authorization, feed_id, version, **kwargs):  # noqa: E501
        """follow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.follow_using_post2_with_http_info(authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'feed_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method follow_using_post2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `follow_using_post2`")  # noqa: E501
        # verify the required parameter 'feed_id' is set
        if ('feed_id' not in params or
                params['feed_id'] is None):
            raise ValueError("Missing the required parameter `feed_id` when calling `follow_using_post2`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `follow_using_post2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feed_id' in params:
            path_params['feedId'] = params['feed_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/follow', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_following_info_using_get(self, authorization, feed_id, version, **kwargs):  # noqa: E501
        """getFollowingInfo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_following_info_using_get(authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str version: version (required)
        :return: SingleWrapperOfFollowingInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_following_info_using_get_with_http_info(authorization, feed_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_following_info_using_get_with_http_info(authorization, feed_id, version, **kwargs)  # noqa: E501
            return data

    def get_following_info_using_get_with_http_info(self, authorization, feed_id, version, **kwargs):  # noqa: E501
        """getFollowingInfo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_following_info_using_get_with_http_info(authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str version: version (required)
        :return: SingleWrapperOfFollowingInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'feed_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_following_info_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_following_info_using_get`")  # noqa: E501
        # verify the required parameter 'feed_id' is set
        if ('feed_id' not in params or
                params['feed_id'] is None):
            raise ValueError("Missing the required parameter `feed_id` when calling `get_following_info_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_following_info_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feed_id' in params:
            path_params['feedId'] = params['feed_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/followingInfo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfFollowingInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_followers_using_get(self, authorization, feed_id, version, **kwargs):  # noqa: E501
        """getListFollowers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_followers_using_get(authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str version: version (required)
        :param int limit: limit
        :param int offset: offset
        :return: ArrayWrapperOfActivityUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_followers_using_get_with_http_info(authorization, feed_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_followers_using_get_with_http_info(authorization, feed_id, version, **kwargs)  # noqa: E501
            return data

    def get_list_followers_using_get_with_http_info(self, authorization, feed_id, version, **kwargs):  # noqa: E501
        """getListFollowers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_followers_using_get_with_http_info(authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str version: version (required)
        :param int limit: limit
        :param int offset: offset
        :return: ArrayWrapperOfActivityUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'feed_id', 'version', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_followers_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_list_followers_using_get`")  # noqa: E501
        # verify the required parameter 'feed_id' is set
        if ('feed_id' not in params or
                params['feed_id'] is None):
            raise ValueError("Missing the required parameter `feed_id` when calling `get_list_followers_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_list_followers_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feed_id' in params:
            path_params['feedId'] = params['feed_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/followers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArrayWrapperOfActivityUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_followings_using_get(self, authorization, feed_id, version, **kwargs):  # noqa: E501
        """getListFollowings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_followings_using_get(authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str version: version (required)
        :param int limit: limit
        :param int offset: offset
        :return: ArrayWrapperOfActivityUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_followings_using_get_with_http_info(authorization, feed_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_followings_using_get_with_http_info(authorization, feed_id, version, **kwargs)  # noqa: E501
            return data

    def get_list_followings_using_get_with_http_info(self, authorization, feed_id, version, **kwargs):  # noqa: E501
        """getListFollowings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_followings_using_get_with_http_info(authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str version: version (required)
        :param int limit: limit
        :param int offset: offset
        :return: ArrayWrapperOfActivityUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'feed_id', 'version', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_followings_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_list_followings_using_get`")  # noqa: E501
        # verify the required parameter 'feed_id' is set
        if ('feed_id' not in params or
                params['feed_id'] is None):
            raise ValueError("Missing the required parameter `feed_id` when calling `get_list_followings_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_list_followings_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feed_id' in params:
            path_params['feedId'] = params['feed_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/followings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArrayWrapperOfActivityUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_post_detail_using_get1(self, authorization, feed_id, post_id, version, **kwargs):  # noqa: E501
        """getPostDetail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_post_detail_using_get1(authorization, feed_id, post_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str post_id: The post Id (required)
        :param str version: version (required)
        :return: SingleWrapperOfPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_post_detail_using_get1_with_http_info(authorization, feed_id, post_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_post_detail_using_get1_with_http_info(authorization, feed_id, post_id, version, **kwargs)  # noqa: E501
            return data

    def get_post_detail_using_get1_with_http_info(self, authorization, feed_id, post_id, version, **kwargs):  # noqa: E501
        """getPostDetail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_post_detail_using_get1_with_http_info(authorization, feed_id, post_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str post_id: The post Id (required)
        :param str version: version (required)
        :return: SingleWrapperOfPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'feed_id', 'post_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_post_detail_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_post_detail_using_get1`")  # noqa: E501
        # verify the required parameter 'feed_id' is set
        if ('feed_id' not in params or
                params['feed_id'] is None):
            raise ValueError("Missing the required parameter `feed_id` when calling `get_post_detail_using_get1`")  # noqa: E501
        # verify the required parameter 'post_id' is set
        if ('post_id' not in params or
                params['post_id'] is None):
            raise ValueError("Missing the required parameter `post_id` when calling `get_post_detail_using_get1`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_post_detail_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feed_id' in params:
            path_params['feedId'] = params['feed_id']  # noqa: E501
        if 'post_id' in params:
            path_params['postId'] = params['post_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/{postId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_suggestion_using_get1(self, authorization, feed_id, version, **kwargs):  # noqa: E501
        """getUserSuggestion  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_suggestion_using_get1(authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str version: version (required)
        :param int limit: limit
        :param int offset: offset
        :return: SingleWrapperOfPageOfUserSuggestion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_suggestion_using_get1_with_http_info(authorization, feed_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_suggestion_using_get1_with_http_info(authorization, feed_id, version, **kwargs)  # noqa: E501
            return data

    def get_user_suggestion_using_get1_with_http_info(self, authorization, feed_id, version, **kwargs):  # noqa: E501
        """getUserSuggestion  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_suggestion_using_get1_with_http_info(authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str version: version (required)
        :param int limit: limit
        :param int offset: offset
        :return: SingleWrapperOfPageOfUserSuggestion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'feed_id', 'version', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_suggestion_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_user_suggestion_using_get1`")  # noqa: E501
        # verify the required parameter 'feed_id' is set
        if ('feed_id' not in params or
                params['feed_id'] is None):
            raise ValueError("Missing the required parameter `feed_id` when calling `get_user_suggestion_using_get1`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_user_suggestion_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feed_id' in params:
            path_params['feedId'] = params['feed_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/user-suggestion', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfPageOfUserSuggestion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def react_using_post2(self, body, authorization, feed_id, post_id, version, **kwargs):  # noqa: E501
        """react  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.react_using_post2(body, authorization, feed_id, post_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReactRequest body: request (required)
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str post_id: The post Id (required)
        :param str version: version (required)
        :return: SingleWrapperOfReaction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.react_using_post2_with_http_info(body, authorization, feed_id, post_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.react_using_post2_with_http_info(body, authorization, feed_id, post_id, version, **kwargs)  # noqa: E501
            return data

    def react_using_post2_with_http_info(self, body, authorization, feed_id, post_id, version, **kwargs):  # noqa: E501
        """react  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.react_using_post2_with_http_info(body, authorization, feed_id, post_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReactRequest body: request (required)
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str post_id: The post Id (required)
        :param str version: version (required)
        :return: SingleWrapperOfReaction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'feed_id', 'post_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method react_using_post2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `react_using_post2`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `react_using_post2`")  # noqa: E501
        # verify the required parameter 'feed_id' is set
        if ('feed_id' not in params or
                params['feed_id'] is None):
            raise ValueError("Missing the required parameter `feed_id` when calling `react_using_post2`")  # noqa: E501
        # verify the required parameter 'post_id' is set
        if ('post_id' not in params or
                params['post_id'] is None):
            raise ValueError("Missing the required parameter `post_id` when calling `react_using_post2`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `react_using_post2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feed_id' in params:
            path_params['feedId'] = params['feed_id']  # noqa: E501
        if 'post_id' in params:
            path_params['postId'] = params['post_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/{postId}/react', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfReaction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reactions_using_get1(self, authorization, feed_id, post_id, version, **kwargs):  # noqa: E501
        """reactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reactions_using_get1(authorization, feed_id, post_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str post_id: The post Id (required)
        :param str version: version (required)
        :param int limit: limit
        :param str ref: ref
        :return: ArrayWrapperOfReaction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reactions_using_get1_with_http_info(authorization, feed_id, post_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.reactions_using_get1_with_http_info(authorization, feed_id, post_id, version, **kwargs)  # noqa: E501
            return data

    def reactions_using_get1_with_http_info(self, authorization, feed_id, post_id, version, **kwargs):  # noqa: E501
        """reactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reactions_using_get1_with_http_info(authorization, feed_id, post_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str post_id: The post Id (required)
        :param str version: version (required)
        :param int limit: limit
        :param str ref: ref
        :return: ArrayWrapperOfReaction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'feed_id', 'post_id', 'version', 'limit', 'ref']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reactions_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `reactions_using_get1`")  # noqa: E501
        # verify the required parameter 'feed_id' is set
        if ('feed_id' not in params or
                params['feed_id'] is None):
            raise ValueError("Missing the required parameter `feed_id` when calling `reactions_using_get1`")  # noqa: E501
        # verify the required parameter 'post_id' is set
        if ('post_id' not in params or
                params['post_id'] is None):
            raise ValueError("Missing the required parameter `post_id` when calling `reactions_using_get1`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `reactions_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feed_id' in params:
            path_params['feedId'] = params['feed_id']  # noqa: E501
        if 'post_id' in params:
            path_params['postId'] = params['post_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'ref' in params:
            query_params.append(('ref', params['ref']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/{postId}/reactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArrayWrapperOfReaction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_post_using_delete1(self, authorization, feed_id, post_id, version, **kwargs):  # noqa: E501
        """removePost  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_post_using_delete1(authorization, feed_id, post_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str post_id: The post Id (required)
        :param str version: version (required)
        :return: SingleWrapperOfUnit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_post_using_delete1_with_http_info(authorization, feed_id, post_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_post_using_delete1_with_http_info(authorization, feed_id, post_id, version, **kwargs)  # noqa: E501
            return data

    def remove_post_using_delete1_with_http_info(self, authorization, feed_id, post_id, version, **kwargs):  # noqa: E501
        """removePost  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_post_using_delete1_with_http_info(authorization, feed_id, post_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str post_id: The post Id (required)
        :param str version: version (required)
        :return: SingleWrapperOfUnit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'feed_id', 'post_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_post_using_delete1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `remove_post_using_delete1`")  # noqa: E501
        # verify the required parameter 'feed_id' is set
        if ('feed_id' not in params or
                params['feed_id'] is None):
            raise ValueError("Missing the required parameter `feed_id` when calling `remove_post_using_delete1`")  # noqa: E501
        # verify the required parameter 'post_id' is set
        if ('post_id' not in params or
                params['post_id'] is None):
            raise ValueError("Missing the required parameter `post_id` when calling `remove_post_using_delete1`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `remove_post_using_delete1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feed_id' in params:
            path_params['feedId'] = params['feed_id']  # noqa: E501
        if 'post_id' in params:
            path_params['postId'] = params['post_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/{postId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleWrapperOfUnit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def timeline_using_get(self, authorization, feed_id, version, **kwargs):  # noqa: E501
        """timeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.timeline_using_get(authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str version: version (required)
        :param int limit: limit
        :param str ref: ref
        :return: ArrayWrapperOfPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.timeline_using_get_with_http_info(authorization, feed_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.timeline_using_get_with_http_info(authorization, feed_id, version, **kwargs)  # noqa: E501
            return data

    def timeline_using_get_with_http_info(self, authorization, feed_id, version, **kwargs):  # noqa: E501
        """timeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.timeline_using_get_with_http_info(authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str version: version (required)
        :param int limit: limit
        :param str ref: ref
        :return: ArrayWrapperOfPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'feed_id', 'version', 'limit', 'ref']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method timeline_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `timeline_using_get`")  # noqa: E501
        # verify the required parameter 'feed_id' is set
        if ('feed_id' not in params or
                params['feed_id'] is None):
            raise ValueError("Missing the required parameter `feed_id` when calling `timeline_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `timeline_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feed_id' in params:
            path_params['feedId'] = params['feed_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'ref' in params:
            query_params.append(('ref', params['ref']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/timeline', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArrayWrapperOfPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unfollow_using_delete2(self, authorization, feed_id, version, **kwargs):  # noqa: E501
        """unfollow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unfollow_using_delete2(authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unfollow_using_delete2_with_http_info(authorization, feed_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.unfollow_using_delete2_with_http_info(authorization, feed_id, version, **kwargs)  # noqa: E501
            return data

    def unfollow_using_delete2_with_http_info(self, authorization, feed_id, version, **kwargs):  # noqa: E501
        """unfollow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unfollow_using_delete2_with_http_info(authorization, feed_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'feed_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unfollow_using_delete2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `unfollow_using_delete2`")  # noqa: E501
        # verify the required parameter 'feed_id' is set
        if ('feed_id' not in params or
                params['feed_id'] is None):
            raise ValueError("Missing the required parameter `feed_id` when calling `unfollow_using_delete2`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `unfollow_using_delete2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feed_id' in params:
            path_params['feedId'] = params['feed_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/follow', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_comment_using_put1(self, body, authorization, feed_id, post_id, version, **kwargs):  # noqa: E501
        """updateComment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_comment_using_put1(body, authorization, feed_id, post_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReactRequest body: request (required)
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str post_id: The post Id (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_comment_using_put1_with_http_info(body, authorization, feed_id, post_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.update_comment_using_put1_with_http_info(body, authorization, feed_id, post_id, version, **kwargs)  # noqa: E501
            return data

    def update_comment_using_put1_with_http_info(self, body, authorization, feed_id, post_id, version, **kwargs):  # noqa: E501
        """updateComment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_comment_using_put1_with_http_info(body, authorization, feed_id, post_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReactRequest body: request (required)
        :param str authorization: (required)
        :param int feed_id: The user's feed Id (required)
        :param str post_id: The post Id (required)
        :param str version: version (required)
        :return: Wrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'feed_id', 'post_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_comment_using_put1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_comment_using_put1`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_comment_using_put1`")  # noqa: E501
        # verify the required parameter 'feed_id' is set
        if ('feed_id' not in params or
                params['feed_id'] is None):
            raise ValueError("Missing the required parameter `feed_id` when calling `update_comment_using_put1`")  # noqa: E501
        # verify the required parameter 'post_id' is set
        if ('post_id' not in params or
                params['post_id'] is None):
            raise ValueError("Missing the required parameter `post_id` when calling `update_comment_using_put1`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `update_comment_using_put1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feed_id' in params:
            path_params['feedId'] = params['feed_id']  # noqa: E501
        if 'post_id' in params:
            path_params['postId'] = params['post_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/activity/{version}/user/{feedId}/{postId}/react', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Wrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr

from typing import Optional

from dupr_backend.models.report_request import ReportRequest
from dupr_backend.models.single_wrapper_of_page_of_post_report import SingleWrapperOfPageOfPostReport
from dupr_backend.models.single_wrapper_of_post_report import SingleWrapperOfPostReport
from dupr_backend.models.wrapper import Wrapper

from dupr_backend.api_client import ApiClient
from dupr_backend.api_response import ApiResponse
from dupr_backend.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PostReportApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_reports_using_get(self, authorization : StrictStr, status : Annotated[StrictStr, Field(..., description="PostReport status")], version : Annotated[StrictStr, Field(..., description="version")], from_date : Annotated[Optional[StrictStr], Field(description="fromDate")] = None, limit : Annotated[Optional[StrictInt], Field(description="limit")] = None, offset : Annotated[Optional[StrictInt], Field(description="offset")] = None, reason : Annotated[Optional[StrictStr], Field(description="reason")] = None, sort_by : Annotated[Optional[StrictStr], Field(description="sortBy")] = None, sort_direction : Annotated[Optional[StrictStr], Field(description="sortDirection")] = None, to_date : Annotated[Optional[StrictStr], Field(description="toDate")] = None, **kwargs) -> SingleWrapperOfPageOfPostReport:  # noqa: E501
        """getReports  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_reports_using_get(authorization, status, version, from_date, limit, offset, reason, sort_by, sort_direction, to_date, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param status: PostReport status (required)
        :type status: str
        :param version: version (required)
        :type version: str
        :param from_date: fromDate
        :type from_date: str
        :param limit: limit
        :type limit: int
        :param offset: offset
        :type offset: int
        :param reason: reason
        :type reason: str
        :param sort_by: sortBy
        :type sort_by: str
        :param sort_direction: sortDirection
        :type sort_direction: str
        :param to_date: toDate
        :type to_date: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SingleWrapperOfPageOfPostReport
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_reports_using_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_reports_using_get_with_http_info(authorization, status, version, from_date, limit, offset, reason, sort_by, sort_direction, to_date, **kwargs)  # noqa: E501

    @validate_arguments
    def get_reports_using_get_with_http_info(self, authorization : StrictStr, status : Annotated[StrictStr, Field(..., description="PostReport status")], version : Annotated[StrictStr, Field(..., description="version")], from_date : Annotated[Optional[StrictStr], Field(description="fromDate")] = None, limit : Annotated[Optional[StrictInt], Field(description="limit")] = None, offset : Annotated[Optional[StrictInt], Field(description="offset")] = None, reason : Annotated[Optional[StrictStr], Field(description="reason")] = None, sort_by : Annotated[Optional[StrictStr], Field(description="sortBy")] = None, sort_direction : Annotated[Optional[StrictStr], Field(description="sortDirection")] = None, to_date : Annotated[Optional[StrictStr], Field(description="toDate")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """getReports  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_reports_using_get_with_http_info(authorization, status, version, from_date, limit, offset, reason, sort_by, sort_direction, to_date, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param status: PostReport status (required)
        :type status: str
        :param version: version (required)
        :type version: str
        :param from_date: fromDate
        :type from_date: str
        :param limit: limit
        :type limit: int
        :param offset: offset
        :type offset: int
        :param reason: reason
        :type reason: str
        :param sort_by: sortBy
        :type sort_by: str
        :param sort_direction: sortDirection
        :type sort_direction: str
        :param to_date: toDate
        :type to_date: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SingleWrapperOfPageOfPostReport, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'status',
            'version',
            'from_date',
            'limit',
            'offset',
            'reason',
            'sort_by',
            'sort_direction',
            'to_date'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reports_using_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['status']:
            _path_params['status'] = _params['status']

        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        if _params.get('from_date') is not None:  # noqa: E501
            _query_params.append(('fromDate', _params['from_date']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('reason') is not None:  # noqa: E501
            _query_params.append(('reason', _params['reason']))

        if _params.get('sort_by') is not None:  # noqa: E501
            _query_params.append(('sortBy', _params['sort_by']))

        if _params.get('sort_direction') is not None:  # noqa: E501
            _query_params.append(('sortDirection', _params['sort_direction']))

        if _params.get('to_date') is not None:  # noqa: E501
            _query_params.append(('toDate', _params['to_date']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SingleWrapperOfPageOfPostReport",
            '403': None,
        }

        return self.api_client.call_api(
            '/report/{version}/{status}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def report_activity_using_post(self, authorization : StrictStr, version : Annotated[StrictStr, Field(..., description="version")], report_request : Annotated[ReportRequest, Field(..., description="reportRequest")], **kwargs) -> SingleWrapperOfPostReport:  # noqa: E501
        """reportActivity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.report_activity_using_post(authorization, version, report_request, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param version: version (required)
        :type version: str
        :param report_request: reportRequest (required)
        :type report_request: ReportRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SingleWrapperOfPostReport
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the report_activity_using_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.report_activity_using_post_with_http_info(authorization, version, report_request, **kwargs)  # noqa: E501

    @validate_arguments
    def report_activity_using_post_with_http_info(self, authorization : StrictStr, version : Annotated[StrictStr, Field(..., description="version")], report_request : Annotated[ReportRequest, Field(..., description="reportRequest")], **kwargs) -> ApiResponse:  # noqa: E501
        """reportActivity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.report_activity_using_post_with_http_info(authorization, version, report_request, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param version: version (required)
        :type version: str
        :param report_request: reportRequest (required)
        :type report_request: ReportRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SingleWrapperOfPostReport, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'version',
            'report_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method report_activity_using_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['report_request'] is not None:
            _body_params = _params['report_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SingleWrapperOfPostReport",
            '403': None,
        }

        return self.api_client.call_api(
            '/report/{version}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def report_process_using_post(self, authorization : StrictStr, report_id : Annotated[StrictStr, Field(..., description="The report's Id")], status : Annotated[StrictStr, Field(..., description="APPROVE/REJECT")], version : Annotated[StrictStr, Field(..., description="version")], **kwargs) -> Wrapper:  # noqa: E501
        """reportProcess  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.report_process_using_post(authorization, report_id, status, version, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param report_id: The report's Id (required)
        :type report_id: str
        :param status: APPROVE/REJECT (required)
        :type status: str
        :param version: version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Wrapper
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the report_process_using_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.report_process_using_post_with_http_info(authorization, report_id, status, version, **kwargs)  # noqa: E501

    @validate_arguments
    def report_process_using_post_with_http_info(self, authorization : StrictStr, report_id : Annotated[StrictStr, Field(..., description="The report's Id")], status : Annotated[StrictStr, Field(..., description="APPROVE/REJECT")], version : Annotated[StrictStr, Field(..., description="version")], **kwargs) -> ApiResponse:  # noqa: E501
        """reportProcess  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.report_process_using_post_with_http_info(authorization, report_id, status, version, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param report_id: The report's Id (required)
        :type report_id: str
        :param status: APPROVE/REJECT (required)
        :type status: str
        :param version: version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Wrapper, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'report_id',
            'status',
            'version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method report_process_using_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['report_id']:
            _path_params['reportId'] = _params['report_id']

        if _params['status']:
            _path_params['status'] = _params['status']

        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Wrapper",
            '403': None,
        }

        return self.api_client.call_api(
            '/report/{version}/process/{reportId}/{status}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator
from dupr_backend.models.team import Team

class LeagueMatchRequest(BaseModel):
    """
    LeagueMatchRequest
    """
    bracket_id: StrictInt = Field(..., alias="bracketId")
    club_id: StrictInt = Field(..., alias="clubId")
    event_name: Optional[StrictStr] = Field(None, alias="eventName")
    format: StrictStr = Field(...)
    league: Optional[StrictStr] = None
    league_id: StrictInt = Field(..., alias="leagueId")
    league_match_id: StrictInt = Field(..., alias="leagueMatchId")
    location: Optional[StrictStr] = None
    match_date: date = Field(..., alias="matchDate")
    score_format_id: Optional[StrictInt] = Field(None, alias="scoreFormatId")
    team1: Team = Field(...)
    team2: Team = Field(...)
    tournament: Optional[StrictStr] = None
    venue: Optional[StrictStr] = None
    __properties = ["bracketId", "clubId", "eventName", "format", "league", "leagueId", "leagueMatchId", "location", "matchDate", "scoreFormatId", "team1", "team2", "tournament", "venue"]

    @validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('DOUBLES', 'SINGLES'):
            raise ValueError("must be one of enum values ('DOUBLES', 'SINGLES')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LeagueMatchRequest:
        """Create an instance of LeagueMatchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of team1
        if self.team1:
            _dict['team1'] = self.team1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team2
        if self.team2:
            _dict['team2'] = self.team2.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LeagueMatchRequest:
        """Create an instance of LeagueMatchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LeagueMatchRequest.parse_obj(obj)

        _obj = LeagueMatchRequest.parse_obj({
            "bracket_id": obj.get("bracketId"),
            "club_id": obj.get("clubId"),
            "event_name": obj.get("eventName"),
            "format": obj.get("format"),
            "league": obj.get("league"),
            "league_id": obj.get("leagueId"),
            "league_match_id": obj.get("leagueMatchId"),
            "location": obj.get("location"),
            "match_date": obj.get("matchDate"),
            "score_format_id": obj.get("scoreFormatId"),
            "team1": Team.from_dict(obj.get("team1")) if obj.get("team1") is not None else None,
            "team2": Team.from_dict(obj.get("team2")) if obj.get("team2") is not None else None,
            "tournament": obj.get("tournament"),
            "venue": obj.get("venue")
        })
        return _obj



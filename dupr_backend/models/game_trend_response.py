# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GameTrendResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'game_lost': 'int',
        'game_won': 'int',
        'month': 'str',
        'serial': 'int',
        'total_games': 'int'
    }

    attribute_map = {
        'game_lost': 'gameLost',
        'game_won': 'gameWon',
        'month': 'month',
        'serial': 'serial',
        'total_games': 'totalGames'
    }

    def __init__(self, game_lost=None, game_won=None, month=None, serial=None, total_games=None):  # noqa: E501
        """GameTrendResponse - a model defined in Swagger"""  # noqa: E501
        self._game_lost = None
        self._game_won = None
        self._month = None
        self._serial = None
        self._total_games = None
        self.discriminator = None
        if game_lost is not None:
            self.game_lost = game_lost
        if game_won is not None:
            self.game_won = game_won
        if month is not None:
            self.month = month
        if serial is not None:
            self.serial = serial
        if total_games is not None:
            self.total_games = total_games

    @property
    def game_lost(self):
        """Gets the game_lost of this GameTrendResponse.  # noqa: E501


        :return: The game_lost of this GameTrendResponse.  # noqa: E501
        :rtype: int
        """
        return self._game_lost

    @game_lost.setter
    def game_lost(self, game_lost):
        """Sets the game_lost of this GameTrendResponse.


        :param game_lost: The game_lost of this GameTrendResponse.  # noqa: E501
        :type: int
        """

        self._game_lost = game_lost

    @property
    def game_won(self):
        """Gets the game_won of this GameTrendResponse.  # noqa: E501


        :return: The game_won of this GameTrendResponse.  # noqa: E501
        :rtype: int
        """
        return self._game_won

    @game_won.setter
    def game_won(self, game_won):
        """Sets the game_won of this GameTrendResponse.


        :param game_won: The game_won of this GameTrendResponse.  # noqa: E501
        :type: int
        """

        self._game_won = game_won

    @property
    def month(self):
        """Gets the month of this GameTrendResponse.  # noqa: E501


        :return: The month of this GameTrendResponse.  # noqa: E501
        :rtype: str
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this GameTrendResponse.


        :param month: The month of this GameTrendResponse.  # noqa: E501
        :type: str
        """

        self._month = month

    @property
    def serial(self):
        """Gets the serial of this GameTrendResponse.  # noqa: E501


        :return: The serial of this GameTrendResponse.  # noqa: E501
        :rtype: int
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this GameTrendResponse.


        :param serial: The serial of this GameTrendResponse.  # noqa: E501
        :type: int
        """

        self._serial = serial

    @property
    def total_games(self):
        """Gets the total_games of this GameTrendResponse.  # noqa: E501


        :return: The total_games of this GameTrendResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_games

    @total_games.setter
    def total_games(self, total_games):
        """Sets the total_games of this GameTrendResponse.


        :param total_games: The total_games of this GameTrendResponse.  # noqa: E501
        :type: int
        """

        self._total_games = total_games

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GameTrendResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GameTrendResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuthResponse0(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'email': 'str',
        'full_name': 'str',
        'id': 'int',
        'image_url': 'str',
        'refresh_token': 'str',
        'role': 'RoleResponse'
    }

    attribute_map = {
        'access_token': 'accessToken',
        'email': 'email',
        'full_name': 'fullName',
        'id': 'id',
        'image_url': 'imageUrl',
        'refresh_token': 'refreshToken',
        'role': 'role'
    }

    def __init__(self, access_token=None, email=None, full_name=None, id=None, image_url=None, refresh_token=None, role=None):  # noqa: E501
        """AuthResponse0 - a model defined in Swagger"""  # noqa: E501
        self._access_token = None
        self._email = None
        self._full_name = None
        self._id = None
        self._image_url = None
        self._refresh_token = None
        self._role = None
        self.discriminator = None
        self.access_token = access_token
        self.email = email
        self.full_name = full_name
        self.id = id
        if image_url is not None:
            self.image_url = image_url
        self.refresh_token = refresh_token
        if role is not None:
            self.role = role

    @property
    def access_token(self):
        """Gets the access_token of this AuthResponse0.  # noqa: E501


        :return: The access_token of this AuthResponse0.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this AuthResponse0.


        :param access_token: The access_token of this AuthResponse0.  # noqa: E501
        :type: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")  # noqa: E501

        self._access_token = access_token

    @property
    def email(self):
        """Gets the email of this AuthResponse0.  # noqa: E501


        :return: The email of this AuthResponse0.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AuthResponse0.


        :param email: The email of this AuthResponse0.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def full_name(self):
        """Gets the full_name of this AuthResponse0.  # noqa: E501


        :return: The full_name of this AuthResponse0.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this AuthResponse0.


        :param full_name: The full_name of this AuthResponse0.  # noqa: E501
        :type: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")  # noqa: E501

        self._full_name = full_name

    @property
    def id(self):
        """Gets the id of this AuthResponse0.  # noqa: E501


        :return: The id of this AuthResponse0.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthResponse0.


        :param id: The id of this AuthResponse0.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this AuthResponse0.  # noqa: E501


        :return: The image_url of this AuthResponse0.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this AuthResponse0.


        :param image_url: The image_url of this AuthResponse0.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def refresh_token(self):
        """Gets the refresh_token of this AuthResponse0.  # noqa: E501


        :return: The refresh_token of this AuthResponse0.  # noqa: E501
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this AuthResponse0.


        :param refresh_token: The refresh_token of this AuthResponse0.  # noqa: E501
        :type: str
        """
        if refresh_token is None:
            raise ValueError("Invalid value for `refresh_token`, must not be `None`")  # noqa: E501

        self._refresh_token = refresh_token

    @property
    def role(self):
        """Gets the role of this AuthResponse0.  # noqa: E501


        :return: The role of this AuthResponse0.  # noqa: E501
        :rtype: RoleResponse
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this AuthResponse0.


        :param role: The role of this AuthResponse0.  # noqa: E501
        :type: RoleResponse
        """

        self._role = role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthResponse0, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthResponse0):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

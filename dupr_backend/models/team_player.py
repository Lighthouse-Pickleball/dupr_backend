# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, validator
from dupr_backend.models.post_match_rating import PostMatchRating

class TeamPlayer(BaseModel):
    """
    TeamPlayer
    """
    allow_substitution: StrictBool = Field(..., alias="allowSubstitution")
    email: StrictStr = Field(...)
    full_name: StrictStr = Field(..., alias="fullName")
    id: StrictInt = Field(...)
    image_url: Optional[StrictStr] = Field(None, alias="imageUrl")
    post_match_rating: Optional[PostMatchRating] = Field(None, alias="postMatchRating")
    referral_code: Optional[StrictStr] = Field(None, alias="referralCode")
    status: StrictStr = Field(...)
    validated_match: Optional[StrictBool] = Field(None, alias="validatedMatch")
    verified_email: StrictBool = Field(..., alias="verifiedEmail")
    __properties = ["allowSubstitution", "email", "fullName", "id", "imageUrl", "postMatchRating", "referralCode", "status", "validatedMatch", "verifiedEmail"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING'):
            raise ValueError("must be one of enum values ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TeamPlayer:
        """Create an instance of TeamPlayer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of post_match_rating
        if self.post_match_rating:
            _dict['postMatchRating'] = self.post_match_rating.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TeamPlayer:
        """Create an instance of TeamPlayer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TeamPlayer.parse_obj(obj)

        _obj = TeamPlayer.parse_obj({
            "allow_substitution": obj.get("allowSubstitution"),
            "email": obj.get("email"),
            "full_name": obj.get("fullName"),
            "id": obj.get("id"),
            "image_url": obj.get("imageUrl"),
            "post_match_rating": PostMatchRating.from_dict(obj.get("postMatchRating")) if obj.get("postMatchRating") is not None else None,
            "referral_code": obj.get("referralCode"),
            "status": obj.get("status"),
            "validated_match": obj.get("validatedMatch"),
            "verified_email": obj.get("verifiedEmail")
        })
        return _obj



# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt
from dupr_backend.models.match_ratings import MatchRatings

class PlayerStatisticsUpdateRequest(BaseModel):
    """
    PlayerStatisticsUpdateRequest
    """
    doubles: Optional[MatchRatings] = None
    obfuscated_player_id: StrictInt = Field(..., alias="obfuscatedPlayerId")
    singles: Optional[MatchRatings] = None
    __properties = ["doubles", "obfuscatedPlayerId", "singles"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlayerStatisticsUpdateRequest:
        """Create an instance of PlayerStatisticsUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of doubles
        if self.doubles:
            _dict['doubles'] = self.doubles.to_dict()
        # override the default output from pydantic by calling `to_dict()` of singles
        if self.singles:
            _dict['singles'] = self.singles.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlayerStatisticsUpdateRequest:
        """Create an instance of PlayerStatisticsUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlayerStatisticsUpdateRequest.parse_obj(obj)

        _obj = PlayerStatisticsUpdateRequest.parse_obj({
            "doubles": MatchRatings.from_dict(obj.get("doubles")) if obj.get("doubles") is not None else None,
            "obfuscated_player_id": obj.get("obfuscatedPlayerId"),
            "singles": MatchRatings.from_dict(obj.get("singles")) if obj.get("singles") is not None else None
        })
        return _obj



# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClubRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_id': 'int',
        'attributes': 'dict(str, Attribute)',
        'club_id': 'int',
        'club_name': 'str',
        'club_type_id': 'int',
        'currency_code': 'str',
        'long_description': 'ContentRequest',
        'manifest': 'ContentRequest',
        'media_id': 'int',
        'model_type': 'str',
        'model_value': 'float',
        'short_description': 'ContentRequest'
    }

    attribute_map = {
        'address_id': 'addressId',
        'attributes': 'attributes',
        'club_id': 'clubId',
        'club_name': 'clubName',
        'club_type_id': 'clubTypeId',
        'currency_code': 'currencyCode',
        'long_description': 'longDescription',
        'manifest': 'manifest',
        'media_id': 'mediaId',
        'model_type': 'modelType',
        'model_value': 'modelValue',
        'short_description': 'shortDescription'
    }

    def __init__(self, address_id=None, attributes=None, club_id=None, club_name=None, club_type_id=None, currency_code=None, long_description=None, manifest=None, media_id=None, model_type=None, model_value=None, short_description=None):  # noqa: E501
        """ClubRequest - a model defined in Swagger"""  # noqa: E501
        self._address_id = None
        self._attributes = None
        self._club_id = None
        self._club_name = None
        self._club_type_id = None
        self._currency_code = None
        self._long_description = None
        self._manifest = None
        self._media_id = None
        self._model_type = None
        self._model_value = None
        self._short_description = None
        self.discriminator = None
        if address_id is not None:
            self.address_id = address_id
        if attributes is not None:
            self.attributes = attributes
        self.club_id = club_id
        self.club_name = club_name
        self.club_type_id = club_type_id
        self.currency_code = currency_code
        if long_description is not None:
            self.long_description = long_description
        if manifest is not None:
            self.manifest = manifest
        if media_id is not None:
            self.media_id = media_id
        self.model_type = model_type
        self.model_value = model_value
        if short_description is not None:
            self.short_description = short_description

    @property
    def address_id(self):
        """Gets the address_id of this ClubRequest.  # noqa: E501


        :return: The address_id of this ClubRequest.  # noqa: E501
        :rtype: int
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """Sets the address_id of this ClubRequest.


        :param address_id: The address_id of this ClubRequest.  # noqa: E501
        :type: int
        """

        self._address_id = address_id

    @property
    def attributes(self):
        """Gets the attributes of this ClubRequest.  # noqa: E501


        :return: The attributes of this ClubRequest.  # noqa: E501
        :rtype: dict(str, Attribute)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ClubRequest.


        :param attributes: The attributes of this ClubRequest.  # noqa: E501
        :type: dict(str, Attribute)
        """

        self._attributes = attributes

    @property
    def club_id(self):
        """Gets the club_id of this ClubRequest.  # noqa: E501


        :return: The club_id of this ClubRequest.  # noqa: E501
        :rtype: int
        """
        return self._club_id

    @club_id.setter
    def club_id(self, club_id):
        """Sets the club_id of this ClubRequest.


        :param club_id: The club_id of this ClubRequest.  # noqa: E501
        :type: int
        """
        if club_id is None:
            raise ValueError("Invalid value for `club_id`, must not be `None`")  # noqa: E501

        self._club_id = club_id

    @property
    def club_name(self):
        """Gets the club_name of this ClubRequest.  # noqa: E501


        :return: The club_name of this ClubRequest.  # noqa: E501
        :rtype: str
        """
        return self._club_name

    @club_name.setter
    def club_name(self, club_name):
        """Sets the club_name of this ClubRequest.


        :param club_name: The club_name of this ClubRequest.  # noqa: E501
        :type: str
        """
        if club_name is None:
            raise ValueError("Invalid value for `club_name`, must not be `None`")  # noqa: E501

        self._club_name = club_name

    @property
    def club_type_id(self):
        """Gets the club_type_id of this ClubRequest.  # noqa: E501


        :return: The club_type_id of this ClubRequest.  # noqa: E501
        :rtype: int
        """
        return self._club_type_id

    @club_type_id.setter
    def club_type_id(self, club_type_id):
        """Sets the club_type_id of this ClubRequest.


        :param club_type_id: The club_type_id of this ClubRequest.  # noqa: E501
        :type: int
        """
        if club_type_id is None:
            raise ValueError("Invalid value for `club_type_id`, must not be `None`")  # noqa: E501

        self._club_type_id = club_type_id

    @property
    def currency_code(self):
        """Gets the currency_code of this ClubRequest.  # noqa: E501


        :return: The currency_code of this ClubRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this ClubRequest.


        :param currency_code: The currency_code of this ClubRequest.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def long_description(self):
        """Gets the long_description of this ClubRequest.  # noqa: E501


        :return: The long_description of this ClubRequest.  # noqa: E501
        :rtype: ContentRequest
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this ClubRequest.


        :param long_description: The long_description of this ClubRequest.  # noqa: E501
        :type: ContentRequest
        """

        self._long_description = long_description

    @property
    def manifest(self):
        """Gets the manifest of this ClubRequest.  # noqa: E501


        :return: The manifest of this ClubRequest.  # noqa: E501
        :rtype: ContentRequest
        """
        return self._manifest

    @manifest.setter
    def manifest(self, manifest):
        """Sets the manifest of this ClubRequest.


        :param manifest: The manifest of this ClubRequest.  # noqa: E501
        :type: ContentRequest
        """

        self._manifest = manifest

    @property
    def media_id(self):
        """Gets the media_id of this ClubRequest.  # noqa: E501


        :return: The media_id of this ClubRequest.  # noqa: E501
        :rtype: int
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id):
        """Sets the media_id of this ClubRequest.


        :param media_id: The media_id of this ClubRequest.  # noqa: E501
        :type: int
        """

        self._media_id = media_id

    @property
    def model_type(self):
        """Gets the model_type of this ClubRequest.  # noqa: E501


        :return: The model_type of this ClubRequest.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this ClubRequest.


        :param model_type: The model_type of this ClubRequest.  # noqa: E501
        :type: str
        """
        if model_type is None:
            raise ValueError("Invalid value for `model_type`, must not be `None`")  # noqa: E501
        allowed_values = ["ABSOLUTE", "RELATIVE"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"  # noqa: E501
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def model_value(self):
        """Gets the model_value of this ClubRequest.  # noqa: E501


        :return: The model_value of this ClubRequest.  # noqa: E501
        :rtype: float
        """
        return self._model_value

    @model_value.setter
    def model_value(self, model_value):
        """Sets the model_value of this ClubRequest.


        :param model_value: The model_value of this ClubRequest.  # noqa: E501
        :type: float
        """
        if model_value is None:
            raise ValueError("Invalid value for `model_value`, must not be `None`")  # noqa: E501

        self._model_value = model_value

    @property
    def short_description(self):
        """Gets the short_description of this ClubRequest.  # noqa: E501


        :return: The short_description of this ClubRequest.  # noqa: E501
        :rtype: ContentRequest
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this ClubRequest.


        :param short_description: The short_description of this ClubRequest.  # noqa: E501
        :type: ContentRequest
        """

        self._short_description = short_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClubRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClubRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

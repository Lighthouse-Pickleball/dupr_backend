# coding: utf-8

"""
    DUPR Backend APIs

    Internal RESTful APIs to access DUPR ratings, users and provide matches.

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from dupr_backend.models.attribute import Attribute
from dupr_backend.models.content_request import ContentRequest
from typing import Optional, Set
from typing_extensions import Self

class ClubRequest(BaseModel):
    """
    ClubRequest
    """ # noqa: E501
    club_name: StrictStr = Field(alias="clubName")
    club_type_id: StrictInt = Field(alias="clubTypeId")
    media_id: Optional[StrictInt] = Field(default=None, alias="mediaId")
    address_id: Optional[StrictInt] = Field(default=None, alias="addressId")
    manifest: Optional[ContentRequest] = None
    short_description: Optional[ContentRequest] = Field(default=None, alias="shortDescription")
    long_description: Optional[ContentRequest] = Field(default=None, alias="longDescription")
    attributes: Optional[Dict[str, Attribute]] = None
    club_id: StrictInt = Field(alias="clubId")
    model_type: StrictStr = Field(alias="modelType")
    model_value: Union[StrictFloat, StrictInt] = Field(alias="modelValue")
    currency_code: StrictStr = Field(alias="currencyCode")
    __properties: ClassVar[List[str]] = ["clubName", "clubTypeId", "mediaId", "addressId", "manifest", "shortDescription", "longDescription", "attributes", "clubId", "modelType", "modelValue", "currencyCode"]

    @field_validator('model_type')
    def model_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ABSOLUTE', 'RELATIVE']):
            raise ValueError("must be one of enum values ('ABSOLUTE', 'RELATIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClubRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of manifest
        if self.manifest:
            _dict['manifest'] = self.manifest.to_dict()
        # override the default output from pydantic by calling `to_dict()` of short_description
        if self.short_description:
            _dict['shortDescription'] = self.short_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of long_description
        if self.long_description:
            _dict['longDescription'] = self.long_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in attributes (dict)
        _field_dict = {}
        if self.attributes:
            for _key_attributes in self.attributes:
                if self.attributes[_key_attributes]:
                    _field_dict[_key_attributes] = self.attributes[_key_attributes].to_dict()
            _dict['attributes'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClubRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clubName": obj.get("clubName"),
            "clubTypeId": obj.get("clubTypeId"),
            "mediaId": obj.get("mediaId"),
            "addressId": obj.get("addressId"),
            "manifest": ContentRequest.from_dict(obj["manifest"]) if obj.get("manifest") is not None else None,
            "shortDescription": ContentRequest.from_dict(obj["shortDescription"]) if obj.get("shortDescription") is not None else None,
            "longDescription": ContentRequest.from_dict(obj["longDescription"]) if obj.get("longDescription") is not None else None,
            "attributes": dict(
                (_k, Attribute.from_dict(_v))
                for _k, _v in obj["attributes"].items()
            )
            if obj.get("attributes") is not None
            else None,
            "clubId": obj.get("clubId"),
            "modelType": obj.get("modelType"),
            "modelValue": obj.get("modelValue"),
            "currencyCode": obj.get("currencyCode")
        })
        return _obj



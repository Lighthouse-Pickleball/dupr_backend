# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, validator
from dupr_backend.models.attribute import Attribute
from dupr_backend.models.content_request import ContentRequest

class ClubRequest(BaseModel):
    """
    ClubRequest
    """
    address_id: Optional[StrictInt] = Field(None, alias="addressId")
    attributes: Optional[Dict[str, Attribute]] = None
    club_id: StrictInt = Field(..., alias="clubId")
    club_name: StrictStr = Field(..., alias="clubName")
    club_type_id: StrictInt = Field(..., alias="clubTypeId")
    currency_code: StrictStr = Field(..., alias="currencyCode")
    long_description: Optional[ContentRequest] = Field(None, alias="longDescription")
    manifest: Optional[ContentRequest] = None
    media_id: Optional[StrictInt] = Field(None, alias="mediaId")
    model_type: StrictStr = Field(..., alias="modelType")
    model_value: Union[StrictFloat, StrictInt] = Field(..., alias="modelValue")
    short_description: Optional[ContentRequest] = Field(None, alias="shortDescription")
    __properties = ["addressId", "attributes", "clubId", "clubName", "clubTypeId", "currencyCode", "longDescription", "manifest", "mediaId", "modelType", "modelValue", "shortDescription"]

    @validator('model_type')
    def model_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ABSOLUTE', 'RELATIVE'):
            raise ValueError("must be one of enum values ('ABSOLUTE', 'RELATIVE')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClubRequest:
        """Create an instance of ClubRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in attributes (dict)
        _field_dict = {}
        if self.attributes:
            for _key in self.attributes:
                if self.attributes[_key]:
                    _field_dict[_key] = self.attributes[_key].to_dict()
            _dict['attributes'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of long_description
        if self.long_description:
            _dict['longDescription'] = self.long_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manifest
        if self.manifest:
            _dict['manifest'] = self.manifest.to_dict()
        # override the default output from pydantic by calling `to_dict()` of short_description
        if self.short_description:
            _dict['shortDescription'] = self.short_description.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClubRequest:
        """Create an instance of ClubRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClubRequest.parse_obj(obj)

        _obj = ClubRequest.parse_obj({
            "address_id": obj.get("addressId"),
            "attributes": dict(
                (_k, Attribute.from_dict(_v))
                for _k, _v in obj.get("attributes").items()
            )
            if obj.get("attributes") is not None
            else None,
            "club_id": obj.get("clubId"),
            "club_name": obj.get("clubName"),
            "club_type_id": obj.get("clubTypeId"),
            "currency_code": obj.get("currencyCode"),
            "long_description": ContentRequest.from_dict(obj.get("longDescription")) if obj.get("longDescription") is not None else None,
            "manifest": ContentRequest.from_dict(obj.get("manifest")) if obj.get("manifest") is not None else None,
            "media_id": obj.get("mediaId"),
            "model_type": obj.get("modelType"),
            "model_value": obj.get("modelValue"),
            "short_description": ContentRequest.from_dict(obj.get("shortDescription")) if obj.get("shortDescription") is not None else None
        })
        return _obj



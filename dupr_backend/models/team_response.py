# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dupr_backend.models.pre_match_rating_and_impact import PreMatchRatingAndImpact
from dupr_backend.models.team_player_response import TeamPlayerResponse
from typing import Optional, Set
from typing_extensions import Self

class TeamResponse(BaseModel):
    """
    TeamResponse
    """ # noqa: E501
    delta: StrictStr
    game1: StrictInt
    game2: StrictInt
    game3: StrictInt
    game4: StrictInt
    game5: StrictInt
    id: Optional[StrictInt] = None
    player1: TeamPlayerResponse
    player2: Optional[TeamPlayerResponse] = None
    pre_match_rating_and_impact: PreMatchRatingAndImpact = Field(alias="preMatchRatingAndImpact")
    serial: StrictInt
    team_rating: StrictStr = Field(alias="teamRating")
    winner: StrictBool
    __properties: ClassVar[List[str]] = ["delta", "game1", "game2", "game3", "game4", "game5", "id", "player1", "player2", "preMatchRatingAndImpact", "serial", "teamRating", "winner"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TeamResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of player1
        if self.player1:
            _dict['player1'] = self.player1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of player2
        if self.player2:
            _dict['player2'] = self.player2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pre_match_rating_and_impact
        if self.pre_match_rating_and_impact:
            _dict['preMatchRatingAndImpact'] = self.pre_match_rating_and_impact.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TeamResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "delta": obj.get("delta"),
            "game1": obj.get("game1"),
            "game2": obj.get("game2"),
            "game3": obj.get("game3"),
            "game4": obj.get("game4"),
            "game5": obj.get("game5"),
            "id": obj.get("id"),
            "player1": TeamPlayerResponse.from_dict(obj["player1"]) if obj.get("player1") is not None else None,
            "player2": TeamPlayerResponse.from_dict(obj["player2"]) if obj.get("player2") is not None else None,
            "preMatchRatingAndImpact": PreMatchRatingAndImpact.from_dict(obj["preMatchRatingAndImpact"]) if obj.get("preMatchRatingAndImpact") is not None else None,
            "serial": obj.get("serial"),
            "teamRating": obj.get("teamRating"),
            "winner": obj.get("winner")
        })
        return _obj



# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from dupr_backend.models.pre_match_rating_and_impact import PreMatchRatingAndImpact
from dupr_backend.models.team_player_response import TeamPlayerResponse

class TeamResponse(BaseModel):
    """
    TeamResponse
    """
    delta: StrictStr = Field(...)
    game1: StrictInt = Field(...)
    game2: StrictInt = Field(...)
    game3: StrictInt = Field(...)
    game4: StrictInt = Field(...)
    game5: StrictInt = Field(...)
    id: Optional[StrictInt] = None
    player1: TeamPlayerResponse = Field(...)
    player2: Optional[TeamPlayerResponse] = None
    pre_match_rating_and_impact: PreMatchRatingAndImpact = Field(..., alias="preMatchRatingAndImpact")
    serial: StrictInt = Field(...)
    team_rating: StrictStr = Field(..., alias="teamRating")
    winner: StrictBool = Field(...)
    __properties = ["delta", "game1", "game2", "game3", "game4", "game5", "id", "player1", "player2", "preMatchRatingAndImpact", "serial", "teamRating", "winner"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TeamResponse:
        """Create an instance of TeamResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of player1
        if self.player1:
            _dict['player1'] = self.player1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of player2
        if self.player2:
            _dict['player2'] = self.player2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pre_match_rating_and_impact
        if self.pre_match_rating_and_impact:
            _dict['preMatchRatingAndImpact'] = self.pre_match_rating_and_impact.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TeamResponse:
        """Create an instance of TeamResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TeamResponse.parse_obj(obj)

        _obj = TeamResponse.parse_obj({
            "delta": obj.get("delta"),
            "game1": obj.get("game1"),
            "game2": obj.get("game2"),
            "game3": obj.get("game3"),
            "game4": obj.get("game4"),
            "game5": obj.get("game5"),
            "id": obj.get("id"),
            "player1": TeamPlayerResponse.from_dict(obj.get("player1")) if obj.get("player1") is not None else None,
            "player2": TeamPlayerResponse.from_dict(obj.get("player2")) if obj.get("player2") is not None else None,
            "pre_match_rating_and_impact": PreMatchRatingAndImpact.from_dict(obj.get("preMatchRatingAndImpact")) if obj.get("preMatchRatingAndImpact") is not None else None,
            "serial": obj.get("serial"),
            "team_rating": obj.get("teamRating"),
            "winner": obj.get("winner")
        })
        return _obj



# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist

class RoleResponse(BaseModel):
    """
    RoleResponse
    """
    id: StrictInt = Field(...)
    permissions: Optional[Dict[str, conlist(StrictStr, unique_items=True)]] = None
    role: StrictStr = Field(...)
    __properties = ["id", "permissions", "role"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RoleResponse:
        """Create an instance of RoleResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in permissions (dict of array)
        _field_dict_of_array = {}
        if self.permissions:
            for _key in self.permissions:
                if self.permissions[_key]:
                    _field_dict_of_array[_key] = [
                        _item.to_dict() for _item in self.permissions[_key]
                    ]
            _dict['permissions'] = _field_dict_of_array
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RoleResponse:
        """Create an instance of RoleResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RoleResponse.parse_obj(obj)

        _obj = RoleResponse.parse_obj({
            "id": obj.get("id"),
            "permissions": obj.get("permissions"),
            "role": obj.get("role")
        })
        return _obj



# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist, validator
from dupr_backend.models.league_content_request import LeagueContentRequest

class EditBracketRequest(BaseModel):
    """
    EditBracketRequest
    """
    age_bracket: Optional[conlist(StrictInt)] = Field(None, alias="ageBracket")
    bracket_id: StrictInt = Field(..., alias="bracketId")
    courts: StrictInt = Field(...)
    custom_code: Optional[StrictStr] = Field(None, alias="customCode")
    description: Optional[LeagueContentRequest] = None
    duration: Optional[conlist(date)] = None
    duration_date_time: Optional[conlist(StrictStr)] = Field(None, alias="durationDateTime")
    elimination: Optional[StrictStr] = None
    format: Optional[StrictStr] = None
    league_id: StrictInt = Field(..., alias="leagueId")
    match_bonus_points: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="matchBonusPoints")
    max_team: Optional[StrictInt] = Field(None, alias="maxTeam")
    member_fee: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="memberFee")
    name: Optional[StrictStr] = None
    non_member_fee: Union[StrictFloat, StrictInt] = Field(..., alias="nonMemberFee")
    player_group: Optional[StrictStr] = Field(None, alias="playerGroup")
    rating_bracket: Optional[conlist(Union[StrictFloat, StrictInt])] = Field(None, alias="ratingBracket")
    registration_date: Optional[conlist(date)] = Field(None, alias="registrationDate")
    registration_date_time: Optional[conlist(StrictStr)] = Field(None, alias="registrationDateTime")
    score_format: StrictInt = Field(..., alias="scoreFormat")
    status: Optional[StrictStr] = None
    time_zone: Optional[StrictStr] = Field(None, alias="timeZone")
    wait_list: StrictInt = Field(..., alias="waitList")
    zone_name: Optional[StrictStr] = Field(None, alias="zoneName")
    __properties = ["ageBracket", "bracketId", "courts", "customCode", "description", "duration", "durationDateTime", "elimination", "format", "leagueId", "matchBonusPoints", "maxTeam", "memberFee", "name", "nonMemberFee", "playerGroup", "ratingBracket", "registrationDate", "registrationDateTime", "scoreFormat", "status", "timeZone", "waitList", "zoneName"]

    @validator('elimination')
    def elimination_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('COMPASS', 'DOUBLE', 'DOUBLE_PREVENTED', 'FLEX', 'ROUND_ROBIN', 'SINGLE'):
            raise ValueError("must be one of enum values ('COMPASS', 'DOUBLE', 'DOUBLE_PREVENTED', 'FLEX', 'ROUND_ROBIN', 'SINGLE')")
        return value

    @validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('DOUBLES', 'SINGLES'):
            raise ValueError("must be one of enum values ('DOUBLES', 'SINGLES')")
        return value

    @validator('player_group')
    def player_group_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('COED', 'MEN', 'MIXED', 'OPEN', 'WOMEN'):
            raise ValueError("must be one of enum values ('COED', 'MEN', 'MIXED', 'OPEN', 'WOMEN')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING'):
            raise ValueError("must be one of enum values ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EditBracketRequest:
        """Create an instance of EditBracketRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EditBracketRequest:
        """Create an instance of EditBracketRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EditBracketRequest.parse_obj(obj)

        _obj = EditBracketRequest.parse_obj({
            "age_bracket": obj.get("ageBracket"),
            "bracket_id": obj.get("bracketId"),
            "courts": obj.get("courts"),
            "custom_code": obj.get("customCode"),
            "description": LeagueContentRequest.from_dict(obj.get("description")) if obj.get("description") is not None else None,
            "duration": obj.get("duration"),
            "duration_date_time": obj.get("durationDateTime"),
            "elimination": obj.get("elimination"),
            "format": obj.get("format"),
            "league_id": obj.get("leagueId"),
            "match_bonus_points": obj.get("matchBonusPoints"),
            "max_team": obj.get("maxTeam"),
            "member_fee": obj.get("memberFee"),
            "name": obj.get("name"),
            "non_member_fee": obj.get("nonMemberFee"),
            "player_group": obj.get("playerGroup"),
            "rating_bracket": obj.get("ratingBracket"),
            "registration_date": obj.get("registrationDate"),
            "registration_date_time": obj.get("registrationDateTime"),
            "score_format": obj.get("scoreFormat"),
            "status": obj.get("status"),
            "time_zone": obj.get("timeZone"),
            "wait_list": obj.get("waitList"),
            "zone_name": obj.get("zoneName")
        })
        return _obj



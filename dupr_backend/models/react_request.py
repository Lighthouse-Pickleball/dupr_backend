# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator

class ReactRequest(BaseModel):
    """
    ReactRequest
    """
    actor: Optional[StrictInt] = Field(None, description="Obfuscated Id of user do the reaction")
    comment: Optional[StrictStr] = Field(None, description="If the react type is comment, then put the contain here")
    id: Optional[StrictStr] = Field(None, description="The post's id")
    images: Optional[conlist(StrictStr)] = None
    matches: Optional[conlist(StrictInt)] = None
    react: Optional[StrictStr] = Field(None, description="type of reaction, if COMMENT then add the contain in the 'comment', else let it empty")
    react_on: Optional[StrictStr] = Field(None, alias="reactOn", description="if react on comment, add this comment getstreamId here, if not lets empty")
    tags: Optional[conlist(StrictInt)] = None
    __properties = ["actor", "comment", "id", "images", "matches", "react", "reactOn", "tags"]

    @validator('react')
    def react_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('COMMENT', 'LIKE'):
            raise ValueError("must be one of enum values ('COMMENT', 'LIKE')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReactRequest:
        """Create an instance of ReactRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReactRequest:
        """Create an instance of ReactRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReactRequest.parse_obj(obj)

        _obj = ReactRequest.parse_obj({
            "actor": obj.get("actor"),
            "comment": obj.get("comment"),
            "id": obj.get("id"),
            "images": obj.get("images"),
            "matches": obj.get("matches"),
            "react": obj.get("react"),
            "react_on": obj.get("reactOn"),
            "tags": obj.get("tags")
        })
        return _obj



# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReactRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actor': 'int',
        'comment': 'str',
        'id': 'str',
        'images': 'list[str]',
        'matches': 'list[int]',
        'react': 'str',
        'react_on': 'str',
        'tags': 'list[int]'
    }

    attribute_map = {
        'actor': 'actor',
        'comment': 'comment',
        'id': 'id',
        'images': 'images',
        'matches': 'matches',
        'react': 'react',
        'react_on': 'reactOn',
        'tags': 'tags'
    }

    def __init__(self, actor=None, comment=None, id=None, images=None, matches=None, react=None, react_on=None, tags=None):  # noqa: E501
        """ReactRequest - a model defined in Swagger"""  # noqa: E501
        self._actor = None
        self._comment = None
        self._id = None
        self._images = None
        self._matches = None
        self._react = None
        self._react_on = None
        self._tags = None
        self.discriminator = None
        if actor is not None:
            self.actor = actor
        if comment is not None:
            self.comment = comment
        if id is not None:
            self.id = id
        if images is not None:
            self.images = images
        if matches is not None:
            self.matches = matches
        if react is not None:
            self.react = react
        if react_on is not None:
            self.react_on = react_on
        if tags is not None:
            self.tags = tags

    @property
    def actor(self):
        """Gets the actor of this ReactRequest.  # noqa: E501

        Obfuscated Id of user do the reaction  # noqa: E501

        :return: The actor of this ReactRequest.  # noqa: E501
        :rtype: int
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this ReactRequest.

        Obfuscated Id of user do the reaction  # noqa: E501

        :param actor: The actor of this ReactRequest.  # noqa: E501
        :type: int
        """

        self._actor = actor

    @property
    def comment(self):
        """Gets the comment of this ReactRequest.  # noqa: E501

        If the react type is comment, then put the contain here  # noqa: E501

        :return: The comment of this ReactRequest.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ReactRequest.

        If the react type is comment, then put the contain here  # noqa: E501

        :param comment: The comment of this ReactRequest.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def id(self):
        """Gets the id of this ReactRequest.  # noqa: E501

        The post's id  # noqa: E501

        :return: The id of this ReactRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReactRequest.

        The post's id  # noqa: E501

        :param id: The id of this ReactRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this ReactRequest.  # noqa: E501


        :return: The images of this ReactRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this ReactRequest.


        :param images: The images of this ReactRequest.  # noqa: E501
        :type: list[str]
        """

        self._images = images

    @property
    def matches(self):
        """Gets the matches of this ReactRequest.  # noqa: E501


        :return: The matches of this ReactRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._matches

    @matches.setter
    def matches(self, matches):
        """Sets the matches of this ReactRequest.


        :param matches: The matches of this ReactRequest.  # noqa: E501
        :type: list[int]
        """

        self._matches = matches

    @property
    def react(self):
        """Gets the react of this ReactRequest.  # noqa: E501

        type of reaction, if COMMENT then add the contain in the 'comment', else let it empty  # noqa: E501

        :return: The react of this ReactRequest.  # noqa: E501
        :rtype: str
        """
        return self._react

    @react.setter
    def react(self, react):
        """Sets the react of this ReactRequest.

        type of reaction, if COMMENT then add the contain in the 'comment', else let it empty  # noqa: E501

        :param react: The react of this ReactRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["COMMENT", "LIKE"]  # noqa: E501
        if react not in allowed_values:
            raise ValueError(
                "Invalid value for `react` ({0}), must be one of {1}"  # noqa: E501
                .format(react, allowed_values)
            )

        self._react = react

    @property
    def react_on(self):
        """Gets the react_on of this ReactRequest.  # noqa: E501

        if react on comment, add this comment getstreamId here, if not lets empty  # noqa: E501

        :return: The react_on of this ReactRequest.  # noqa: E501
        :rtype: str
        """
        return self._react_on

    @react_on.setter
    def react_on(self, react_on):
        """Sets the react_on of this ReactRequest.

        if react on comment, add this comment getstreamId here, if not lets empty  # noqa: E501

        :param react_on: The react_on of this ReactRequest.  # noqa: E501
        :type: str
        """

        self._react_on = react_on

    @property
    def tags(self):
        """Gets the tags of this ReactRequest.  # noqa: E501


        :return: The tags of this ReactRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ReactRequest.


        :param tags: The tags of this ReactRequest.  # noqa: E501
        :type: list[int]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReactRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReactRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlayerRatingHistoryOvertimeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_date': 'date',
        'limit': 'int',
        'offset': 'int',
        'sort_by': 'str',
        'start_date': 'date',
        'type': 'str'
    }

    attribute_map = {
        'end_date': 'endDate',
        'limit': 'limit',
        'offset': 'offset',
        'sort_by': 'sortBy',
        'start_date': 'startDate',
        'type': 'type'
    }

    def __init__(self, end_date=None, limit=None, offset=None, sort_by=None, start_date=None, type=None):  # noqa: E501
        """PlayerRatingHistoryOvertimeRequest - a model defined in Swagger"""  # noqa: E501
        self._end_date = None
        self._limit = None
        self._offset = None
        self._sort_by = None
        self._start_date = None
        self._type = None
        self.discriminator = None
        if end_date is not None:
            self.end_date = end_date
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if sort_by is not None:
            self.sort_by = sort_by
        if start_date is not None:
            self.start_date = start_date
        self.type = type

    @property
    def end_date(self):
        """Gets the end_date of this PlayerRatingHistoryOvertimeRequest.  # noqa: E501

        End date  # noqa: E501

        :return: The end_date of this PlayerRatingHistoryOvertimeRequest.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this PlayerRatingHistoryOvertimeRequest.

        End date  # noqa: E501

        :param end_date: The end_date of this PlayerRatingHistoryOvertimeRequest.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def limit(self):
        """Gets the limit of this PlayerRatingHistoryOvertimeRequest.  # noqa: E501

        Data limitation  # noqa: E501

        :return: The limit of this PlayerRatingHistoryOvertimeRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PlayerRatingHistoryOvertimeRequest.

        Data limitation  # noqa: E501

        :param limit: The limit of this PlayerRatingHistoryOvertimeRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this PlayerRatingHistoryOvertimeRequest.  # noqa: E501

        Data offset  # noqa: E501

        :return: The offset of this PlayerRatingHistoryOvertimeRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PlayerRatingHistoryOvertimeRequest.

        Data offset  # noqa: E501

        :param offset: The offset of this PlayerRatingHistoryOvertimeRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def sort_by(self):
        """Gets the sort_by of this PlayerRatingHistoryOvertimeRequest.  # noqa: E501

        Sort by type  # noqa: E501

        :return: The sort_by of this PlayerRatingHistoryOvertimeRequest.  # noqa: E501
        :rtype: str
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this PlayerRatingHistoryOvertimeRequest.

        Sort by type  # noqa: E501

        :param sort_by: The sort_by of this PlayerRatingHistoryOvertimeRequest.  # noqa: E501
        :type: str
        """

        self._sort_by = sort_by

    @property
    def start_date(self):
        """Gets the start_date of this PlayerRatingHistoryOvertimeRequest.  # noqa: E501

        Start date  # noqa: E501

        :return: The start_date of this PlayerRatingHistoryOvertimeRequest.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this PlayerRatingHistoryOvertimeRequest.

        Start date  # noqa: E501

        :param start_date: The start_date of this PlayerRatingHistoryOvertimeRequest.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def type(self):
        """Gets the type of this PlayerRatingHistoryOvertimeRequest.  # noqa: E501

        Match event format  # noqa: E501

        :return: The type of this PlayerRatingHistoryOvertimeRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PlayerRatingHistoryOvertimeRequest.

        Match event format  # noqa: E501

        :param type: The type of this PlayerRatingHistoryOvertimeRequest.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["DOUBLES", "SINGLES"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlayerRatingHistoryOvertimeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlayerRatingHistoryOvertimeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, validator
from dupr_backend.models.address_response import AddressResponse
from dupr_backend.models.player_rating_response import PlayerRatingResponse
from dupr_backend.models.role_response import RoleResponse
from dupr_backend.models.user_preferences_response import UserPreferencesResponse

class UserResponse(BaseModel):
    """
    UserResponse
    """
    active: StrictBool = Field(...)
    addresses: Optional[conlist(AddressResponse)] = None
    apparel_brand: Optional[StrictStr] = Field(None, alias="apparelBrand")
    birthdate: Optional[StrictStr] = None
    display_username: Optional[StrictBool] = Field(None, alias="displayUsername")
    email: StrictStr = Field(...)
    first_name: StrictStr = Field(..., alias="firstName")
    full_name: StrictStr = Field(..., alias="fullName")
    gender: Optional[StrictStr] = None
    hand: Optional[StrictStr] = None
    id: StrictInt = Field(...)
    image_url: Optional[StrictStr] = Field(None, alias="imageUrl")
    is_valid_email: Optional[StrictBool] = Field(None, alias="isValidEmail")
    is_valid_phone: Optional[StrictBool] = Field(None, alias="isValidPhone")
    iso_code: Optional[StrictStr] = Field(None, alias="isoCode")
    last_name: StrictStr = Field(..., alias="lastName")
    lucra_connected: Optional[StrictBool] = Field(None, alias="lucraConnected")
    paddle_brand: Optional[StrictStr] = Field(None, alias="paddleBrand")
    phone: Optional[StrictStr] = None
    preferred_ball: Optional[StrictStr] = Field(None, alias="preferredBall")
    preferred_side: Optional[StrictStr] = Field(None, alias="preferredSide")
    referral_code: Optional[StrictStr] = Field(None, alias="referralCode")
    restricted: Optional[StrictBool] = None
    role: Optional[RoleResponse] = None
    shoe_brand: Optional[StrictStr] = Field(None, alias="shoeBrand")
    stats: Optional[PlayerRatingResponse] = None
    user_preferences: Optional[UserPreferencesResponse] = Field(None, alias="userPreferences")
    username: Optional[StrictStr] = None
    __properties = ["active", "addresses", "apparelBrand", "birthdate", "displayUsername", "email", "firstName", "fullName", "gender", "hand", "id", "imageUrl", "isValidEmail", "isValidPhone", "isoCode", "lastName", "lucraConnected", "paddleBrand", "phone", "preferredBall", "preferredSide", "referralCode", "restricted", "role", "shoeBrand", "stats", "userPreferences", "username"]

    @validator('gender')
    def gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('FEMALE', 'MALE'):
            raise ValueError("must be one of enum values ('FEMALE', 'MALE')")
        return value

    @validator('hand')
    def hand_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('BOTH', 'LEFT', 'NONE', 'RIGHT'):
            raise ValueError("must be one of enum values ('BOTH', 'LEFT', 'NONE', 'RIGHT')")
        return value

    @validator('preferred_side')
    def preferred_side_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('EITHER', 'LEFT', 'RIGHT'):
            raise ValueError("must be one of enum values ('EITHER', 'LEFT', 'RIGHT')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserResponse:
        """Create an instance of UserResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in addresses (list)
        _items = []
        if self.addresses:
            for _item in self.addresses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['addresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of role
        if self.role:
            _dict['role'] = self.role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_preferences
        if self.user_preferences:
            _dict['userPreferences'] = self.user_preferences.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserResponse:
        """Create an instance of UserResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserResponse.parse_obj(obj)

        _obj = UserResponse.parse_obj({
            "active": obj.get("active"),
            "addresses": [AddressResponse.from_dict(_item) for _item in obj.get("addresses")] if obj.get("addresses") is not None else None,
            "apparel_brand": obj.get("apparelBrand"),
            "birthdate": obj.get("birthdate"),
            "display_username": obj.get("displayUsername"),
            "email": obj.get("email"),
            "first_name": obj.get("firstName"),
            "full_name": obj.get("fullName"),
            "gender": obj.get("gender"),
            "hand": obj.get("hand"),
            "id": obj.get("id"),
            "image_url": obj.get("imageUrl"),
            "is_valid_email": obj.get("isValidEmail"),
            "is_valid_phone": obj.get("isValidPhone"),
            "iso_code": obj.get("isoCode"),
            "last_name": obj.get("lastName"),
            "lucra_connected": obj.get("lucraConnected"),
            "paddle_brand": obj.get("paddleBrand"),
            "phone": obj.get("phone"),
            "preferred_ball": obj.get("preferredBall"),
            "preferred_side": obj.get("preferredSide"),
            "referral_code": obj.get("referralCode"),
            "restricted": obj.get("restricted"),
            "role": RoleResponse.from_dict(obj.get("role")) if obj.get("role") is not None else None,
            "shoe_brand": obj.get("shoeBrand"),
            "stats": PlayerRatingResponse.from_dict(obj.get("stats")) if obj.get("stats") is not None else None,
            "user_preferences": UserPreferencesResponse.from_dict(obj.get("userPreferences")) if obj.get("userPreferences") is not None else None,
            "username": obj.get("username")
        })
        return _obj



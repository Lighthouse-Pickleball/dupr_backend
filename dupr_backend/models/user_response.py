# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'addresses': 'list[AddressResponse]',
        'apparel_brand': 'str',
        'birthdate': 'str',
        'display_username': 'bool',
        'email': 'str',
        'first_name': 'str',
        'full_name': 'str',
        'gender': 'str',
        'hand': 'str',
        'id': 'int',
        'image_url': 'str',
        'is_valid_email': 'bool',
        'is_valid_phone': 'bool',
        'iso_code': 'str',
        'last_name': 'str',
        'lucra_connected': 'bool',
        'paddle_brand': 'str',
        'phone': 'str',
        'preferred_ball': 'str',
        'preferred_side': 'str',
        'referral_code': 'str',
        'restricted': 'bool',
        'role': 'RoleResponse',
        'shoe_brand': 'str',
        'stats': 'PlayerRatingResponse',
        'user_preferences': 'UserPreferencesResponse',
        'username': 'str'
    }

    attribute_map = {
        'active': 'active',
        'addresses': 'addresses',
        'apparel_brand': 'apparelBrand',
        'birthdate': 'birthdate',
        'display_username': 'displayUsername',
        'email': 'email',
        'first_name': 'firstName',
        'full_name': 'fullName',
        'gender': 'gender',
        'hand': 'hand',
        'id': 'id',
        'image_url': 'imageUrl',
        'is_valid_email': 'isValidEmail',
        'is_valid_phone': 'isValidPhone',
        'iso_code': 'isoCode',
        'last_name': 'lastName',
        'lucra_connected': 'lucraConnected',
        'paddle_brand': 'paddleBrand',
        'phone': 'phone',
        'preferred_ball': 'preferredBall',
        'preferred_side': 'preferredSide',
        'referral_code': 'referralCode',
        'restricted': 'restricted',
        'role': 'role',
        'shoe_brand': 'shoeBrand',
        'stats': 'stats',
        'user_preferences': 'userPreferences',
        'username': 'username'
    }

    def __init__(self, active=None, addresses=None, apparel_brand=None, birthdate=None, display_username=None, email=None, first_name=None, full_name=None, gender=None, hand=None, id=None, image_url=None, is_valid_email=None, is_valid_phone=None, iso_code=None, last_name=None, lucra_connected=None, paddle_brand=None, phone=None, preferred_ball=None, preferred_side=None, referral_code=None, restricted=None, role=None, shoe_brand=None, stats=None, user_preferences=None, username=None):  # noqa: E501
        """UserResponse - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._addresses = None
        self._apparel_brand = None
        self._birthdate = None
        self._display_username = None
        self._email = None
        self._first_name = None
        self._full_name = None
        self._gender = None
        self._hand = None
        self._id = None
        self._image_url = None
        self._is_valid_email = None
        self._is_valid_phone = None
        self._iso_code = None
        self._last_name = None
        self._lucra_connected = None
        self._paddle_brand = None
        self._phone = None
        self._preferred_ball = None
        self._preferred_side = None
        self._referral_code = None
        self._restricted = None
        self._role = None
        self._shoe_brand = None
        self._stats = None
        self._user_preferences = None
        self._username = None
        self.discriminator = None
        self.active = active
        if addresses is not None:
            self.addresses = addresses
        if apparel_brand is not None:
            self.apparel_brand = apparel_brand
        if birthdate is not None:
            self.birthdate = birthdate
        if display_username is not None:
            self.display_username = display_username
        self.email = email
        self.first_name = first_name
        self.full_name = full_name
        if gender is not None:
            self.gender = gender
        if hand is not None:
            self.hand = hand
        self.id = id
        if image_url is not None:
            self.image_url = image_url
        if is_valid_email is not None:
            self.is_valid_email = is_valid_email
        if is_valid_phone is not None:
            self.is_valid_phone = is_valid_phone
        if iso_code is not None:
            self.iso_code = iso_code
        self.last_name = last_name
        if lucra_connected is not None:
            self.lucra_connected = lucra_connected
        if paddle_brand is not None:
            self.paddle_brand = paddle_brand
        if phone is not None:
            self.phone = phone
        if preferred_ball is not None:
            self.preferred_ball = preferred_ball
        if preferred_side is not None:
            self.preferred_side = preferred_side
        if referral_code is not None:
            self.referral_code = referral_code
        if restricted is not None:
            self.restricted = restricted
        if role is not None:
            self.role = role
        if shoe_brand is not None:
            self.shoe_brand = shoe_brand
        if stats is not None:
            self.stats = stats
        if user_preferences is not None:
            self.user_preferences = user_preferences
        if username is not None:
            self.username = username

    @property
    def active(self):
        """Gets the active of this UserResponse.  # noqa: E501


        :return: The active of this UserResponse.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this UserResponse.


        :param active: The active of this UserResponse.  # noqa: E501
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def addresses(self):
        """Gets the addresses of this UserResponse.  # noqa: E501


        :return: The addresses of this UserResponse.  # noqa: E501
        :rtype: list[AddressResponse]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this UserResponse.


        :param addresses: The addresses of this UserResponse.  # noqa: E501
        :type: list[AddressResponse]
        """

        self._addresses = addresses

    @property
    def apparel_brand(self):
        """Gets the apparel_brand of this UserResponse.  # noqa: E501


        :return: The apparel_brand of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._apparel_brand

    @apparel_brand.setter
    def apparel_brand(self, apparel_brand):
        """Sets the apparel_brand of this UserResponse.


        :param apparel_brand: The apparel_brand of this UserResponse.  # noqa: E501
        :type: str
        """

        self._apparel_brand = apparel_brand

    @property
    def birthdate(self):
        """Gets the birthdate of this UserResponse.  # noqa: E501


        :return: The birthdate of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate):
        """Sets the birthdate of this UserResponse.


        :param birthdate: The birthdate of this UserResponse.  # noqa: E501
        :type: str
        """

        self._birthdate = birthdate

    @property
    def display_username(self):
        """Gets the display_username of this UserResponse.  # noqa: E501


        :return: The display_username of this UserResponse.  # noqa: E501
        :rtype: bool
        """
        return self._display_username

    @display_username.setter
    def display_username(self, display_username):
        """Sets the display_username of this UserResponse.


        :param display_username: The display_username of this UserResponse.  # noqa: E501
        :type: bool
        """

        self._display_username = display_username

    @property
    def email(self):
        """Gets the email of this UserResponse.  # noqa: E501


        :return: The email of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserResponse.


        :param email: The email of this UserResponse.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UserResponse.  # noqa: E501


        :return: The first_name of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserResponse.


        :param first_name: The first_name of this UserResponse.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def full_name(self):
        """Gets the full_name of this UserResponse.  # noqa: E501


        :return: The full_name of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this UserResponse.


        :param full_name: The full_name of this UserResponse.  # noqa: E501
        :type: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")  # noqa: E501

        self._full_name = full_name

    @property
    def gender(self):
        """Gets the gender of this UserResponse.  # noqa: E501


        :return: The gender of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this UserResponse.


        :param gender: The gender of this UserResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["FEMALE", "MALE"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def hand(self):
        """Gets the hand of this UserResponse.  # noqa: E501


        :return: The hand of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._hand

    @hand.setter
    def hand(self, hand):
        """Sets the hand of this UserResponse.


        :param hand: The hand of this UserResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["BOTH", "LEFT", "NONE", "RIGHT"]  # noqa: E501
        if hand not in allowed_values:
            raise ValueError(
                "Invalid value for `hand` ({0}), must be one of {1}"  # noqa: E501
                .format(hand, allowed_values)
            )

        self._hand = hand

    @property
    def id(self):
        """Gets the id of this UserResponse.  # noqa: E501


        :return: The id of this UserResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserResponse.


        :param id: The id of this UserResponse.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this UserResponse.  # noqa: E501


        :return: The image_url of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this UserResponse.


        :param image_url: The image_url of this UserResponse.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def is_valid_email(self):
        """Gets the is_valid_email of this UserResponse.  # noqa: E501


        :return: The is_valid_email of this UserResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid_email

    @is_valid_email.setter
    def is_valid_email(self, is_valid_email):
        """Sets the is_valid_email of this UserResponse.


        :param is_valid_email: The is_valid_email of this UserResponse.  # noqa: E501
        :type: bool
        """

        self._is_valid_email = is_valid_email

    @property
    def is_valid_phone(self):
        """Gets the is_valid_phone of this UserResponse.  # noqa: E501


        :return: The is_valid_phone of this UserResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid_phone

    @is_valid_phone.setter
    def is_valid_phone(self, is_valid_phone):
        """Sets the is_valid_phone of this UserResponse.


        :param is_valid_phone: The is_valid_phone of this UserResponse.  # noqa: E501
        :type: bool
        """

        self._is_valid_phone = is_valid_phone

    @property
    def iso_code(self):
        """Gets the iso_code of this UserResponse.  # noqa: E501


        :return: The iso_code of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._iso_code

    @iso_code.setter
    def iso_code(self, iso_code):
        """Sets the iso_code of this UserResponse.


        :param iso_code: The iso_code of this UserResponse.  # noqa: E501
        :type: str
        """

        self._iso_code = iso_code

    @property
    def last_name(self):
        """Gets the last_name of this UserResponse.  # noqa: E501


        :return: The last_name of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserResponse.


        :param last_name: The last_name of this UserResponse.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def lucra_connected(self):
        """Gets the lucra_connected of this UserResponse.  # noqa: E501


        :return: The lucra_connected of this UserResponse.  # noqa: E501
        :rtype: bool
        """
        return self._lucra_connected

    @lucra_connected.setter
    def lucra_connected(self, lucra_connected):
        """Sets the lucra_connected of this UserResponse.


        :param lucra_connected: The lucra_connected of this UserResponse.  # noqa: E501
        :type: bool
        """

        self._lucra_connected = lucra_connected

    @property
    def paddle_brand(self):
        """Gets the paddle_brand of this UserResponse.  # noqa: E501


        :return: The paddle_brand of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._paddle_brand

    @paddle_brand.setter
    def paddle_brand(self, paddle_brand):
        """Sets the paddle_brand of this UserResponse.


        :param paddle_brand: The paddle_brand of this UserResponse.  # noqa: E501
        :type: str
        """

        self._paddle_brand = paddle_brand

    @property
    def phone(self):
        """Gets the phone of this UserResponse.  # noqa: E501


        :return: The phone of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this UserResponse.


        :param phone: The phone of this UserResponse.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def preferred_ball(self):
        """Gets the preferred_ball of this UserResponse.  # noqa: E501


        :return: The preferred_ball of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._preferred_ball

    @preferred_ball.setter
    def preferred_ball(self, preferred_ball):
        """Sets the preferred_ball of this UserResponse.


        :param preferred_ball: The preferred_ball of this UserResponse.  # noqa: E501
        :type: str
        """

        self._preferred_ball = preferred_ball

    @property
    def preferred_side(self):
        """Gets the preferred_side of this UserResponse.  # noqa: E501


        :return: The preferred_side of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._preferred_side

    @preferred_side.setter
    def preferred_side(self, preferred_side):
        """Sets the preferred_side of this UserResponse.


        :param preferred_side: The preferred_side of this UserResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["EITHER", "LEFT", "RIGHT"]  # noqa: E501
        if preferred_side not in allowed_values:
            raise ValueError(
                "Invalid value for `preferred_side` ({0}), must be one of {1}"  # noqa: E501
                .format(preferred_side, allowed_values)
            )

        self._preferred_side = preferred_side

    @property
    def referral_code(self):
        """Gets the referral_code of this UserResponse.  # noqa: E501


        :return: The referral_code of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._referral_code

    @referral_code.setter
    def referral_code(self, referral_code):
        """Sets the referral_code of this UserResponse.


        :param referral_code: The referral_code of this UserResponse.  # noqa: E501
        :type: str
        """

        self._referral_code = referral_code

    @property
    def restricted(self):
        """Gets the restricted of this UserResponse.  # noqa: E501


        :return: The restricted of this UserResponse.  # noqa: E501
        :rtype: bool
        """
        return self._restricted

    @restricted.setter
    def restricted(self, restricted):
        """Sets the restricted of this UserResponse.


        :param restricted: The restricted of this UserResponse.  # noqa: E501
        :type: bool
        """

        self._restricted = restricted

    @property
    def role(self):
        """Gets the role of this UserResponse.  # noqa: E501


        :return: The role of this UserResponse.  # noqa: E501
        :rtype: RoleResponse
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UserResponse.


        :param role: The role of this UserResponse.  # noqa: E501
        :type: RoleResponse
        """

        self._role = role

    @property
    def shoe_brand(self):
        """Gets the shoe_brand of this UserResponse.  # noqa: E501


        :return: The shoe_brand of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._shoe_brand

    @shoe_brand.setter
    def shoe_brand(self, shoe_brand):
        """Sets the shoe_brand of this UserResponse.


        :param shoe_brand: The shoe_brand of this UserResponse.  # noqa: E501
        :type: str
        """

        self._shoe_brand = shoe_brand

    @property
    def stats(self):
        """Gets the stats of this UserResponse.  # noqa: E501


        :return: The stats of this UserResponse.  # noqa: E501
        :rtype: PlayerRatingResponse
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this UserResponse.


        :param stats: The stats of this UserResponse.  # noqa: E501
        :type: PlayerRatingResponse
        """

        self._stats = stats

    @property
    def user_preferences(self):
        """Gets the user_preferences of this UserResponse.  # noqa: E501


        :return: The user_preferences of this UserResponse.  # noqa: E501
        :rtype: UserPreferencesResponse
        """
        return self._user_preferences

    @user_preferences.setter
    def user_preferences(self, user_preferences):
        """Sets the user_preferences of this UserResponse.


        :param user_preferences: The user_preferences of this UserResponse.  # noqa: E501
        :type: UserPreferencesResponse
        """

        self._user_preferences = user_preferences

    @property
    def username(self):
        """Gets the username of this UserResponse.  # noqa: E501


        :return: The username of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserResponse.


        :param username: The username of this UserResponse.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

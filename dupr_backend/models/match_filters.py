# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MatchFilters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_date': 'DateRange',
        'event_format': 'list[str]',
        'event_name': 'str',
        'match_status': 'list[str]',
        'player_id': 'int'
    }

    attribute_map = {
        'event_date': 'eventDate',
        'event_format': 'eventFormat',
        'event_name': 'eventName',
        'match_status': 'matchStatus',
        'player_id': 'playerId'
    }

    def __init__(self, event_date=None, event_format=None, event_name=None, match_status=None, player_id=None):  # noqa: E501
        """MatchFilters - a model defined in Swagger"""  # noqa: E501
        self._event_date = None
        self._event_format = None
        self._event_name = None
        self._match_status = None
        self._player_id = None
        self.discriminator = None
        if event_date is not None:
            self.event_date = event_date
        if event_format is not None:
            self.event_format = event_format
        if event_name is not None:
            self.event_name = event_name
        if match_status is not None:
            self.match_status = match_status
        if player_id is not None:
            self.player_id = player_id

    @property
    def event_date(self):
        """Gets the event_date of this MatchFilters.  # noqa: E501


        :return: The event_date of this MatchFilters.  # noqa: E501
        :rtype: DateRange
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this MatchFilters.


        :param event_date: The event_date of this MatchFilters.  # noqa: E501
        :type: DateRange
        """

        self._event_date = event_date

    @property
    def event_format(self):
        """Gets the event_format of this MatchFilters.  # noqa: E501


        :return: The event_format of this MatchFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._event_format

    @event_format.setter
    def event_format(self, event_format):
        """Sets the event_format of this MatchFilters.


        :param event_format: The event_format of this MatchFilters.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["DOUBLES", "SINGLES"]  # noqa: E501
        if not set(event_format).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `event_format` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(event_format) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._event_format = event_format

    @property
    def event_name(self):
        """Gets the event_name of this MatchFilters.  # noqa: E501


        :return: The event_name of this MatchFilters.  # noqa: E501
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this MatchFilters.


        :param event_name: The event_name of this MatchFilters.  # noqa: E501
        :type: str
        """

        self._event_name = event_name

    @property
    def match_status(self):
        """Gets the match_status of this MatchFilters.  # noqa: E501


        :return: The match_status of this MatchFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._match_status

    @match_status.setter
    def match_status(self, match_status):
        """Sets the match_status of this MatchFilters.


        :param match_status: The match_status of this MatchFilters.  # noqa: E501
        :type: list[str]
        """

        self._match_status = match_status

    @property
    def player_id(self):
        """Gets the player_id of this MatchFilters.  # noqa: E501


        :return: The player_id of this MatchFilters.  # noqa: E501
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this MatchFilters.


        :param player_id: The player_id of this MatchFilters.  # noqa: E501
        :type: int
        """

        self._player_id = player_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MatchFilters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchFilters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist, validator
from dupr_backend.models.club_members_age_filter import ClubMembersAgeFilter
from dupr_backend.models.club_members_rating_filter import ClubMembersRatingFilter

class ClubMembersSearchFilter(BaseModel):
    """
    ClubMembersSearchFilter
    """
    age: Optional[ClubMembersAgeFilter] = None
    club_invitation_type: Optional[conlist(StrictStr)] = Field(None, alias="clubInvitationType")
    gender: Optional[StrictStr] = None
    lat: Optional[Union[StrictFloat, StrictInt]] = None
    lng: Optional[Union[StrictFloat, StrictInt]] = None
    radius_in_meters: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="radiusInMeters")
    rating: Optional[ClubMembersRatingFilter] = None
    status: Optional[StrictStr] = None
    __properties = ["age", "clubInvitationType", "gender", "lat", "lng", "radiusInMeters", "rating", "status"]

    @validator('club_invitation_type')
    def club_invitation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('INVITATION', 'INVITATION_CSV', 'PARTNER_INVITE', 'REQUEST'):
                raise ValueError("each list item must be one of ('INVITATION', 'INVITATION_CSV', 'PARTNER_INVITE', 'REQUEST')")
        return value

    @validator('gender')
    def gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('FEMALE', 'MALE'):
            raise ValueError("must be one of enum values ('FEMALE', 'MALE')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING'):
            raise ValueError("must be one of enum values ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClubMembersSearchFilter:
        """Create an instance of ClubMembersSearchFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of age
        if self.age:
            _dict['age'] = self.age.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rating
        if self.rating:
            _dict['rating'] = self.rating.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClubMembersSearchFilter:
        """Create an instance of ClubMembersSearchFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClubMembersSearchFilter.parse_obj(obj)

        _obj = ClubMembersSearchFilter.parse_obj({
            "age": ClubMembersAgeFilter.from_dict(obj.get("age")) if obj.get("age") is not None else None,
            "club_invitation_type": obj.get("clubInvitationType"),
            "gender": obj.get("gender"),
            "lat": obj.get("lat"),
            "lng": obj.get("lng"),
            "radius_in_meters": obj.get("radiusInMeters"),
            "rating": ClubMembersRatingFilter.from_dict(obj.get("rating")) if obj.get("rating") is not None else None,
            "status": obj.get("status")
        })
        return _obj



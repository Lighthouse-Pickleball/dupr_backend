# coding: utf-8

"""
    DUPR Backend APIs

    Internal RESTful APIs to access DUPR ratings, users and provide matches.

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from dupr_backend.models.club_members_age_filter import ClubMembersAgeFilter
from dupr_backend.models.club_members_rating_filter import ClubMembersRatingFilter
from typing import Optional, Set
from typing_extensions import Self

class ClubMembersSearchFilter(BaseModel):
    """
    ClubMembersSearchFilter
    """ # noqa: E501
    gender: Optional[StrictStr] = None
    age: Optional[ClubMembersAgeFilter] = None
    rating: Optional[ClubMembersRatingFilter] = None
    status: Optional[StrictStr] = None
    lat: Optional[Union[StrictFloat, StrictInt]] = None
    lng: Optional[Union[StrictFloat, StrictInt]] = None
    radius_in_meters: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="radiusInMeters")
    club_invitation_type: Optional[List[StrictStr]] = Field(default=None, alias="clubInvitationType")
    __properties: ClassVar[List[str]] = ["gender", "age", "rating", "status", "lat", "lng", "radiusInMeters", "clubInvitationType"]

    @field_validator('gender')
    def gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MALE', 'FEMALE']):
            raise ValueError("must be one of enum values ('MALE', 'FEMALE')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVE', 'INACTIVE', 'UPCOMING', 'IN_PROGRESS', 'COMPLETE', 'CANCELLED', 'NOT_CONFIRMED', 'INVITED', 'CONFIRMED', 'MATCH_BYE', 'PENDING', 'FORFEITED', 'DELETED', 'ONGOING', 'SUSPENDED_TOS_13']):
            raise ValueError("must be one of enum values ('ACTIVE', 'INACTIVE', 'UPCOMING', 'IN_PROGRESS', 'COMPLETE', 'CANCELLED', 'NOT_CONFIRMED', 'INVITED', 'CONFIRMED', 'MATCH_BYE', 'PENDING', 'FORFEITED', 'DELETED', 'ONGOING', 'SUSPENDED_TOS_13')")
        return value

    @field_validator('club_invitation_type')
    def club_invitation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['INVITATION', 'REQUEST', 'INVITATION_CSV', 'PARTNER_INVITE']):
                raise ValueError("each list item must be one of ('INVITATION', 'REQUEST', 'INVITATION_CSV', 'PARTNER_INVITE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClubMembersSearchFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of age
        if self.age:
            _dict['age'] = self.age.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rating
        if self.rating:
            _dict['rating'] = self.rating.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClubMembersSearchFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gender": obj.get("gender"),
            "age": ClubMembersAgeFilter.from_dict(obj["age"]) if obj.get("age") is not None else None,
            "rating": ClubMembersRatingFilter.from_dict(obj["rating"]) if obj.get("rating") is not None else None,
            "status": obj.get("status"),
            "lat": obj.get("lat"),
            "lng": obj.get("lng"),
            "radiusInMeters": obj.get("radiusInMeters"),
            "clubInvitationType": obj.get("clubInvitationType")
        })
        return _obj



# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserPreferencesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable_email': 'bool',
        'enable_newsletter': 'bool',
        'enable_privacy': 'bool',
        'enable_push': 'bool',
        'enable_sms': 'bool'
    }

    attribute_map = {
        'enable_email': 'enableEmail',
        'enable_newsletter': 'enableNewsletter',
        'enable_privacy': 'enablePrivacy',
        'enable_push': 'enablePush',
        'enable_sms': 'enableSms'
    }

    def __init__(self, enable_email=None, enable_newsletter=None, enable_privacy=None, enable_push=None, enable_sms=None):  # noqa: E501
        """UserPreferencesRequest - a model defined in Swagger"""  # noqa: E501
        self._enable_email = None
        self._enable_newsletter = None
        self._enable_privacy = None
        self._enable_push = None
        self._enable_sms = None
        self.discriminator = None
        if enable_email is not None:
            self.enable_email = enable_email
        if enable_newsletter is not None:
            self.enable_newsletter = enable_newsletter
        if enable_privacy is not None:
            self.enable_privacy = enable_privacy
        if enable_push is not None:
            self.enable_push = enable_push
        if enable_sms is not None:
            self.enable_sms = enable_sms

    @property
    def enable_email(self):
        """Gets the enable_email of this UserPreferencesRequest.  # noqa: E501


        :return: The enable_email of this UserPreferencesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable_email

    @enable_email.setter
    def enable_email(self, enable_email):
        """Sets the enable_email of this UserPreferencesRequest.


        :param enable_email: The enable_email of this UserPreferencesRequest.  # noqa: E501
        :type: bool
        """

        self._enable_email = enable_email

    @property
    def enable_newsletter(self):
        """Gets the enable_newsletter of this UserPreferencesRequest.  # noqa: E501


        :return: The enable_newsletter of this UserPreferencesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable_newsletter

    @enable_newsletter.setter
    def enable_newsletter(self, enable_newsletter):
        """Sets the enable_newsletter of this UserPreferencesRequest.


        :param enable_newsletter: The enable_newsletter of this UserPreferencesRequest.  # noqa: E501
        :type: bool
        """

        self._enable_newsletter = enable_newsletter

    @property
    def enable_privacy(self):
        """Gets the enable_privacy of this UserPreferencesRequest.  # noqa: E501


        :return: The enable_privacy of this UserPreferencesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable_privacy

    @enable_privacy.setter
    def enable_privacy(self, enable_privacy):
        """Sets the enable_privacy of this UserPreferencesRequest.


        :param enable_privacy: The enable_privacy of this UserPreferencesRequest.  # noqa: E501
        :type: bool
        """

        self._enable_privacy = enable_privacy

    @property
    def enable_push(self):
        """Gets the enable_push of this UserPreferencesRequest.  # noqa: E501


        :return: The enable_push of this UserPreferencesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable_push

    @enable_push.setter
    def enable_push(self, enable_push):
        """Sets the enable_push of this UserPreferencesRequest.


        :param enable_push: The enable_push of this UserPreferencesRequest.  # noqa: E501
        :type: bool
        """

        self._enable_push = enable_push

    @property
    def enable_sms(self):
        """Gets the enable_sms of this UserPreferencesRequest.  # noqa: E501


        :return: The enable_sms of this UserPreferencesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable_sms

    @enable_sms.setter
    def enable_sms(self, enable_sms):
        """Sets the enable_sms of this UserPreferencesRequest.


        :param enable_sms: The enable_sms of this UserPreferencesRequest.  # noqa: E501
        :type: bool
        """

        self._enable_sms = enable_sms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserPreferencesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserPreferencesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

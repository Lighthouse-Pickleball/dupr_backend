# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool

class UserPreferencesRequest(BaseModel):
    """
    UserPreferencesRequest
    """
    enable_email: Optional[StrictBool] = Field(None, alias="enableEmail")
    enable_newsletter: Optional[StrictBool] = Field(None, alias="enableNewsletter")
    enable_privacy: Optional[StrictBool] = Field(None, alias="enablePrivacy")
    enable_push: Optional[StrictBool] = Field(None, alias="enablePush")
    enable_sms: Optional[StrictBool] = Field(None, alias="enableSms")
    __properties = ["enableEmail", "enableNewsletter", "enablePrivacy", "enablePush", "enableSms"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserPreferencesRequest:
        """Create an instance of UserPreferencesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserPreferencesRequest:
        """Create an instance of UserPreferencesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserPreferencesRequest.parse_obj(obj)

        _obj = UserPreferencesRequest.parse_obj({
            "enable_email": obj.get("enableEmail"),
            "enable_newsletter": obj.get("enableNewsletter"),
            "enable_privacy": obj.get("enablePrivacy"),
            "enable_push": obj.get("enablePush"),
            "enable_sms": obj.get("enableSms")
        })
        return _obj



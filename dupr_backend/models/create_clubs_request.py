# coding: utf-8

"""
    DUPR Backend APIs

    Internal RESTful APIs to access DUPR ratings, users and provide matches.

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateClubsRequest(BaseModel):
    """
    CreateClubsRequest
    """ # noqa: E501
    place_id: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="placeId")
    club_name: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="clubName")
    phone_number: Optional[StrictStr] = Field(default=None, alias="phoneNumber")
    director_name: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="directorName")
    director_email: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="directorEmail")
    director_phone: Optional[StrictStr] = Field(default=None, alias="directorPhone")
    dupr_id: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="duprId")
    revenue_type: StrictStr = Field(alias="revenueType")
    revenue_value: Union[StrictFloat, StrictInt] = Field(alias="revenueValue")
    currency_code: StrictStr = Field(alias="currencyCode")
    iso_code_club: StrictStr = Field(alias="isoCodeClub")
    iso_code_director: StrictStr = Field(alias="isoCodeDirector")
    __properties: ClassVar[List[str]] = ["placeId", "clubName", "phoneNumber", "directorName", "directorEmail", "directorPhone", "duprId", "revenueType", "revenueValue", "currencyCode", "isoCodeClub", "isoCodeDirector"]

    @field_validator('revenue_type')
    def revenue_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ABSOLUTE', 'RELATIVE']):
            raise ValueError("must be one of enum values ('ABSOLUTE', 'RELATIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateClubsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateClubsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "placeId": obj.get("placeId"),
            "clubName": obj.get("clubName"),
            "phoneNumber": obj.get("phoneNumber"),
            "directorName": obj.get("directorName"),
            "directorEmail": obj.get("directorEmail"),
            "directorPhone": obj.get("directorPhone"),
            "duprId": obj.get("duprId"),
            "revenueType": obj.get("revenueType"),
            "revenueValue": obj.get("revenueValue"),
            "currencyCode": obj.get("currencyCode"),
            "isoCodeClub": obj.get("isoCodeClub"),
            "isoCodeDirector": obj.get("isoCodeDirector")
        })
        return _obj



# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateClubsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'club_name': 'str',
        'currency_code': 'str',
        'director_email': 'str',
        'director_name': 'str',
        'director_phone': 'str',
        'dupr_id': 'str',
        'iso_code_club': 'str',
        'iso_code_director': 'str',
        'phone_number': 'str',
        'place_id': 'str',
        'revenue_type': 'str',
        'revenue_value': 'float'
    }

    attribute_map = {
        'club_name': 'clubName',
        'currency_code': 'currencyCode',
        'director_email': 'directorEmail',
        'director_name': 'directorName',
        'director_phone': 'directorPhone',
        'dupr_id': 'duprId',
        'iso_code_club': 'isoCodeClub',
        'iso_code_director': 'isoCodeDirector',
        'phone_number': 'phoneNumber',
        'place_id': 'placeId',
        'revenue_type': 'revenueType',
        'revenue_value': 'revenueValue'
    }

    def __init__(self, club_name=None, currency_code=None, director_email=None, director_name=None, director_phone=None, dupr_id=None, iso_code_club=None, iso_code_director=None, phone_number=None, place_id=None, revenue_type=None, revenue_value=None):  # noqa: E501
        """CreateClubsRequest - a model defined in Swagger"""  # noqa: E501
        self._club_name = None
        self._currency_code = None
        self._director_email = None
        self._director_name = None
        self._director_phone = None
        self._dupr_id = None
        self._iso_code_club = None
        self._iso_code_director = None
        self._phone_number = None
        self._place_id = None
        self._revenue_type = None
        self._revenue_value = None
        self.discriminator = None
        self.club_name = club_name
        self.currency_code = currency_code
        self.director_email = director_email
        self.director_name = director_name
        if director_phone is not None:
            self.director_phone = director_phone
        self.dupr_id = dupr_id
        self.iso_code_club = iso_code_club
        self.iso_code_director = iso_code_director
        if phone_number is not None:
            self.phone_number = phone_number
        self.place_id = place_id
        self.revenue_type = revenue_type
        self.revenue_value = revenue_value

    @property
    def club_name(self):
        """Gets the club_name of this CreateClubsRequest.  # noqa: E501


        :return: The club_name of this CreateClubsRequest.  # noqa: E501
        :rtype: str
        """
        return self._club_name

    @club_name.setter
    def club_name(self, club_name):
        """Sets the club_name of this CreateClubsRequest.


        :param club_name: The club_name of this CreateClubsRequest.  # noqa: E501
        :type: str
        """
        if club_name is None:
            raise ValueError("Invalid value for `club_name`, must not be `None`")  # noqa: E501

        self._club_name = club_name

    @property
    def currency_code(self):
        """Gets the currency_code of this CreateClubsRequest.  # noqa: E501


        :return: The currency_code of this CreateClubsRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CreateClubsRequest.


        :param currency_code: The currency_code of this CreateClubsRequest.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def director_email(self):
        """Gets the director_email of this CreateClubsRequest.  # noqa: E501


        :return: The director_email of this CreateClubsRequest.  # noqa: E501
        :rtype: str
        """
        return self._director_email

    @director_email.setter
    def director_email(self, director_email):
        """Sets the director_email of this CreateClubsRequest.


        :param director_email: The director_email of this CreateClubsRequest.  # noqa: E501
        :type: str
        """
        if director_email is None:
            raise ValueError("Invalid value for `director_email`, must not be `None`")  # noqa: E501

        self._director_email = director_email

    @property
    def director_name(self):
        """Gets the director_name of this CreateClubsRequest.  # noqa: E501


        :return: The director_name of this CreateClubsRequest.  # noqa: E501
        :rtype: str
        """
        return self._director_name

    @director_name.setter
    def director_name(self, director_name):
        """Sets the director_name of this CreateClubsRequest.


        :param director_name: The director_name of this CreateClubsRequest.  # noqa: E501
        :type: str
        """
        if director_name is None:
            raise ValueError("Invalid value for `director_name`, must not be `None`")  # noqa: E501

        self._director_name = director_name

    @property
    def director_phone(self):
        """Gets the director_phone of this CreateClubsRequest.  # noqa: E501


        :return: The director_phone of this CreateClubsRequest.  # noqa: E501
        :rtype: str
        """
        return self._director_phone

    @director_phone.setter
    def director_phone(self, director_phone):
        """Sets the director_phone of this CreateClubsRequest.


        :param director_phone: The director_phone of this CreateClubsRequest.  # noqa: E501
        :type: str
        """

        self._director_phone = director_phone

    @property
    def dupr_id(self):
        """Gets the dupr_id of this CreateClubsRequest.  # noqa: E501


        :return: The dupr_id of this CreateClubsRequest.  # noqa: E501
        :rtype: str
        """
        return self._dupr_id

    @dupr_id.setter
    def dupr_id(self, dupr_id):
        """Sets the dupr_id of this CreateClubsRequest.


        :param dupr_id: The dupr_id of this CreateClubsRequest.  # noqa: E501
        :type: str
        """
        if dupr_id is None:
            raise ValueError("Invalid value for `dupr_id`, must not be `None`")  # noqa: E501

        self._dupr_id = dupr_id

    @property
    def iso_code_club(self):
        """Gets the iso_code_club of this CreateClubsRequest.  # noqa: E501


        :return: The iso_code_club of this CreateClubsRequest.  # noqa: E501
        :rtype: str
        """
        return self._iso_code_club

    @iso_code_club.setter
    def iso_code_club(self, iso_code_club):
        """Sets the iso_code_club of this CreateClubsRequest.


        :param iso_code_club: The iso_code_club of this CreateClubsRequest.  # noqa: E501
        :type: str
        """
        if iso_code_club is None:
            raise ValueError("Invalid value for `iso_code_club`, must not be `None`")  # noqa: E501

        self._iso_code_club = iso_code_club

    @property
    def iso_code_director(self):
        """Gets the iso_code_director of this CreateClubsRequest.  # noqa: E501


        :return: The iso_code_director of this CreateClubsRequest.  # noqa: E501
        :rtype: str
        """
        return self._iso_code_director

    @iso_code_director.setter
    def iso_code_director(self, iso_code_director):
        """Sets the iso_code_director of this CreateClubsRequest.


        :param iso_code_director: The iso_code_director of this CreateClubsRequest.  # noqa: E501
        :type: str
        """
        if iso_code_director is None:
            raise ValueError("Invalid value for `iso_code_director`, must not be `None`")  # noqa: E501

        self._iso_code_director = iso_code_director

    @property
    def phone_number(self):
        """Gets the phone_number of this CreateClubsRequest.  # noqa: E501


        :return: The phone_number of this CreateClubsRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CreateClubsRequest.


        :param phone_number: The phone_number of this CreateClubsRequest.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def place_id(self):
        """Gets the place_id of this CreateClubsRequest.  # noqa: E501


        :return: The place_id of this CreateClubsRequest.  # noqa: E501
        :rtype: str
        """
        return self._place_id

    @place_id.setter
    def place_id(self, place_id):
        """Sets the place_id of this CreateClubsRequest.


        :param place_id: The place_id of this CreateClubsRequest.  # noqa: E501
        :type: str
        """
        if place_id is None:
            raise ValueError("Invalid value for `place_id`, must not be `None`")  # noqa: E501

        self._place_id = place_id

    @property
    def revenue_type(self):
        """Gets the revenue_type of this CreateClubsRequest.  # noqa: E501


        :return: The revenue_type of this CreateClubsRequest.  # noqa: E501
        :rtype: str
        """
        return self._revenue_type

    @revenue_type.setter
    def revenue_type(self, revenue_type):
        """Sets the revenue_type of this CreateClubsRequest.


        :param revenue_type: The revenue_type of this CreateClubsRequest.  # noqa: E501
        :type: str
        """
        if revenue_type is None:
            raise ValueError("Invalid value for `revenue_type`, must not be `None`")  # noqa: E501
        allowed_values = ["ABSOLUTE", "RELATIVE"]  # noqa: E501
        if revenue_type not in allowed_values:
            raise ValueError(
                "Invalid value for `revenue_type` ({0}), must be one of {1}"  # noqa: E501
                .format(revenue_type, allowed_values)
            )

        self._revenue_type = revenue_type

    @property
    def revenue_value(self):
        """Gets the revenue_value of this CreateClubsRequest.  # noqa: E501


        :return: The revenue_value of this CreateClubsRequest.  # noqa: E501
        :rtype: float
        """
        return self._revenue_value

    @revenue_value.setter
    def revenue_value(self, revenue_value):
        """Sets the revenue_value of this CreateClubsRequest.


        :param revenue_value: The revenue_value of this CreateClubsRequest.  # noqa: E501
        :type: float
        """
        if revenue_value is None:
            raise ValueError("Invalid value for `revenue_value`, must not be `None`")  # noqa: E501

        self._revenue_value = revenue_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateClubsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateClubsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

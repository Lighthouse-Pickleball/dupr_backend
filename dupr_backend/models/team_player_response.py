# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TeamPlayerResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_substitution': 'bool',
        'dupr_id': 'str',
        'full_name': 'str',
        'id': 'int',
        'image_url': 'str',
        'post_match_rating': 'PostMatchRating',
        'validated_match': 'bool'
    }

    attribute_map = {
        'allow_substitution': 'allowSubstitution',
        'dupr_id': 'duprId',
        'full_name': 'fullName',
        'id': 'id',
        'image_url': 'imageUrl',
        'post_match_rating': 'postMatchRating',
        'validated_match': 'validatedMatch'
    }

    def __init__(self, allow_substitution=None, dupr_id=None, full_name=None, id=None, image_url=None, post_match_rating=None, validated_match=None):  # noqa: E501
        """TeamPlayerResponse - a model defined in Swagger"""  # noqa: E501
        self._allow_substitution = None
        self._dupr_id = None
        self._full_name = None
        self._id = None
        self._image_url = None
        self._post_match_rating = None
        self._validated_match = None
        self.discriminator = None
        self.allow_substitution = allow_substitution
        if dupr_id is not None:
            self.dupr_id = dupr_id
        self.full_name = full_name
        if id is not None:
            self.id = id
        if image_url is not None:
            self.image_url = image_url
        if post_match_rating is not None:
            self.post_match_rating = post_match_rating
        if validated_match is not None:
            self.validated_match = validated_match

    @property
    def allow_substitution(self):
        """Gets the allow_substitution of this TeamPlayerResponse.  # noqa: E501


        :return: The allow_substitution of this TeamPlayerResponse.  # noqa: E501
        :rtype: bool
        """
        return self._allow_substitution

    @allow_substitution.setter
    def allow_substitution(self, allow_substitution):
        """Sets the allow_substitution of this TeamPlayerResponse.


        :param allow_substitution: The allow_substitution of this TeamPlayerResponse.  # noqa: E501
        :type: bool
        """
        if allow_substitution is None:
            raise ValueError("Invalid value for `allow_substitution`, must not be `None`")  # noqa: E501

        self._allow_substitution = allow_substitution

    @property
    def dupr_id(self):
        """Gets the dupr_id of this TeamPlayerResponse.  # noqa: E501


        :return: The dupr_id of this TeamPlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._dupr_id

    @dupr_id.setter
    def dupr_id(self, dupr_id):
        """Sets the dupr_id of this TeamPlayerResponse.


        :param dupr_id: The dupr_id of this TeamPlayerResponse.  # noqa: E501
        :type: str
        """

        self._dupr_id = dupr_id

    @property
    def full_name(self):
        """Gets the full_name of this TeamPlayerResponse.  # noqa: E501


        :return: The full_name of this TeamPlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this TeamPlayerResponse.


        :param full_name: The full_name of this TeamPlayerResponse.  # noqa: E501
        :type: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")  # noqa: E501

        self._full_name = full_name

    @property
    def id(self):
        """Gets the id of this TeamPlayerResponse.  # noqa: E501


        :return: The id of this TeamPlayerResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TeamPlayerResponse.


        :param id: The id of this TeamPlayerResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this TeamPlayerResponse.  # noqa: E501


        :return: The image_url of this TeamPlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this TeamPlayerResponse.


        :param image_url: The image_url of this TeamPlayerResponse.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def post_match_rating(self):
        """Gets the post_match_rating of this TeamPlayerResponse.  # noqa: E501


        :return: The post_match_rating of this TeamPlayerResponse.  # noqa: E501
        :rtype: PostMatchRating
        """
        return self._post_match_rating

    @post_match_rating.setter
    def post_match_rating(self, post_match_rating):
        """Sets the post_match_rating of this TeamPlayerResponse.


        :param post_match_rating: The post_match_rating of this TeamPlayerResponse.  # noqa: E501
        :type: PostMatchRating
        """

        self._post_match_rating = post_match_rating

    @property
    def validated_match(self):
        """Gets the validated_match of this TeamPlayerResponse.  # noqa: E501


        :return: The validated_match of this TeamPlayerResponse.  # noqa: E501
        :rtype: bool
        """
        return self._validated_match

    @validated_match.setter
    def validated_match(self, validated_match):
        """Sets the validated_match of this TeamPlayerResponse.


        :param validated_match: The validated_match of this TeamPlayerResponse.  # noqa: E501
        :type: bool
        """

        self._validated_match = validated_match

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TeamPlayerResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamPlayerResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

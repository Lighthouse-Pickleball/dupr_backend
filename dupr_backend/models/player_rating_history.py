# coding: utf-8

"""
    DUPR Backend APIs

    Internal RESTful APIs to access DUPR ratings, users and provide matches.

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PlayerRatingHistory(BaseModel):
    """
    PlayerRatingHistory
    """ # noqa: E501
    rating_history_id: StrictInt = Field(alias="ratingHistoryId")
    user_id: StrictInt = Field(alias="userId")
    user_name: StrictStr = Field(alias="userName")
    user_email: StrictStr = Field(alias="userEmail")
    singles: Optional[Union[StrictFloat, StrictInt]] = None
    singles_provisional: StrictBool = Field(alias="singlesProvisional")
    doubles: Optional[Union[StrictFloat, StrictInt]] = None
    doubles_provisional: StrictBool = Field(alias="doublesProvisional")
    changed_by_admin: StrictBool = Field(alias="changedByAdmin")
    created: datetime
    match_date: Optional[date] = Field(default=None, alias="matchDate")
    status: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["ratingHistoryId", "userId", "userName", "userEmail", "singles", "singlesProvisional", "doubles", "doublesProvisional", "changedByAdmin", "created", "matchDate", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVE', 'INACTIVE', 'UPCOMING', 'IN_PROGRESS', 'COMPLETE', 'CANCELLED', 'NOT_CONFIRMED', 'INVITED', 'CONFIRMED', 'MATCH_BYE', 'PENDING', 'FORFEITED', 'DELETED', 'ONGOING', 'SUSPENDED_TOS_13']):
            raise ValueError("must be one of enum values ('ACTIVE', 'INACTIVE', 'UPCOMING', 'IN_PROGRESS', 'COMPLETE', 'CANCELLED', 'NOT_CONFIRMED', 'INVITED', 'CONFIRMED', 'MATCH_BYE', 'PENDING', 'FORFEITED', 'DELETED', 'ONGOING', 'SUSPENDED_TOS_13')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlayerRatingHistory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlayerRatingHistory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ratingHistoryId": obj.get("ratingHistoryId"),
            "userId": obj.get("userId"),
            "userName": obj.get("userName"),
            "userEmail": obj.get("userEmail"),
            "singles": obj.get("singles"),
            "singlesProvisional": obj.get("singlesProvisional"),
            "doubles": obj.get("doubles"),
            "doublesProvisional": obj.get("doublesProvisional"),
            "changedByAdmin": obj.get("changedByAdmin"),
            "created": obj.get("created"),
            "matchDate": obj.get("matchDate"),
            "status": obj.get("status")
        })
        return _obj



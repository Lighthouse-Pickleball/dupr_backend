# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr

class PlayerRatingHistory(BaseModel):
    """
    PlayerRatingHistory
    """
    changed_by_admin: StrictBool = Field(..., alias="changedByAdmin")
    created: StrictStr = Field(...)
    doubles: Optional[Union[StrictFloat, StrictInt]] = None
    doubles_provisional: StrictBool = Field(..., alias="doublesProvisional")
    match_date: Optional[StrictStr] = Field(None, alias="matchDate")
    rating_history_id: StrictInt = Field(..., alias="ratingHistoryId")
    singles: Optional[Union[StrictFloat, StrictInt]] = None
    singles_provisional: StrictBool = Field(..., alias="singlesProvisional")
    status: Optional[StrictStr] = None
    user_email: StrictStr = Field(..., alias="userEmail")
    user_id: StrictInt = Field(..., alias="userId")
    user_name: StrictStr = Field(..., alias="userName")
    __properties = ["changedByAdmin", "created", "doubles", "doublesProvisional", "matchDate", "ratingHistoryId", "singles", "singlesProvisional", "status", "userEmail", "userId", "userName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlayerRatingHistory:
        """Create an instance of PlayerRatingHistory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlayerRatingHistory:
        """Create an instance of PlayerRatingHistory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlayerRatingHistory.parse_obj(obj)

        _obj = PlayerRatingHistory.parse_obj({
            "changed_by_admin": obj.get("changedByAdmin"),
            "created": obj.get("created"),
            "doubles": obj.get("doubles"),
            "doubles_provisional": obj.get("doublesProvisional"),
            "match_date": obj.get("matchDate"),
            "rating_history_id": obj.get("ratingHistoryId"),
            "singles": obj.get("singles"),
            "singles_provisional": obj.get("singlesProvisional"),
            "status": obj.get("status"),
            "user_email": obj.get("userEmail"),
            "user_id": obj.get("userId"),
            "user_name": obj.get("userName")
        })
        return _obj



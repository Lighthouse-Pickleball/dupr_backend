# coding: utf-8

"""
    DUPR Backend APIs

    Internal RESTful APIs to access DUPR ratings, users and provide matches.

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dupr_backend.models.creator import Creator
from dupr_backend.models.rating_range import RatingRange
from dupr_backend.models.time_range import TimeRange
from typing import Optional, Set
from typing_extensions import Self

class OpenPlayEvent(BaseModel):
    """
    OpenPlayEvent
    """ # noqa: E501
    id: StrictInt
    name: Optional[StrictStr] = None
    var_date: date = Field(alias="date")
    time: TimeRange
    location: Optional[StrictStr] = None
    max_players: StrictInt = Field(alias="maxPlayers")
    rating: Optional[RatingRange] = None
    description: Optional[StrictStr] = None
    registered_players: Optional[StrictInt] = Field(default=None, alias="registeredPlayers")
    creator: Creator
    __properties: ClassVar[List[str]] = ["id", "name", "date", "time", "location", "maxPlayers", "rating", "description", "registeredPlayers", "creator"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpenPlayEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of time
        if self.time:
            _dict['time'] = self.time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rating
        if self.rating:
            _dict['rating'] = self.rating.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creator
        if self.creator:
            _dict['creator'] = self.creator.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpenPlayEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "date": obj.get("date"),
            "time": TimeRange.from_dict(obj["time"]) if obj.get("time") is not None else None,
            "location": obj.get("location"),
            "maxPlayers": obj.get("maxPlayers"),
            "rating": RatingRange.from_dict(obj["rating"]) if obj.get("rating") is not None else None,
            "description": obj.get("description"),
            "registeredPlayers": obj.get("registeredPlayers"),
            "creator": Creator.from_dict(obj["creator"]) if obj.get("creator") is not None else None
        })
        return _obj



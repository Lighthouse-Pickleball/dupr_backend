# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OpenPlayEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creator': 'Creator',
        '_date': 'str',
        'description': 'str',
        'id': 'int',
        'location': 'str',
        'max_players': 'int',
        'name': 'str',
        'rating': 'RatingRangeRes',
        'registered_players': 'int',
        'time': 'TimeRangeRes'
    }

    attribute_map = {
        'creator': 'creator',
        '_date': 'date',
        'description': 'description',
        'id': 'id',
        'location': 'location',
        'max_players': 'maxPlayers',
        'name': 'name',
        'rating': 'rating',
        'registered_players': 'registeredPlayers',
        'time': 'time'
    }

    def __init__(self, creator=None, _date=None, description=None, id=None, location=None, max_players=None, name=None, rating=None, registered_players=None, time=None):  # noqa: E501
        """OpenPlayEvent - a model defined in Swagger"""  # noqa: E501
        self._creator = None
        self.__date = None
        self._description = None
        self._id = None
        self._location = None
        self._max_players = None
        self._name = None
        self._rating = None
        self._registered_players = None
        self._time = None
        self.discriminator = None
        self.creator = creator
        self._date = _date
        if description is not None:
            self.description = description
        self.id = id
        if location is not None:
            self.location = location
        self.max_players = max_players
        if name is not None:
            self.name = name
        if rating is not None:
            self.rating = rating
        if registered_players is not None:
            self.registered_players = registered_players
        self.time = time

    @property
    def creator(self):
        """Gets the creator of this OpenPlayEvent.  # noqa: E501


        :return: The creator of this OpenPlayEvent.  # noqa: E501
        :rtype: Creator
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this OpenPlayEvent.


        :param creator: The creator of this OpenPlayEvent.  # noqa: E501
        :type: Creator
        """
        if creator is None:
            raise ValueError("Invalid value for `creator`, must not be `None`")  # noqa: E501

        self._creator = creator

    @property
    def _date(self):
        """Gets the _date of this OpenPlayEvent.  # noqa: E501


        :return: The _date of this OpenPlayEvent.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this OpenPlayEvent.


        :param _date: The _date of this OpenPlayEvent.  # noqa: E501
        :type: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this OpenPlayEvent.  # noqa: E501


        :return: The description of this OpenPlayEvent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OpenPlayEvent.


        :param description: The description of this OpenPlayEvent.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this OpenPlayEvent.  # noqa: E501


        :return: The id of this OpenPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OpenPlayEvent.


        :param id: The id of this OpenPlayEvent.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def location(self):
        """Gets the location of this OpenPlayEvent.  # noqa: E501


        :return: The location of this OpenPlayEvent.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this OpenPlayEvent.


        :param location: The location of this OpenPlayEvent.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def max_players(self):
        """Gets the max_players of this OpenPlayEvent.  # noqa: E501


        :return: The max_players of this OpenPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._max_players

    @max_players.setter
    def max_players(self, max_players):
        """Sets the max_players of this OpenPlayEvent.


        :param max_players: The max_players of this OpenPlayEvent.  # noqa: E501
        :type: int
        """
        if max_players is None:
            raise ValueError("Invalid value for `max_players`, must not be `None`")  # noqa: E501

        self._max_players = max_players

    @property
    def name(self):
        """Gets the name of this OpenPlayEvent.  # noqa: E501


        :return: The name of this OpenPlayEvent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OpenPlayEvent.


        :param name: The name of this OpenPlayEvent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def rating(self):
        """Gets the rating of this OpenPlayEvent.  # noqa: E501


        :return: The rating of this OpenPlayEvent.  # noqa: E501
        :rtype: RatingRangeRes
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this OpenPlayEvent.


        :param rating: The rating of this OpenPlayEvent.  # noqa: E501
        :type: RatingRangeRes
        """

        self._rating = rating

    @property
    def registered_players(self):
        """Gets the registered_players of this OpenPlayEvent.  # noqa: E501


        :return: The registered_players of this OpenPlayEvent.  # noqa: E501
        :rtype: int
        """
        return self._registered_players

    @registered_players.setter
    def registered_players(self, registered_players):
        """Sets the registered_players of this OpenPlayEvent.


        :param registered_players: The registered_players of this OpenPlayEvent.  # noqa: E501
        :type: int
        """

        self._registered_players = registered_players

    @property
    def time(self):
        """Gets the time of this OpenPlayEvent.  # noqa: E501


        :return: The time of this OpenPlayEvent.  # noqa: E501
        :rtype: TimeRangeRes
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this OpenPlayEvent.


        :param time: The time of this OpenPlayEvent.  # noqa: E501
        :type: TimeRangeRes
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenPlayEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenPlayEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

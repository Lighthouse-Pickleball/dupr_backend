# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventAnnouncementsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'announcement_id': 'int',
        'bracket_id': 'int',
        'created': 'str',
        'description': 'ContentResponse',
        'email_failed': 'int',
        'email_sent': 'int',
        'league_id': 'int',
        'notification_count': 'int',
        'push_failed': 'int',
        'push_sent': 'int',
        'registered_members': 'int',
        'sms_failed': 'int',
        'sms_sent': 'int',
        'status': 'str',
        'title': 'str'
    }

    attribute_map = {
        'announcement_id': 'announcementId',
        'bracket_id': 'bracketId',
        'created': 'created',
        'description': 'description',
        'email_failed': 'emailFailed',
        'email_sent': 'emailSent',
        'league_id': 'leagueId',
        'notification_count': 'notificationCount',
        'push_failed': 'pushFailed',
        'push_sent': 'pushSent',
        'registered_members': 'registeredMembers',
        'sms_failed': 'smsFailed',
        'sms_sent': 'smsSent',
        'status': 'status',
        'title': 'title'
    }

    def __init__(self, announcement_id=None, bracket_id=None, created=None, description=None, email_failed=None, email_sent=None, league_id=None, notification_count=None, push_failed=None, push_sent=None, registered_members=None, sms_failed=None, sms_sent=None, status=None, title=None):  # noqa: E501
        """EventAnnouncementsResponse - a model defined in Swagger"""  # noqa: E501
        self._announcement_id = None
        self._bracket_id = None
        self._created = None
        self._description = None
        self._email_failed = None
        self._email_sent = None
        self._league_id = None
        self._notification_count = None
        self._push_failed = None
        self._push_sent = None
        self._registered_members = None
        self._sms_failed = None
        self._sms_sent = None
        self._status = None
        self._title = None
        self.discriminator = None
        self.announcement_id = announcement_id
        self.bracket_id = bracket_id
        self.created = created
        if description is not None:
            self.description = description
        self.email_failed = email_failed
        self.email_sent = email_sent
        self.league_id = league_id
        if notification_count is not None:
            self.notification_count = notification_count
        self.push_failed = push_failed
        self.push_sent = push_sent
        if registered_members is not None:
            self.registered_members = registered_members
        self.sms_failed = sms_failed
        self.sms_sent = sms_sent
        self.status = status
        self.title = title

    @property
    def announcement_id(self):
        """Gets the announcement_id of this EventAnnouncementsResponse.  # noqa: E501


        :return: The announcement_id of this EventAnnouncementsResponse.  # noqa: E501
        :rtype: int
        """
        return self._announcement_id

    @announcement_id.setter
    def announcement_id(self, announcement_id):
        """Sets the announcement_id of this EventAnnouncementsResponse.


        :param announcement_id: The announcement_id of this EventAnnouncementsResponse.  # noqa: E501
        :type: int
        """
        if announcement_id is None:
            raise ValueError("Invalid value for `announcement_id`, must not be `None`")  # noqa: E501

        self._announcement_id = announcement_id

    @property
    def bracket_id(self):
        """Gets the bracket_id of this EventAnnouncementsResponse.  # noqa: E501


        :return: The bracket_id of this EventAnnouncementsResponse.  # noqa: E501
        :rtype: int
        """
        return self._bracket_id

    @bracket_id.setter
    def bracket_id(self, bracket_id):
        """Sets the bracket_id of this EventAnnouncementsResponse.


        :param bracket_id: The bracket_id of this EventAnnouncementsResponse.  # noqa: E501
        :type: int
        """
        if bracket_id is None:
            raise ValueError("Invalid value for `bracket_id`, must not be `None`")  # noqa: E501

        self._bracket_id = bracket_id

    @property
    def created(self):
        """Gets the created of this EventAnnouncementsResponse.  # noqa: E501


        :return: The created of this EventAnnouncementsResponse.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this EventAnnouncementsResponse.


        :param created: The created of this EventAnnouncementsResponse.  # noqa: E501
        :type: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def description(self):
        """Gets the description of this EventAnnouncementsResponse.  # noqa: E501


        :return: The description of this EventAnnouncementsResponse.  # noqa: E501
        :rtype: ContentResponse
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventAnnouncementsResponse.


        :param description: The description of this EventAnnouncementsResponse.  # noqa: E501
        :type: ContentResponse
        """

        self._description = description

    @property
    def email_failed(self):
        """Gets the email_failed of this EventAnnouncementsResponse.  # noqa: E501


        :return: The email_failed of this EventAnnouncementsResponse.  # noqa: E501
        :rtype: int
        """
        return self._email_failed

    @email_failed.setter
    def email_failed(self, email_failed):
        """Sets the email_failed of this EventAnnouncementsResponse.


        :param email_failed: The email_failed of this EventAnnouncementsResponse.  # noqa: E501
        :type: int
        """
        if email_failed is None:
            raise ValueError("Invalid value for `email_failed`, must not be `None`")  # noqa: E501

        self._email_failed = email_failed

    @property
    def email_sent(self):
        """Gets the email_sent of this EventAnnouncementsResponse.  # noqa: E501


        :return: The email_sent of this EventAnnouncementsResponse.  # noqa: E501
        :rtype: int
        """
        return self._email_sent

    @email_sent.setter
    def email_sent(self, email_sent):
        """Sets the email_sent of this EventAnnouncementsResponse.


        :param email_sent: The email_sent of this EventAnnouncementsResponse.  # noqa: E501
        :type: int
        """
        if email_sent is None:
            raise ValueError("Invalid value for `email_sent`, must not be `None`")  # noqa: E501

        self._email_sent = email_sent

    @property
    def league_id(self):
        """Gets the league_id of this EventAnnouncementsResponse.  # noqa: E501


        :return: The league_id of this EventAnnouncementsResponse.  # noqa: E501
        :rtype: int
        """
        return self._league_id

    @league_id.setter
    def league_id(self, league_id):
        """Sets the league_id of this EventAnnouncementsResponse.


        :param league_id: The league_id of this EventAnnouncementsResponse.  # noqa: E501
        :type: int
        """
        if league_id is None:
            raise ValueError("Invalid value for `league_id`, must not be `None`")  # noqa: E501

        self._league_id = league_id

    @property
    def notification_count(self):
        """Gets the notification_count of this EventAnnouncementsResponse.  # noqa: E501


        :return: The notification_count of this EventAnnouncementsResponse.  # noqa: E501
        :rtype: int
        """
        return self._notification_count

    @notification_count.setter
    def notification_count(self, notification_count):
        """Sets the notification_count of this EventAnnouncementsResponse.


        :param notification_count: The notification_count of this EventAnnouncementsResponse.  # noqa: E501
        :type: int
        """

        self._notification_count = notification_count

    @property
    def push_failed(self):
        """Gets the push_failed of this EventAnnouncementsResponse.  # noqa: E501


        :return: The push_failed of this EventAnnouncementsResponse.  # noqa: E501
        :rtype: int
        """
        return self._push_failed

    @push_failed.setter
    def push_failed(self, push_failed):
        """Sets the push_failed of this EventAnnouncementsResponse.


        :param push_failed: The push_failed of this EventAnnouncementsResponse.  # noqa: E501
        :type: int
        """
        if push_failed is None:
            raise ValueError("Invalid value for `push_failed`, must not be `None`")  # noqa: E501

        self._push_failed = push_failed

    @property
    def push_sent(self):
        """Gets the push_sent of this EventAnnouncementsResponse.  # noqa: E501


        :return: The push_sent of this EventAnnouncementsResponse.  # noqa: E501
        :rtype: int
        """
        return self._push_sent

    @push_sent.setter
    def push_sent(self, push_sent):
        """Sets the push_sent of this EventAnnouncementsResponse.


        :param push_sent: The push_sent of this EventAnnouncementsResponse.  # noqa: E501
        :type: int
        """
        if push_sent is None:
            raise ValueError("Invalid value for `push_sent`, must not be `None`")  # noqa: E501

        self._push_sent = push_sent

    @property
    def registered_members(self):
        """Gets the registered_members of this EventAnnouncementsResponse.  # noqa: E501


        :return: The registered_members of this EventAnnouncementsResponse.  # noqa: E501
        :rtype: int
        """
        return self._registered_members

    @registered_members.setter
    def registered_members(self, registered_members):
        """Sets the registered_members of this EventAnnouncementsResponse.


        :param registered_members: The registered_members of this EventAnnouncementsResponse.  # noqa: E501
        :type: int
        """

        self._registered_members = registered_members

    @property
    def sms_failed(self):
        """Gets the sms_failed of this EventAnnouncementsResponse.  # noqa: E501


        :return: The sms_failed of this EventAnnouncementsResponse.  # noqa: E501
        :rtype: int
        """
        return self._sms_failed

    @sms_failed.setter
    def sms_failed(self, sms_failed):
        """Sets the sms_failed of this EventAnnouncementsResponse.


        :param sms_failed: The sms_failed of this EventAnnouncementsResponse.  # noqa: E501
        :type: int
        """
        if sms_failed is None:
            raise ValueError("Invalid value for `sms_failed`, must not be `None`")  # noqa: E501

        self._sms_failed = sms_failed

    @property
    def sms_sent(self):
        """Gets the sms_sent of this EventAnnouncementsResponse.  # noqa: E501


        :return: The sms_sent of this EventAnnouncementsResponse.  # noqa: E501
        :rtype: int
        """
        return self._sms_sent

    @sms_sent.setter
    def sms_sent(self, sms_sent):
        """Sets the sms_sent of this EventAnnouncementsResponse.


        :param sms_sent: The sms_sent of this EventAnnouncementsResponse.  # noqa: E501
        :type: int
        """
        if sms_sent is None:
            raise ValueError("Invalid value for `sms_sent`, must not be `None`")  # noqa: E501

        self._sms_sent = sms_sent

    @property
    def status(self):
        """Gets the status of this EventAnnouncementsResponse.  # noqa: E501


        :return: The status of this EventAnnouncementsResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EventAnnouncementsResponse.


        :param status: The status of this EventAnnouncementsResponse.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def title(self):
        """Gets the title of this EventAnnouncementsResponse.  # noqa: E501


        :return: The title of this EventAnnouncementsResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EventAnnouncementsResponse.


        :param title: The title of this EventAnnouncementsResponse.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventAnnouncementsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventAnnouncementsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conint
from dupr_backend.models.claim_player_search_filter import ClaimPlayerSearchFilter
from dupr_backend.models.claim_player_search_sort import ClaimPlayerSearchSort

class ClaimPlayerSearchRequest(BaseModel):
    """
    ClaimPlayerSearchRequest
    """
    filter: Optional[ClaimPlayerSearchFilter] = None
    limit: conint(strict=True, le=25) = Field(...)
    offset: StrictInt = Field(...)
    query: StrictStr = Field(...)
    sort: Optional[ClaimPlayerSearchSort] = None
    __properties = ["filter", "limit", "offset", "query", "sort"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClaimPlayerSearchRequest:
        """Create an instance of ClaimPlayerSearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sort
        if self.sort:
            _dict['sort'] = self.sort.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClaimPlayerSearchRequest:
        """Create an instance of ClaimPlayerSearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClaimPlayerSearchRequest.parse_obj(obj)

        _obj = ClaimPlayerSearchRequest.parse_obj({
            "filter": ClaimPlayerSearchFilter.from_dict(obj.get("filter")) if obj.get("filter") is not None else None,
            "limit": obj.get("limit"),
            "offset": obj.get("offset"),
            "query": obj.get("query"),
            "sort": ClaimPlayerSearchSort.from_dict(obj.get("sort")) if obj.get("sort") is not None else None
        })
        return _obj



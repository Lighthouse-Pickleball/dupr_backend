# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BracketSearchTeamsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bracket_id': 'int',
        'limit': 'int',
        'offset': 'int',
        'only_non_wait_listed': 'bool',
        'only_wait_listed': 'bool',
        'sort': 'BracketTeamSort'
    }

    attribute_map = {
        'bracket_id': 'bracketId',
        'limit': 'limit',
        'offset': 'offset',
        'only_non_wait_listed': 'onlyNonWaitListed',
        'only_wait_listed': 'onlyWaitListed',
        'sort': 'sort'
    }

    def __init__(self, bracket_id=None, limit=None, offset=None, only_non_wait_listed=None, only_wait_listed=None, sort=None):  # noqa: E501
        """BracketSearchTeamsRequest - a model defined in Swagger"""  # noqa: E501
        self._bracket_id = None
        self._limit = None
        self._offset = None
        self._only_non_wait_listed = None
        self._only_wait_listed = None
        self._sort = None
        self.discriminator = None
        self.bracket_id = bracket_id
        self.limit = limit
        self.offset = offset
        if only_non_wait_listed is not None:
            self.only_non_wait_listed = only_non_wait_listed
        if only_wait_listed is not None:
            self.only_wait_listed = only_wait_listed
        if sort is not None:
            self.sort = sort

    @property
    def bracket_id(self):
        """Gets the bracket_id of this BracketSearchTeamsRequest.  # noqa: E501


        :return: The bracket_id of this BracketSearchTeamsRequest.  # noqa: E501
        :rtype: int
        """
        return self._bracket_id

    @bracket_id.setter
    def bracket_id(self, bracket_id):
        """Sets the bracket_id of this BracketSearchTeamsRequest.


        :param bracket_id: The bracket_id of this BracketSearchTeamsRequest.  # noqa: E501
        :type: int
        """
        if bracket_id is None:
            raise ValueError("Invalid value for `bracket_id`, must not be `None`")  # noqa: E501

        self._bracket_id = bracket_id

    @property
    def limit(self):
        """Gets the limit of this BracketSearchTeamsRequest.  # noqa: E501


        :return: The limit of this BracketSearchTeamsRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this BracketSearchTeamsRequest.


        :param limit: The limit of this BracketSearchTeamsRequest.  # noqa: E501
        :type: int
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")  # noqa: E501

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this BracketSearchTeamsRequest.  # noqa: E501


        :return: The offset of this BracketSearchTeamsRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this BracketSearchTeamsRequest.


        :param offset: The offset of this BracketSearchTeamsRequest.  # noqa: E501
        :type: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")  # noqa: E501

        self._offset = offset

    @property
    def only_non_wait_listed(self):
        """Gets the only_non_wait_listed of this BracketSearchTeamsRequest.  # noqa: E501


        :return: The only_non_wait_listed of this BracketSearchTeamsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._only_non_wait_listed

    @only_non_wait_listed.setter
    def only_non_wait_listed(self, only_non_wait_listed):
        """Sets the only_non_wait_listed of this BracketSearchTeamsRequest.


        :param only_non_wait_listed: The only_non_wait_listed of this BracketSearchTeamsRequest.  # noqa: E501
        :type: bool
        """

        self._only_non_wait_listed = only_non_wait_listed

    @property
    def only_wait_listed(self):
        """Gets the only_wait_listed of this BracketSearchTeamsRequest.  # noqa: E501


        :return: The only_wait_listed of this BracketSearchTeamsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._only_wait_listed

    @only_wait_listed.setter
    def only_wait_listed(self, only_wait_listed):
        """Sets the only_wait_listed of this BracketSearchTeamsRequest.


        :param only_wait_listed: The only_wait_listed of this BracketSearchTeamsRequest.  # noqa: E501
        :type: bool
        """

        self._only_wait_listed = only_wait_listed

    @property
    def sort(self):
        """Gets the sort of this BracketSearchTeamsRequest.  # noqa: E501


        :return: The sort of this BracketSearchTeamsRequest.  # noqa: E501
        :rtype: BracketTeamSort
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this BracketSearchTeamsRequest.


        :param sort: The sort of this BracketSearchTeamsRequest.  # noqa: E501
        :type: BracketTeamSort
        """

        self._sort = sort

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BracketSearchTeamsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BracketSearchTeamsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt
from dupr_backend.models.bracket_team_sort import BracketTeamSort

class BracketSearchTeamsRequest(BaseModel):
    """
    BracketSearchTeamsRequest
    """
    bracket_id: StrictInt = Field(..., alias="bracketId")
    limit: StrictInt = Field(...)
    offset: StrictInt = Field(...)
    only_non_wait_listed: Optional[StrictBool] = Field(None, alias="onlyNonWaitListed")
    only_wait_listed: Optional[StrictBool] = Field(None, alias="onlyWaitListed")
    sort: Optional[BracketTeamSort] = None
    __properties = ["bracketId", "limit", "offset", "onlyNonWaitListed", "onlyWaitListed", "sort"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BracketSearchTeamsRequest:
        """Create an instance of BracketSearchTeamsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of sort
        if self.sort:
            _dict['sort'] = self.sort.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BracketSearchTeamsRequest:
        """Create an instance of BracketSearchTeamsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BracketSearchTeamsRequest.parse_obj(obj)

        _obj = BracketSearchTeamsRequest.parse_obj({
            "bracket_id": obj.get("bracketId"),
            "limit": obj.get("limit"),
            "offset": obj.get("offset"),
            "only_non_wait_listed": obj.get("onlyNonWaitListed"),
            "only_wait_listed": obj.get("onlyWaitListed"),
            "sort": BracketTeamSort.from_dict(obj.get("sort")) if obj.get("sort") is not None else None
        })
        return _obj



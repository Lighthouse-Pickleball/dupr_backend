# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt

class TeamUpdateRequest(BaseModel):
    """
    TeamUpdateRequest
    """
    game1: Optional[StrictInt] = None
    game2: Optional[StrictInt] = None
    game3: Optional[StrictInt] = None
    game4: Optional[StrictInt] = None
    game5: Optional[StrictInt] = None
    id: Optional[StrictInt] = None
    player1: StrictInt = Field(...)
    player2: Optional[StrictInt] = None
    winner: Optional[StrictBool] = None
    __properties = ["game1", "game2", "game3", "game4", "game5", "id", "player1", "player2", "winner"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TeamUpdateRequest:
        """Create an instance of TeamUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TeamUpdateRequest:
        """Create an instance of TeamUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TeamUpdateRequest.parse_obj(obj)

        _obj = TeamUpdateRequest.parse_obj({
            "game1": obj.get("game1"),
            "game2": obj.get("game2"),
            "game3": obj.get("game3"),
            "game4": obj.get("game4"),
            "game5": obj.get("game5"),
            "id": obj.get("id"),
            "player1": obj.get("player1"),
            "player2": obj.get("player2"),
            "winner": obj.get("winner")
        })
        return _obj



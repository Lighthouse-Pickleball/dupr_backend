# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist, validator
from dupr_backend.models.league_content_request import LeagueContentRequest
from dupr_backend.models.milp_division_request import MILPDivisionRequest
from dupr_backend.models.milp_event_organizer_request import MILPEventOrganizerRequest

class MiLPEventRequest(BaseModel):
    """
    MiLPEventRequest
    """
    address_id: StrictInt = Field(..., alias="addressId")
    club_id: StrictInt = Field(..., alias="clubId")
    default_entry_fee: Union[StrictFloat, StrictInt] = Field(..., alias="defaultEntryFee")
    default_max_teams: StrictInt = Field(..., alias="defaultMaxTeams")
    default_max_waitlist: StrictInt = Field(..., alias="defaultMaxWaitlist")
    description: Optional[LeagueContentRequest] = None
    divisions: conlist(MILPDivisionRequest) = Field(...)
    duration: conlist(date) = Field(...)
    event_name: StrictStr = Field(..., alias="eventName")
    event_type: StrictStr = Field(..., alias="eventType")
    organizers: conlist(MILPEventOrganizerRequest) = Field(...)
    status: Optional[StrictStr] = None
    time_zone: StrictStr = Field(..., alias="timeZone")
    __properties = ["addressId", "clubId", "defaultEntryFee", "defaultMaxTeams", "defaultMaxWaitlist", "description", "divisions", "duration", "eventName", "eventType", "organizers", "status", "timeZone"]

    @validator('event_type')
    def event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('MARQUE', 'SHOWDOWN', 'STANDARD'):
            raise ValueError("must be one of enum values ('MARQUE', 'SHOWDOWN', 'STANDARD')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING'):
            raise ValueError("must be one of enum values ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MiLPEventRequest:
        """Create an instance of MiLPEventRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in divisions (list)
        _items = []
        if self.divisions:
            for _item in self.divisions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['divisions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in organizers (list)
        _items = []
        if self.organizers:
            for _item in self.organizers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['organizers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MiLPEventRequest:
        """Create an instance of MiLPEventRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MiLPEventRequest.parse_obj(obj)

        _obj = MiLPEventRequest.parse_obj({
            "address_id": obj.get("addressId"),
            "club_id": obj.get("clubId"),
            "default_entry_fee": obj.get("defaultEntryFee"),
            "default_max_teams": obj.get("defaultMaxTeams"),
            "default_max_waitlist": obj.get("defaultMaxWaitlist"),
            "description": LeagueContentRequest.from_dict(obj.get("description")) if obj.get("description") is not None else None,
            "divisions": [MILPDivisionRequest.from_dict(_item) for _item in obj.get("divisions")] if obj.get("divisions") is not None else None,
            "duration": obj.get("duration"),
            "event_name": obj.get("eventName"),
            "event_type": obj.get("eventType"),
            "organizers": [MILPEventOrganizerRequest.from_dict(_item) for _item in obj.get("organizers")] if obj.get("organizers") is not None else None,
            "status": obj.get("status"),
            "time_zone": obj.get("timeZone")
        })
        return _obj



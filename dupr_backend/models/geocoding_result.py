# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GeocodingResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_components': 'list[AddressComponent]',
        'formatted_address': 'str',
        'geometry': 'Geometry',
        'partial_match': 'bool',
        'place_id': 'str',
        'plus_code': 'PlusCode',
        'postcode_localities': 'list[str]',
        'types': 'list[str]'
    }

    attribute_map = {
        'address_components': 'addressComponents',
        'formatted_address': 'formattedAddress',
        'geometry': 'geometry',
        'partial_match': 'partialMatch',
        'place_id': 'placeId',
        'plus_code': 'plusCode',
        'postcode_localities': 'postcodeLocalities',
        'types': 'types'
    }

    def __init__(self, address_components=None, formatted_address=None, geometry=None, partial_match=None, place_id=None, plus_code=None, postcode_localities=None, types=None):  # noqa: E501
        """GeocodingResult - a model defined in Swagger"""  # noqa: E501
        self._address_components = None
        self._formatted_address = None
        self._geometry = None
        self._partial_match = None
        self._place_id = None
        self._plus_code = None
        self._postcode_localities = None
        self._types = None
        self.discriminator = None
        if address_components is not None:
            self.address_components = address_components
        if formatted_address is not None:
            self.formatted_address = formatted_address
        if geometry is not None:
            self.geometry = geometry
        if partial_match is not None:
            self.partial_match = partial_match
        if place_id is not None:
            self.place_id = place_id
        if plus_code is not None:
            self.plus_code = plus_code
        if postcode_localities is not None:
            self.postcode_localities = postcode_localities
        if types is not None:
            self.types = types

    @property
    def address_components(self):
        """Gets the address_components of this GeocodingResult.  # noqa: E501


        :return: The address_components of this GeocodingResult.  # noqa: E501
        :rtype: list[AddressComponent]
        """
        return self._address_components

    @address_components.setter
    def address_components(self, address_components):
        """Sets the address_components of this GeocodingResult.


        :param address_components: The address_components of this GeocodingResult.  # noqa: E501
        :type: list[AddressComponent]
        """

        self._address_components = address_components

    @property
    def formatted_address(self):
        """Gets the formatted_address of this GeocodingResult.  # noqa: E501


        :return: The formatted_address of this GeocodingResult.  # noqa: E501
        :rtype: str
        """
        return self._formatted_address

    @formatted_address.setter
    def formatted_address(self, formatted_address):
        """Sets the formatted_address of this GeocodingResult.


        :param formatted_address: The formatted_address of this GeocodingResult.  # noqa: E501
        :type: str
        """

        self._formatted_address = formatted_address

    @property
    def geometry(self):
        """Gets the geometry of this GeocodingResult.  # noqa: E501


        :return: The geometry of this GeocodingResult.  # noqa: E501
        :rtype: Geometry
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this GeocodingResult.


        :param geometry: The geometry of this GeocodingResult.  # noqa: E501
        :type: Geometry
        """

        self._geometry = geometry

    @property
    def partial_match(self):
        """Gets the partial_match of this GeocodingResult.  # noqa: E501


        :return: The partial_match of this GeocodingResult.  # noqa: E501
        :rtype: bool
        """
        return self._partial_match

    @partial_match.setter
    def partial_match(self, partial_match):
        """Sets the partial_match of this GeocodingResult.


        :param partial_match: The partial_match of this GeocodingResult.  # noqa: E501
        :type: bool
        """

        self._partial_match = partial_match

    @property
    def place_id(self):
        """Gets the place_id of this GeocodingResult.  # noqa: E501


        :return: The place_id of this GeocodingResult.  # noqa: E501
        :rtype: str
        """
        return self._place_id

    @place_id.setter
    def place_id(self, place_id):
        """Sets the place_id of this GeocodingResult.


        :param place_id: The place_id of this GeocodingResult.  # noqa: E501
        :type: str
        """

        self._place_id = place_id

    @property
    def plus_code(self):
        """Gets the plus_code of this GeocodingResult.  # noqa: E501


        :return: The plus_code of this GeocodingResult.  # noqa: E501
        :rtype: PlusCode
        """
        return self._plus_code

    @plus_code.setter
    def plus_code(self, plus_code):
        """Sets the plus_code of this GeocodingResult.


        :param plus_code: The plus_code of this GeocodingResult.  # noqa: E501
        :type: PlusCode
        """

        self._plus_code = plus_code

    @property
    def postcode_localities(self):
        """Gets the postcode_localities of this GeocodingResult.  # noqa: E501


        :return: The postcode_localities of this GeocodingResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._postcode_localities

    @postcode_localities.setter
    def postcode_localities(self, postcode_localities):
        """Sets the postcode_localities of this GeocodingResult.


        :param postcode_localities: The postcode_localities of this GeocodingResult.  # noqa: E501
        :type: list[str]
        """

        self._postcode_localities = postcode_localities

    @property
    def types(self):
        """Gets the types of this GeocodingResult.  # noqa: E501


        :return: The types of this GeocodingResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this GeocodingResult.


        :param types: The types of this GeocodingResult.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ACCOUNTING", "ADMINISTRATIVE_AREA_LEVEL_1", "ADMINISTRATIVE_AREA_LEVEL_2", "ADMINISTRATIVE_AREA_LEVEL_3", "ADMINISTRATIVE_AREA_LEVEL_4", "ADMINISTRATIVE_AREA_LEVEL_5", "AIRPORT", "AMUSEMENT_PARK", "AQUARIUM", "ARCHIPELAGO", "ART_GALLERY", "ATM", "BAKERY", "BANK", "BAR", "BEAUTY_SALON", "BICYCLE_STORE", "BOOK_STORE", "BOWLING_ALLEY", "BUS_STATION", "CAFE", "CAMPGROUND", "CAR_DEALER", "CAR_RENTAL", "CAR_REPAIR", "CAR_WASH", "CASINO", "CEMETERY", "CHURCH", "CITY_HALL", "CLOTHING_STORE", "COLLOQUIAL_AREA", "CONTINENT", "CONVENIENCE_STORE", "COUNTRY", "COURTHOUSE", "DENTIST", "DEPARTMENT_STORE", "DOCTOR", "DRUGSTORE", "ELECTRICIAN", "ELECTRONICS_STORE", "EMBASSY", "ESTABLISHMENT", "FINANCE", "FIRE_STATION", "FLOOR", "FLORIST", "FOOD", "FUNERAL_HOME", "FURNITURE_STORE", "GAS_STATION", "GENERAL_CONTRACTOR", "GROCERY_OR_SUPERMARKET", "GYM", "HAIR_CARE", "HARDWARE_STORE", "HEALTH", "HINDU_TEMPLE", "HOME_GOODS_STORE", "HOSPITAL", "INSURANCE_AGENCY", "INTERSECTION", "JEWELRY_STORE", "LAUNDRY", "LAWYER", "LIBRARY", "LIGHT_RAIL_STATION", "LIQUOR_STORE", "LOCALITY", "LOCAL_GOVERNMENT_OFFICE", "LOCKSMITH", "LODGING", "MEAL_DELIVERY", "MEAL_TAKEAWAY", "MOSQUE", "MOVIE_RENTAL", "MOVIE_THEATER", "MOVING_COMPANY", "MUSEUM", "NATURAL_FEATURE", "NEIGHBORHOOD", "NIGHT_CLUB", "PAINTER", "PARK", "PARKING", "PET_STORE", "PHARMACY", "PHYSIOTHERAPIST", "PLACE_OF_WORSHIP", "PLUMBER", "PLUS_CODE", "POINT_OF_INTEREST", "POLICE", "POLITICAL", "POSTAL_CODE", "POSTAL_CODE_PREFIX", "POSTAL_CODE_SUFFIX", "POSTAL_TOWN", "POST_BOX", "POST_OFFICE", "PREMISE", "PRIMARY_SCHOOL", "REAL_ESTATE_AGENCY", "RESTAURANT", "ROOFING_CONTRACTOR", "ROOM", "ROUTE", "RV_PARK", "SCHOOL", "SECONDARY_SCHOOL", "SHOE_STORE", "SHOPPING_MALL", "SPA", "STADIUM", "STORAGE", "STORE", "STREET_ADDRESS", "STREET_NUMBER", "SUBLOCALITY", "SUBLOCALITY_LEVEL_1", "SUBLOCALITY_LEVEL_2", "SUBLOCALITY_LEVEL_3", "SUBLOCALITY_LEVEL_4", "SUBLOCALITY_LEVEL_5", "SUBPREMISE", "SUBWAY_STATION", "SUPERMARKET", "SYNAGOGUE", "TAXI_STAND", "TOURIST_ATTRACTION", "TOWN_SQUARE", "TRAIN_STATION", "TRANSIT_STATION", "TRAVEL_AGENCY", "UNIVERSITY", "UNKNOWN", "VETERINARY_CARE", "WARD", "ZOO"]  # noqa: E501
        if not set(types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._types = types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeocodingResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeocodingResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr
from dupr_backend.models.duplicated_player import DuplicatedPlayer

class DuplicatedAccountResponse(BaseModel):
    """
    DuplicatedAccountResponse
    """
    player1: DuplicatedPlayer = Field(...)
    player2: DuplicatedPlayer = Field(...)
    probability: StrictStr = Field(...)
    __properties = ["player1", "player2", "probability"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DuplicatedAccountResponse:
        """Create an instance of DuplicatedAccountResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of player1
        if self.player1:
            _dict['player1'] = self.player1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of player2
        if self.player2:
            _dict['player2'] = self.player2.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DuplicatedAccountResponse:
        """Create an instance of DuplicatedAccountResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DuplicatedAccountResponse.parse_obj(obj)

        _obj = DuplicatedAccountResponse.parse_obj({
            "player1": DuplicatedPlayer.from_dict(obj.get("player1")) if obj.get("player1") is not None else None,
            "player2": DuplicatedPlayer.from_dict(obj.get("player2")) if obj.get("player2") is not None else None,
            "probability": obj.get("probability")
        })
        return _obj



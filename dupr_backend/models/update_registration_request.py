# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateRegistrationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bracket_fees_paid': 'float',
        'bracket_id': 'int',
        'event_fees_paid': 'float',
        'is_registered': 'bool',
        'league_id': 'int',
        'payment_status': 'str',
        'registration_status': 'str',
        'user_id': 'int'
    }

    attribute_map = {
        'bracket_fees_paid': 'bracketFeesPaid',
        'bracket_id': 'bracketId',
        'event_fees_paid': 'eventFeesPaid',
        'is_registered': 'isRegistered',
        'league_id': 'leagueId',
        'payment_status': 'paymentStatus',
        'registration_status': 'registrationStatus',
        'user_id': 'userId'
    }

    def __init__(self, bracket_fees_paid=None, bracket_id=None, event_fees_paid=None, is_registered=None, league_id=None, payment_status=None, registration_status=None, user_id=None):  # noqa: E501
        """UpdateRegistrationRequest - a model defined in Swagger"""  # noqa: E501
        self._bracket_fees_paid = None
        self._bracket_id = None
        self._event_fees_paid = None
        self._is_registered = None
        self._league_id = None
        self._payment_status = None
        self._registration_status = None
        self._user_id = None
        self.discriminator = None
        if bracket_fees_paid is not None:
            self.bracket_fees_paid = bracket_fees_paid
        if bracket_id is not None:
            self.bracket_id = bracket_id
        if event_fees_paid is not None:
            self.event_fees_paid = event_fees_paid
        if is_registered is not None:
            self.is_registered = is_registered
        if league_id is not None:
            self.league_id = league_id
        if payment_status is not None:
            self.payment_status = payment_status
        if registration_status is not None:
            self.registration_status = registration_status
        if user_id is not None:
            self.user_id = user_id

    @property
    def bracket_fees_paid(self):
        """Gets the bracket_fees_paid of this UpdateRegistrationRequest.  # noqa: E501


        :return: The bracket_fees_paid of this UpdateRegistrationRequest.  # noqa: E501
        :rtype: float
        """
        return self._bracket_fees_paid

    @bracket_fees_paid.setter
    def bracket_fees_paid(self, bracket_fees_paid):
        """Sets the bracket_fees_paid of this UpdateRegistrationRequest.


        :param bracket_fees_paid: The bracket_fees_paid of this UpdateRegistrationRequest.  # noqa: E501
        :type: float
        """

        self._bracket_fees_paid = bracket_fees_paid

    @property
    def bracket_id(self):
        """Gets the bracket_id of this UpdateRegistrationRequest.  # noqa: E501


        :return: The bracket_id of this UpdateRegistrationRequest.  # noqa: E501
        :rtype: int
        """
        return self._bracket_id

    @bracket_id.setter
    def bracket_id(self, bracket_id):
        """Sets the bracket_id of this UpdateRegistrationRequest.


        :param bracket_id: The bracket_id of this UpdateRegistrationRequest.  # noqa: E501
        :type: int
        """

        self._bracket_id = bracket_id

    @property
    def event_fees_paid(self):
        """Gets the event_fees_paid of this UpdateRegistrationRequest.  # noqa: E501


        :return: The event_fees_paid of this UpdateRegistrationRequest.  # noqa: E501
        :rtype: float
        """
        return self._event_fees_paid

    @event_fees_paid.setter
    def event_fees_paid(self, event_fees_paid):
        """Sets the event_fees_paid of this UpdateRegistrationRequest.


        :param event_fees_paid: The event_fees_paid of this UpdateRegistrationRequest.  # noqa: E501
        :type: float
        """

        self._event_fees_paid = event_fees_paid

    @property
    def is_registered(self):
        """Gets the is_registered of this UpdateRegistrationRequest.  # noqa: E501


        :return: The is_registered of this UpdateRegistrationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_registered

    @is_registered.setter
    def is_registered(self, is_registered):
        """Sets the is_registered of this UpdateRegistrationRequest.


        :param is_registered: The is_registered of this UpdateRegistrationRequest.  # noqa: E501
        :type: bool
        """

        self._is_registered = is_registered

    @property
    def league_id(self):
        """Gets the league_id of this UpdateRegistrationRequest.  # noqa: E501


        :return: The league_id of this UpdateRegistrationRequest.  # noqa: E501
        :rtype: int
        """
        return self._league_id

    @league_id.setter
    def league_id(self, league_id):
        """Sets the league_id of this UpdateRegistrationRequest.


        :param league_id: The league_id of this UpdateRegistrationRequest.  # noqa: E501
        :type: int
        """

        self._league_id = league_id

    @property
    def payment_status(self):
        """Gets the payment_status of this UpdateRegistrationRequest.  # noqa: E501


        :return: The payment_status of this UpdateRegistrationRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_status

    @payment_status.setter
    def payment_status(self, payment_status):
        """Sets the payment_status of this UpdateRegistrationRequest.


        :param payment_status: The payment_status of this UpdateRegistrationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if payment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_status` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_status, allowed_values)
            )

        self._payment_status = payment_status

    @property
    def registration_status(self):
        """Gets the registration_status of this UpdateRegistrationRequest.  # noqa: E501


        :return: The registration_status of this UpdateRegistrationRequest.  # noqa: E501
        :rtype: str
        """
        return self._registration_status

    @registration_status.setter
    def registration_status(self, registration_status):
        """Sets the registration_status of this UpdateRegistrationRequest.


        :param registration_status: The registration_status of this UpdateRegistrationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if registration_status not in allowed_values:
            raise ValueError(
                "Invalid value for `registration_status` ({0}), must be one of {1}"  # noqa: E501
                .format(registration_status, allowed_values)
            )

        self._registration_status = registration_status

    @property
    def user_id(self):
        """Gets the user_id of this UpdateRegistrationRequest.  # noqa: E501


        :return: The user_id of this UpdateRegistrationRequest.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UpdateRegistrationRequest.


        :param user_id: The user_id of this UpdateRegistrationRequest.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateRegistrationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateRegistrationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

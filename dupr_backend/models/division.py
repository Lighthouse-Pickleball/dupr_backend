# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Division(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'day1_start': 'str',
        'day2_start': 'str',
        'division_code': 'str',
        'division_id': 'int',
        'division_name': 'str',
        'division_type': 'str',
        'entry_fee': 'float',
        'event_id': 'int',
        'max_teams': 'int',
        'max_waitlist': 'int',
        'prize': 'float',
        'registration_end': 'str',
        'registration_period': 'list[str]',
        'registration_start': 'str',
        'status': 'str'
    }

    attribute_map = {
        'day1_start': 'day1Start',
        'day2_start': 'day2Start',
        'division_code': 'divisionCode',
        'division_id': 'divisionId',
        'division_name': 'divisionName',
        'division_type': 'divisionType',
        'entry_fee': 'entryFee',
        'event_id': 'eventId',
        'max_teams': 'maxTeams',
        'max_waitlist': 'maxWaitlist',
        'prize': 'prize',
        'registration_end': 'registrationEnd',
        'registration_period': 'registrationPeriod',
        'registration_start': 'registrationStart',
        'status': 'status'
    }

    def __init__(self, day1_start=None, day2_start=None, division_code=None, division_id=None, division_name=None, division_type=None, entry_fee=None, event_id=None, max_teams=None, max_waitlist=None, prize=None, registration_end=None, registration_period=None, registration_start=None, status=None):  # noqa: E501
        """Division - a model defined in Swagger"""  # noqa: E501
        self._day1_start = None
        self._day2_start = None
        self._division_code = None
        self._division_id = None
        self._division_name = None
        self._division_type = None
        self._entry_fee = None
        self._event_id = None
        self._max_teams = None
        self._max_waitlist = None
        self._prize = None
        self._registration_end = None
        self._registration_period = None
        self._registration_start = None
        self._status = None
        self.discriminator = None
        if day1_start is not None:
            self.day1_start = day1_start
        if day2_start is not None:
            self.day2_start = day2_start
        self.division_code = division_code
        self.division_id = division_id
        self.division_name = division_name
        self.division_type = division_type
        if entry_fee is not None:
            self.entry_fee = entry_fee
        self.event_id = event_id
        if max_teams is not None:
            self.max_teams = max_teams
        if max_waitlist is not None:
            self.max_waitlist = max_waitlist
        self.prize = prize
        if registration_end is not None:
            self.registration_end = registration_end
        if registration_period is not None:
            self.registration_period = registration_period
        if registration_start is not None:
            self.registration_start = registration_start
        if status is not None:
            self.status = status

    @property
    def day1_start(self):
        """Gets the day1_start of this Division.  # noqa: E501


        :return: The day1_start of this Division.  # noqa: E501
        :rtype: str
        """
        return self._day1_start

    @day1_start.setter
    def day1_start(self, day1_start):
        """Sets the day1_start of this Division.


        :param day1_start: The day1_start of this Division.  # noqa: E501
        :type: str
        """

        self._day1_start = day1_start

    @property
    def day2_start(self):
        """Gets the day2_start of this Division.  # noqa: E501


        :return: The day2_start of this Division.  # noqa: E501
        :rtype: str
        """
        return self._day2_start

    @day2_start.setter
    def day2_start(self, day2_start):
        """Sets the day2_start of this Division.


        :param day2_start: The day2_start of this Division.  # noqa: E501
        :type: str
        """

        self._day2_start = day2_start

    @property
    def division_code(self):
        """Gets the division_code of this Division.  # noqa: E501


        :return: The division_code of this Division.  # noqa: E501
        :rtype: str
        """
        return self._division_code

    @division_code.setter
    def division_code(self, division_code):
        """Sets the division_code of this Division.


        :param division_code: The division_code of this Division.  # noqa: E501
        :type: str
        """
        if division_code is None:
            raise ValueError("Invalid value for `division_code`, must not be `None`")  # noqa: E501

        self._division_code = division_code

    @property
    def division_id(self):
        """Gets the division_id of this Division.  # noqa: E501


        :return: The division_id of this Division.  # noqa: E501
        :rtype: int
        """
        return self._division_id

    @division_id.setter
    def division_id(self, division_id):
        """Sets the division_id of this Division.


        :param division_id: The division_id of this Division.  # noqa: E501
        :type: int
        """
        if division_id is None:
            raise ValueError("Invalid value for `division_id`, must not be `None`")  # noqa: E501

        self._division_id = division_id

    @property
    def division_name(self):
        """Gets the division_name of this Division.  # noqa: E501


        :return: The division_name of this Division.  # noqa: E501
        :rtype: str
        """
        return self._division_name

    @division_name.setter
    def division_name(self, division_name):
        """Sets the division_name of this Division.


        :param division_name: The division_name of this Division.  # noqa: E501
        :type: str
        """
        if division_name is None:
            raise ValueError("Invalid value for `division_name`, must not be `None`")  # noqa: E501

        self._division_name = division_name

    @property
    def division_type(self):
        """Gets the division_type of this Division.  # noqa: E501


        :return: The division_type of this Division.  # noqa: E501
        :rtype: str
        """
        return self._division_type

    @division_type.setter
    def division_type(self, division_type):
        """Sets the division_type of this Division.


        :param division_type: The division_type of this Division.  # noqa: E501
        :type: str
        """
        if division_type is None:
            raise ValueError("Invalid value for `division_type`, must not be `None`")  # noqa: E501
        allowed_values = ["DUPR12", "DUPR14", "DUPR16", "DUPR18", "DUPR20", "DUPR22", "DUPR_OPEN"]  # noqa: E501
        if division_type not in allowed_values:
            raise ValueError(
                "Invalid value for `division_type` ({0}), must be one of {1}"  # noqa: E501
                .format(division_type, allowed_values)
            )

        self._division_type = division_type

    @property
    def entry_fee(self):
        """Gets the entry_fee of this Division.  # noqa: E501


        :return: The entry_fee of this Division.  # noqa: E501
        :rtype: float
        """
        return self._entry_fee

    @entry_fee.setter
    def entry_fee(self, entry_fee):
        """Sets the entry_fee of this Division.


        :param entry_fee: The entry_fee of this Division.  # noqa: E501
        :type: float
        """

        self._entry_fee = entry_fee

    @property
    def event_id(self):
        """Gets the event_id of this Division.  # noqa: E501


        :return: The event_id of this Division.  # noqa: E501
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this Division.


        :param event_id: The event_id of this Division.  # noqa: E501
        :type: int
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")  # noqa: E501

        self._event_id = event_id

    @property
    def max_teams(self):
        """Gets the max_teams of this Division.  # noqa: E501


        :return: The max_teams of this Division.  # noqa: E501
        :rtype: int
        """
        return self._max_teams

    @max_teams.setter
    def max_teams(self, max_teams):
        """Sets the max_teams of this Division.


        :param max_teams: The max_teams of this Division.  # noqa: E501
        :type: int
        """

        self._max_teams = max_teams

    @property
    def max_waitlist(self):
        """Gets the max_waitlist of this Division.  # noqa: E501


        :return: The max_waitlist of this Division.  # noqa: E501
        :rtype: int
        """
        return self._max_waitlist

    @max_waitlist.setter
    def max_waitlist(self, max_waitlist):
        """Sets the max_waitlist of this Division.


        :param max_waitlist: The max_waitlist of this Division.  # noqa: E501
        :type: int
        """

        self._max_waitlist = max_waitlist

    @property
    def prize(self):
        """Gets the prize of this Division.  # noqa: E501


        :return: The prize of this Division.  # noqa: E501
        :rtype: float
        """
        return self._prize

    @prize.setter
    def prize(self, prize):
        """Sets the prize of this Division.


        :param prize: The prize of this Division.  # noqa: E501
        :type: float
        """
        if prize is None:
            raise ValueError("Invalid value for `prize`, must not be `None`")  # noqa: E501

        self._prize = prize

    @property
    def registration_end(self):
        """Gets the registration_end of this Division.  # noqa: E501


        :return: The registration_end of this Division.  # noqa: E501
        :rtype: str
        """
        return self._registration_end

    @registration_end.setter
    def registration_end(self, registration_end):
        """Sets the registration_end of this Division.


        :param registration_end: The registration_end of this Division.  # noqa: E501
        :type: str
        """

        self._registration_end = registration_end

    @property
    def registration_period(self):
        """Gets the registration_period of this Division.  # noqa: E501


        :return: The registration_period of this Division.  # noqa: E501
        :rtype: list[str]
        """
        return self._registration_period

    @registration_period.setter
    def registration_period(self, registration_period):
        """Sets the registration_period of this Division.


        :param registration_period: The registration_period of this Division.  # noqa: E501
        :type: list[str]
        """

        self._registration_period = registration_period

    @property
    def registration_start(self):
        """Gets the registration_start of this Division.  # noqa: E501


        :return: The registration_start of this Division.  # noqa: E501
        :rtype: str
        """
        return self._registration_start

    @registration_start.setter
    def registration_start(self, registration_start):
        """Sets the registration_start of this Division.


        :param registration_start: The registration_start of this Division.  # noqa: E501
        :type: str
        """

        self._registration_start = registration_start

    @property
    def status(self):
        """Gets the status of this Division.  # noqa: E501


        :return: The status of this Division.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Division.


        :param status: The status of this Division.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Division, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Division):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

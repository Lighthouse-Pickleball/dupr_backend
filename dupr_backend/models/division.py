# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist, validator

class Division(BaseModel):
    """
    Division
    """
    day1_start: Optional[StrictStr] = Field(None, alias="day1Start")
    day2_start: Optional[StrictStr] = Field(None, alias="day2Start")
    division_code: StrictStr = Field(..., alias="divisionCode")
    division_id: StrictInt = Field(..., alias="divisionId")
    division_name: StrictStr = Field(..., alias="divisionName")
    division_type: StrictStr = Field(..., alias="divisionType")
    entry_fee: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="entryFee")
    event_id: StrictInt = Field(..., alias="eventId")
    max_teams: Optional[StrictInt] = Field(None, alias="maxTeams")
    max_waitlist: Optional[StrictInt] = Field(None, alias="maxWaitlist")
    prize: Union[StrictFloat, StrictInt] = Field(...)
    registration_end: Optional[StrictStr] = Field(None, alias="registrationEnd")
    registration_period: Optional[conlist(StrictStr)] = Field(None, alias="registrationPeriod")
    registration_start: Optional[StrictStr] = Field(None, alias="registrationStart")
    status: Optional[StrictStr] = None
    __properties = ["day1Start", "day2Start", "divisionCode", "divisionId", "divisionName", "divisionType", "entryFee", "eventId", "maxTeams", "maxWaitlist", "prize", "registrationEnd", "registrationPeriod", "registrationStart", "status"]

    @validator('division_type')
    def division_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('DUPR12', 'DUPR14', 'DUPR16', 'DUPR18', 'DUPR20', 'DUPR22', 'DUPR_OPEN'):
            raise ValueError("must be one of enum values ('DUPR12', 'DUPR14', 'DUPR16', 'DUPR18', 'DUPR20', 'DUPR22', 'DUPR_OPEN')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING'):
            raise ValueError("must be one of enum values ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Division:
        """Create an instance of Division from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Division:
        """Create an instance of Division from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Division.parse_obj(obj)

        _obj = Division.parse_obj({
            "day1_start": obj.get("day1Start"),
            "day2_start": obj.get("day2Start"),
            "division_code": obj.get("divisionCode"),
            "division_id": obj.get("divisionId"),
            "division_name": obj.get("divisionName"),
            "division_type": obj.get("divisionType"),
            "entry_fee": obj.get("entryFee"),
            "event_id": obj.get("eventId"),
            "max_teams": obj.get("maxTeams"),
            "max_waitlist": obj.get("maxWaitlist"),
            "prize": obj.get("prize"),
            "registration_end": obj.get("registrationEnd"),
            "registration_period": obj.get("registrationPeriod"),
            "registration_start": obj.get("registrationStart"),
            "status": obj.get("status")
        })
        return _obj



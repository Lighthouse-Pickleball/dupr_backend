# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LeagueMatchResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bracket_id': 'int',
        'bracket_name': 'str',
        'confirmed': 'bool',
        'display_identity': 'str',
        'end_date': 'str',
        'event_format': 'str',
        'impacted_draw': 'bool',
        'in_queue': 'bool',
        'is_bye_match': 'bool',
        'is_forfeited': 'bool',
        'is_next_round_confirmed': 'bool',
        'is_team_1_tbd': 'bool',
        'is_team_2_tbd': 'bool',
        'league_id': 'int',
        'league_match_id': 'int',
        'league_match_status': 'str',
        'league_name': 'str',
        'location': 'str',
        'match_date': 'str',
        'match_id': 'int',
        'match_score_added': 'bool',
        'match_slot': 'int',
        'no_of_games': 'int',
        'registration_id': 'int',
        'round': 'int',
        'score_format': 'ScoreFormatResponse',
        'start_date': 'str',
        'status': 'str',
        'tag': 'str',
        'tbd_1': 'int',
        'tbd_2': 'int',
        'teams': 'list[TeamResponse]',
        'user_id': 'int',
        'venue': 'str'
    }

    attribute_map = {
        'bracket_id': 'bracketId',
        'bracket_name': 'bracketName',
        'confirmed': 'confirmed',
        'display_identity': 'displayIdentity',
        'end_date': 'endDate',
        'event_format': 'eventFormat',
        'impacted_draw': 'impactedDraw',
        'in_queue': 'inQueue',
        'is_bye_match': 'isByeMatch',
        'is_forfeited': 'isForfeited',
        'is_next_round_confirmed': 'isNextRoundConfirmed',
        'is_team_1_tbd': 'is_team_1_tbd',
        'is_team_2_tbd': 'is_team_2_tbd',
        'league_id': 'leagueId',
        'league_match_id': 'leagueMatchId',
        'league_match_status': 'leagueMatchStatus',
        'league_name': 'leagueName',
        'location': 'location',
        'match_date': 'matchDate',
        'match_id': 'matchId',
        'match_score_added': 'matchScoreAdded',
        'match_slot': 'matchSlot',
        'no_of_games': 'noOfGames',
        'registration_id': 'registrationId',
        'round': 'round',
        'score_format': 'scoreFormat',
        'start_date': 'startDate',
        'status': 'status',
        'tag': 'tag',
        'tbd_1': 'tbd_1',
        'tbd_2': 'tbd_2',
        'teams': 'teams',
        'user_id': 'userId',
        'venue': 'venue'
    }

    def __init__(self, bracket_id=None, bracket_name=None, confirmed=None, display_identity=None, end_date=None, event_format=None, impacted_draw=None, in_queue=None, is_bye_match=None, is_forfeited=None, is_next_round_confirmed=None, is_team_1_tbd=None, is_team_2_tbd=None, league_id=None, league_match_id=None, league_match_status=None, league_name=None, location=None, match_date=None, match_id=None, match_score_added=None, match_slot=None, no_of_games=None, registration_id=None, round=None, score_format=None, start_date=None, status=None, tag=None, tbd_1=None, tbd_2=None, teams=None, user_id=None, venue=None):  # noqa: E501
        """LeagueMatchResponse - a model defined in Swagger"""  # noqa: E501
        self._bracket_id = None
        self._bracket_name = None
        self._confirmed = None
        self._display_identity = None
        self._end_date = None
        self._event_format = None
        self._impacted_draw = None
        self._in_queue = None
        self._is_bye_match = None
        self._is_forfeited = None
        self._is_next_round_confirmed = None
        self._is_team_1_tbd = None
        self._is_team_2_tbd = None
        self._league_id = None
        self._league_match_id = None
        self._league_match_status = None
        self._league_name = None
        self._location = None
        self._match_date = None
        self._match_id = None
        self._match_score_added = None
        self._match_slot = None
        self._no_of_games = None
        self._registration_id = None
        self._round = None
        self._score_format = None
        self._start_date = None
        self._status = None
        self._tag = None
        self._tbd_1 = None
        self._tbd_2 = None
        self._teams = None
        self._user_id = None
        self._venue = None
        self.discriminator = None
        self.bracket_id = bracket_id
        self.bracket_name = bracket_name
        if confirmed is not None:
            self.confirmed = confirmed
        self.display_identity = display_identity
        self.end_date = end_date
        self.event_format = event_format
        self.impacted_draw = impacted_draw
        if in_queue is not None:
            self.in_queue = in_queue
        self.is_bye_match = is_bye_match
        if is_forfeited is not None:
            self.is_forfeited = is_forfeited
        self.is_next_round_confirmed = is_next_round_confirmed
        if is_team_1_tbd is not None:
            self.is_team_1_tbd = is_team_1_tbd
        if is_team_2_tbd is not None:
            self.is_team_2_tbd = is_team_2_tbd
        self.league_id = league_id
        self.league_match_id = league_match_id
        if league_match_status is not None:
            self.league_match_status = league_match_status
        self.league_name = league_name
        self.location = location
        self.match_date = match_date
        if match_id is not None:
            self.match_id = match_id
        if match_score_added is not None:
            self.match_score_added = match_score_added
        self.match_slot = match_slot
        if no_of_games is not None:
            self.no_of_games = no_of_games
        self.registration_id = registration_id
        if round is not None:
            self.round = round
        self.score_format = score_format
        self.start_date = start_date
        if status is not None:
            self.status = status
        if tag is not None:
            self.tag = tag
        self.tbd_1 = tbd_1
        self.tbd_2 = tbd_2
        self.teams = teams
        if user_id is not None:
            self.user_id = user_id
        self.venue = venue

    @property
    def bracket_id(self):
        """Gets the bracket_id of this LeagueMatchResponse.  # noqa: E501


        :return: The bracket_id of this LeagueMatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._bracket_id

    @bracket_id.setter
    def bracket_id(self, bracket_id):
        """Sets the bracket_id of this LeagueMatchResponse.


        :param bracket_id: The bracket_id of this LeagueMatchResponse.  # noqa: E501
        :type: int
        """
        if bracket_id is None:
            raise ValueError("Invalid value for `bracket_id`, must not be `None`")  # noqa: E501

        self._bracket_id = bracket_id

    @property
    def bracket_name(self):
        """Gets the bracket_name of this LeagueMatchResponse.  # noqa: E501


        :return: The bracket_name of this LeagueMatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._bracket_name

    @bracket_name.setter
    def bracket_name(self, bracket_name):
        """Sets the bracket_name of this LeagueMatchResponse.


        :param bracket_name: The bracket_name of this LeagueMatchResponse.  # noqa: E501
        :type: str
        """
        if bracket_name is None:
            raise ValueError("Invalid value for `bracket_name`, must not be `None`")  # noqa: E501

        self._bracket_name = bracket_name

    @property
    def confirmed(self):
        """Gets the confirmed of this LeagueMatchResponse.  # noqa: E501


        :return: The confirmed of this LeagueMatchResponse.  # noqa: E501
        :rtype: bool
        """
        return self._confirmed

    @confirmed.setter
    def confirmed(self, confirmed):
        """Sets the confirmed of this LeagueMatchResponse.


        :param confirmed: The confirmed of this LeagueMatchResponse.  # noqa: E501
        :type: bool
        """

        self._confirmed = confirmed

    @property
    def display_identity(self):
        """Gets the display_identity of this LeagueMatchResponse.  # noqa: E501


        :return: The display_identity of this LeagueMatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._display_identity

    @display_identity.setter
    def display_identity(self, display_identity):
        """Sets the display_identity of this LeagueMatchResponse.


        :param display_identity: The display_identity of this LeagueMatchResponse.  # noqa: E501
        :type: str
        """
        if display_identity is None:
            raise ValueError("Invalid value for `display_identity`, must not be `None`")  # noqa: E501

        self._display_identity = display_identity

    @property
    def end_date(self):
        """Gets the end_date of this LeagueMatchResponse.  # noqa: E501


        :return: The end_date of this LeagueMatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this LeagueMatchResponse.


        :param end_date: The end_date of this LeagueMatchResponse.  # noqa: E501
        :type: str
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def event_format(self):
        """Gets the event_format of this LeagueMatchResponse.  # noqa: E501


        :return: The event_format of this LeagueMatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._event_format

    @event_format.setter
    def event_format(self, event_format):
        """Sets the event_format of this LeagueMatchResponse.


        :param event_format: The event_format of this LeagueMatchResponse.  # noqa: E501
        :type: str
        """
        if event_format is None:
            raise ValueError("Invalid value for `event_format`, must not be `None`")  # noqa: E501
        allowed_values = ["DOUBLES", "SINGLES"]  # noqa: E501
        if event_format not in allowed_values:
            raise ValueError(
                "Invalid value for `event_format` ({0}), must be one of {1}"  # noqa: E501
                .format(event_format, allowed_values)
            )

        self._event_format = event_format

    @property
    def impacted_draw(self):
        """Gets the impacted_draw of this LeagueMatchResponse.  # noqa: E501


        :return: The impacted_draw of this LeagueMatchResponse.  # noqa: E501
        :rtype: bool
        """
        return self._impacted_draw

    @impacted_draw.setter
    def impacted_draw(self, impacted_draw):
        """Sets the impacted_draw of this LeagueMatchResponse.


        :param impacted_draw: The impacted_draw of this LeagueMatchResponse.  # noqa: E501
        :type: bool
        """
        if impacted_draw is None:
            raise ValueError("Invalid value for `impacted_draw`, must not be `None`")  # noqa: E501

        self._impacted_draw = impacted_draw

    @property
    def in_queue(self):
        """Gets the in_queue of this LeagueMatchResponse.  # noqa: E501


        :return: The in_queue of this LeagueMatchResponse.  # noqa: E501
        :rtype: bool
        """
        return self._in_queue

    @in_queue.setter
    def in_queue(self, in_queue):
        """Sets the in_queue of this LeagueMatchResponse.


        :param in_queue: The in_queue of this LeagueMatchResponse.  # noqa: E501
        :type: bool
        """

        self._in_queue = in_queue

    @property
    def is_bye_match(self):
        """Gets the is_bye_match of this LeagueMatchResponse.  # noqa: E501


        :return: The is_bye_match of this LeagueMatchResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_bye_match

    @is_bye_match.setter
    def is_bye_match(self, is_bye_match):
        """Sets the is_bye_match of this LeagueMatchResponse.


        :param is_bye_match: The is_bye_match of this LeagueMatchResponse.  # noqa: E501
        :type: bool
        """
        if is_bye_match is None:
            raise ValueError("Invalid value for `is_bye_match`, must not be `None`")  # noqa: E501

        self._is_bye_match = is_bye_match

    @property
    def is_forfeited(self):
        """Gets the is_forfeited of this LeagueMatchResponse.  # noqa: E501


        :return: The is_forfeited of this LeagueMatchResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_forfeited

    @is_forfeited.setter
    def is_forfeited(self, is_forfeited):
        """Sets the is_forfeited of this LeagueMatchResponse.


        :param is_forfeited: The is_forfeited of this LeagueMatchResponse.  # noqa: E501
        :type: bool
        """

        self._is_forfeited = is_forfeited

    @property
    def is_next_round_confirmed(self):
        """Gets the is_next_round_confirmed of this LeagueMatchResponse.  # noqa: E501


        :return: The is_next_round_confirmed of this LeagueMatchResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_next_round_confirmed

    @is_next_round_confirmed.setter
    def is_next_round_confirmed(self, is_next_round_confirmed):
        """Sets the is_next_round_confirmed of this LeagueMatchResponse.


        :param is_next_round_confirmed: The is_next_round_confirmed of this LeagueMatchResponse.  # noqa: E501
        :type: bool
        """
        if is_next_round_confirmed is None:
            raise ValueError("Invalid value for `is_next_round_confirmed`, must not be `None`")  # noqa: E501

        self._is_next_round_confirmed = is_next_round_confirmed

    @property
    def is_team_1_tbd(self):
        """Gets the is_team_1_tbd of this LeagueMatchResponse.  # noqa: E501


        :return: The is_team_1_tbd of this LeagueMatchResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_team_1_tbd

    @is_team_1_tbd.setter
    def is_team_1_tbd(self, is_team_1_tbd):
        """Sets the is_team_1_tbd of this LeagueMatchResponse.


        :param is_team_1_tbd: The is_team_1_tbd of this LeagueMatchResponse.  # noqa: E501
        :type: bool
        """

        self._is_team_1_tbd = is_team_1_tbd

    @property
    def is_team_2_tbd(self):
        """Gets the is_team_2_tbd of this LeagueMatchResponse.  # noqa: E501


        :return: The is_team_2_tbd of this LeagueMatchResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_team_2_tbd

    @is_team_2_tbd.setter
    def is_team_2_tbd(self, is_team_2_tbd):
        """Sets the is_team_2_tbd of this LeagueMatchResponse.


        :param is_team_2_tbd: The is_team_2_tbd of this LeagueMatchResponse.  # noqa: E501
        :type: bool
        """

        self._is_team_2_tbd = is_team_2_tbd

    @property
    def league_id(self):
        """Gets the league_id of this LeagueMatchResponse.  # noqa: E501


        :return: The league_id of this LeagueMatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._league_id

    @league_id.setter
    def league_id(self, league_id):
        """Sets the league_id of this LeagueMatchResponse.


        :param league_id: The league_id of this LeagueMatchResponse.  # noqa: E501
        :type: int
        """
        if league_id is None:
            raise ValueError("Invalid value for `league_id`, must not be `None`")  # noqa: E501

        self._league_id = league_id

    @property
    def league_match_id(self):
        """Gets the league_match_id of this LeagueMatchResponse.  # noqa: E501


        :return: The league_match_id of this LeagueMatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._league_match_id

    @league_match_id.setter
    def league_match_id(self, league_match_id):
        """Sets the league_match_id of this LeagueMatchResponse.


        :param league_match_id: The league_match_id of this LeagueMatchResponse.  # noqa: E501
        :type: int
        """
        if league_match_id is None:
            raise ValueError("Invalid value for `league_match_id`, must not be `None`")  # noqa: E501

        self._league_match_id = league_match_id

    @property
    def league_match_status(self):
        """Gets the league_match_status of this LeagueMatchResponse.  # noqa: E501


        :return: The league_match_status of this LeagueMatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._league_match_status

    @league_match_status.setter
    def league_match_status(self, league_match_status):
        """Sets the league_match_status of this LeagueMatchResponse.


        :param league_match_status: The league_match_status of this LeagueMatchResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if league_match_status not in allowed_values:
            raise ValueError(
                "Invalid value for `league_match_status` ({0}), must be one of {1}"  # noqa: E501
                .format(league_match_status, allowed_values)
            )

        self._league_match_status = league_match_status

    @property
    def league_name(self):
        """Gets the league_name of this LeagueMatchResponse.  # noqa: E501


        :return: The league_name of this LeagueMatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._league_name

    @league_name.setter
    def league_name(self, league_name):
        """Sets the league_name of this LeagueMatchResponse.


        :param league_name: The league_name of this LeagueMatchResponse.  # noqa: E501
        :type: str
        """
        if league_name is None:
            raise ValueError("Invalid value for `league_name`, must not be `None`")  # noqa: E501

        self._league_name = league_name

    @property
    def location(self):
        """Gets the location of this LeagueMatchResponse.  # noqa: E501


        :return: The location of this LeagueMatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this LeagueMatchResponse.


        :param location: The location of this LeagueMatchResponse.  # noqa: E501
        :type: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def match_date(self):
        """Gets the match_date of this LeagueMatchResponse.  # noqa: E501


        :return: The match_date of this LeagueMatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._match_date

    @match_date.setter
    def match_date(self, match_date):
        """Sets the match_date of this LeagueMatchResponse.


        :param match_date: The match_date of this LeagueMatchResponse.  # noqa: E501
        :type: str
        """
        if match_date is None:
            raise ValueError("Invalid value for `match_date`, must not be `None`")  # noqa: E501

        self._match_date = match_date

    @property
    def match_id(self):
        """Gets the match_id of this LeagueMatchResponse.  # noqa: E501


        :return: The match_id of this LeagueMatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id):
        """Sets the match_id of this LeagueMatchResponse.


        :param match_id: The match_id of this LeagueMatchResponse.  # noqa: E501
        :type: int
        """

        self._match_id = match_id

    @property
    def match_score_added(self):
        """Gets the match_score_added of this LeagueMatchResponse.  # noqa: E501


        :return: The match_score_added of this LeagueMatchResponse.  # noqa: E501
        :rtype: bool
        """
        return self._match_score_added

    @match_score_added.setter
    def match_score_added(self, match_score_added):
        """Sets the match_score_added of this LeagueMatchResponse.


        :param match_score_added: The match_score_added of this LeagueMatchResponse.  # noqa: E501
        :type: bool
        """

        self._match_score_added = match_score_added

    @property
    def match_slot(self):
        """Gets the match_slot of this LeagueMatchResponse.  # noqa: E501


        :return: The match_slot of this LeagueMatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._match_slot

    @match_slot.setter
    def match_slot(self, match_slot):
        """Sets the match_slot of this LeagueMatchResponse.


        :param match_slot: The match_slot of this LeagueMatchResponse.  # noqa: E501
        :type: int
        """
        if match_slot is None:
            raise ValueError("Invalid value for `match_slot`, must not be `None`")  # noqa: E501

        self._match_slot = match_slot

    @property
    def no_of_games(self):
        """Gets the no_of_games of this LeagueMatchResponse.  # noqa: E501


        :return: The no_of_games of this LeagueMatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._no_of_games

    @no_of_games.setter
    def no_of_games(self, no_of_games):
        """Sets the no_of_games of this LeagueMatchResponse.


        :param no_of_games: The no_of_games of this LeagueMatchResponse.  # noqa: E501
        :type: int
        """

        self._no_of_games = no_of_games

    @property
    def registration_id(self):
        """Gets the registration_id of this LeagueMatchResponse.  # noqa: E501


        :return: The registration_id of this LeagueMatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._registration_id

    @registration_id.setter
    def registration_id(self, registration_id):
        """Sets the registration_id of this LeagueMatchResponse.


        :param registration_id: The registration_id of this LeagueMatchResponse.  # noqa: E501
        :type: int
        """
        if registration_id is None:
            raise ValueError("Invalid value for `registration_id`, must not be `None`")  # noqa: E501

        self._registration_id = registration_id

    @property
    def round(self):
        """Gets the round of this LeagueMatchResponse.  # noqa: E501


        :return: The round of this LeagueMatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._round

    @round.setter
    def round(self, round):
        """Sets the round of this LeagueMatchResponse.


        :param round: The round of this LeagueMatchResponse.  # noqa: E501
        :type: int
        """

        self._round = round

    @property
    def score_format(self):
        """Gets the score_format of this LeagueMatchResponse.  # noqa: E501


        :return: The score_format of this LeagueMatchResponse.  # noqa: E501
        :rtype: ScoreFormatResponse
        """
        return self._score_format

    @score_format.setter
    def score_format(self, score_format):
        """Sets the score_format of this LeagueMatchResponse.


        :param score_format: The score_format of this LeagueMatchResponse.  # noqa: E501
        :type: ScoreFormatResponse
        """
        if score_format is None:
            raise ValueError("Invalid value for `score_format`, must not be `None`")  # noqa: E501

        self._score_format = score_format

    @property
    def start_date(self):
        """Gets the start_date of this LeagueMatchResponse.  # noqa: E501


        :return: The start_date of this LeagueMatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this LeagueMatchResponse.


        :param start_date: The start_date of this LeagueMatchResponse.  # noqa: E501
        :type: str
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def status(self):
        """Gets the status of this LeagueMatchResponse.  # noqa: E501


        :return: The status of this LeagueMatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LeagueMatchResponse.


        :param status: The status of this LeagueMatchResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tag(self):
        """Gets the tag of this LeagueMatchResponse.  # noqa: E501


        :return: The tag of this LeagueMatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this LeagueMatchResponse.


        :param tag: The tag of this LeagueMatchResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["EAST", "NORTH", "NORTH_EAST", "NORTH_WEST", "SOUTH", "SOUTH_EAST", "SOUTH_WEST", "WEST"]  # noqa: E501
        if tag not in allowed_values:
            raise ValueError(
                "Invalid value for `tag` ({0}), must be one of {1}"  # noqa: E501
                .format(tag, allowed_values)
            )

        self._tag = tag

    @property
    def tbd_1(self):
        """Gets the tbd_1 of this LeagueMatchResponse.  # noqa: E501


        :return: The tbd_1 of this LeagueMatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._tbd_1

    @tbd_1.setter
    def tbd_1(self, tbd_1):
        """Sets the tbd_1 of this LeagueMatchResponse.


        :param tbd_1: The tbd_1 of this LeagueMatchResponse.  # noqa: E501
        :type: int
        """
        if tbd_1 is None:
            raise ValueError("Invalid value for `tbd_1`, must not be `None`")  # noqa: E501

        self._tbd_1 = tbd_1

    @property
    def tbd_2(self):
        """Gets the tbd_2 of this LeagueMatchResponse.  # noqa: E501


        :return: The tbd_2 of this LeagueMatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._tbd_2

    @tbd_2.setter
    def tbd_2(self, tbd_2):
        """Sets the tbd_2 of this LeagueMatchResponse.


        :param tbd_2: The tbd_2 of this LeagueMatchResponse.  # noqa: E501
        :type: int
        """
        if tbd_2 is None:
            raise ValueError("Invalid value for `tbd_2`, must not be `None`")  # noqa: E501

        self._tbd_2 = tbd_2

    @property
    def teams(self):
        """Gets the teams of this LeagueMatchResponse.  # noqa: E501


        :return: The teams of this LeagueMatchResponse.  # noqa: E501
        :rtype: list[TeamResponse]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this LeagueMatchResponse.


        :param teams: The teams of this LeagueMatchResponse.  # noqa: E501
        :type: list[TeamResponse]
        """
        if teams is None:
            raise ValueError("Invalid value for `teams`, must not be `None`")  # noqa: E501

        self._teams = teams

    @property
    def user_id(self):
        """Gets the user_id of this LeagueMatchResponse.  # noqa: E501


        :return: The user_id of this LeagueMatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this LeagueMatchResponse.


        :param user_id: The user_id of this LeagueMatchResponse.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def venue(self):
        """Gets the venue of this LeagueMatchResponse.  # noqa: E501


        :return: The venue of this LeagueMatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this LeagueMatchResponse.


        :param venue: The venue of this LeagueMatchResponse.  # noqa: E501
        :type: str
        """
        if venue is None:
            raise ValueError("Invalid value for `venue`, must not be `None`")  # noqa: E501

        self._venue = venue

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LeagueMatchResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LeagueMatchResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Team0(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delta': 'float',
        'game1': 'int',
        'game2': 'int',
        'game3': 'int',
        'game4': 'int',
        'game5': 'int',
        'id': 'int',
        'league_match_team_id': 'int',
        'player1': 'Player',
        'player1_doubles_rating': 'float',
        'player1_singles_rating': 'float',
        'player2': 'Player',
        'player2_doubles_rating': 'float',
        'player2_singles_rating': 'float',
        'player_ids': 'list[int]',
        'pre_match_rating_and_impact': 'PreMatchRatingAndImpact',
        'priority': 'int',
        'team_player1': 'TeamPlayer',
        'team_player2': 'TeamPlayer',
        'team_rating': 'float',
        'winner': 'bool'
    }

    attribute_map = {
        'delta': 'delta',
        'game1': 'game1',
        'game2': 'game2',
        'game3': 'game3',
        'game4': 'game4',
        'game5': 'game5',
        'id': 'id',
        'league_match_team_id': 'leagueMatchTeamId',
        'player1': 'player1',
        'player1_doubles_rating': 'player1DoublesRating',
        'player1_singles_rating': 'player1SinglesRating',
        'player2': 'player2',
        'player2_doubles_rating': 'player2DoublesRating',
        'player2_singles_rating': 'player2SinglesRating',
        'player_ids': 'playerIds',
        'pre_match_rating_and_impact': 'preMatchRatingAndImpact',
        'priority': 'priority',
        'team_player1': 'teamPlayer1',
        'team_player2': 'teamPlayer2',
        'team_rating': 'teamRating',
        'winner': 'winner'
    }

    def __init__(self, delta=None, game1=None, game2=None, game3=None, game4=None, game5=None, id=None, league_match_team_id=None, player1=None, player1_doubles_rating=None, player1_singles_rating=None, player2=None, player2_doubles_rating=None, player2_singles_rating=None, player_ids=None, pre_match_rating_and_impact=None, priority=None, team_player1=None, team_player2=None, team_rating=None, winner=None):  # noqa: E501
        """Team0 - a model defined in Swagger"""  # noqa: E501
        self._delta = None
        self._game1 = None
        self._game2 = None
        self._game3 = None
        self._game4 = None
        self._game5 = None
        self._id = None
        self._league_match_team_id = None
        self._player1 = None
        self._player1_doubles_rating = None
        self._player1_singles_rating = None
        self._player2 = None
        self._player2_doubles_rating = None
        self._player2_singles_rating = None
        self._player_ids = None
        self._pre_match_rating_and_impact = None
        self._priority = None
        self._team_player1 = None
        self._team_player2 = None
        self._team_rating = None
        self._winner = None
        self.discriminator = None
        if delta is not None:
            self.delta = delta
        if game1 is not None:
            self.game1 = game1
        if game2 is not None:
            self.game2 = game2
        if game3 is not None:
            self.game3 = game3
        if game4 is not None:
            self.game4 = game4
        if game5 is not None:
            self.game5 = game5
        if id is not None:
            self.id = id
        if league_match_team_id is not None:
            self.league_match_team_id = league_match_team_id
        if player1 is not None:
            self.player1 = player1
        if player1_doubles_rating is not None:
            self.player1_doubles_rating = player1_doubles_rating
        if player1_singles_rating is not None:
            self.player1_singles_rating = player1_singles_rating
        if player2 is not None:
            self.player2 = player2
        if player2_doubles_rating is not None:
            self.player2_doubles_rating = player2_doubles_rating
        if player2_singles_rating is not None:
            self.player2_singles_rating = player2_singles_rating
        self.player_ids = player_ids
        if pre_match_rating_and_impact is not None:
            self.pre_match_rating_and_impact = pre_match_rating_and_impact
        self.priority = priority
        if team_player1 is not None:
            self.team_player1 = team_player1
        if team_player2 is not None:
            self.team_player2 = team_player2
        if team_rating is not None:
            self.team_rating = team_rating
        self.winner = winner

    @property
    def delta(self):
        """Gets the delta of this Team0.  # noqa: E501


        :return: The delta of this Team0.  # noqa: E501
        :rtype: float
        """
        return self._delta

    @delta.setter
    def delta(self, delta):
        """Sets the delta of this Team0.


        :param delta: The delta of this Team0.  # noqa: E501
        :type: float
        """

        self._delta = delta

    @property
    def game1(self):
        """Gets the game1 of this Team0.  # noqa: E501


        :return: The game1 of this Team0.  # noqa: E501
        :rtype: int
        """
        return self._game1

    @game1.setter
    def game1(self, game1):
        """Sets the game1 of this Team0.


        :param game1: The game1 of this Team0.  # noqa: E501
        :type: int
        """

        self._game1 = game1

    @property
    def game2(self):
        """Gets the game2 of this Team0.  # noqa: E501


        :return: The game2 of this Team0.  # noqa: E501
        :rtype: int
        """
        return self._game2

    @game2.setter
    def game2(self, game2):
        """Sets the game2 of this Team0.


        :param game2: The game2 of this Team0.  # noqa: E501
        :type: int
        """

        self._game2 = game2

    @property
    def game3(self):
        """Gets the game3 of this Team0.  # noqa: E501


        :return: The game3 of this Team0.  # noqa: E501
        :rtype: int
        """
        return self._game3

    @game3.setter
    def game3(self, game3):
        """Sets the game3 of this Team0.


        :param game3: The game3 of this Team0.  # noqa: E501
        :type: int
        """

        self._game3 = game3

    @property
    def game4(self):
        """Gets the game4 of this Team0.  # noqa: E501


        :return: The game4 of this Team0.  # noqa: E501
        :rtype: int
        """
        return self._game4

    @game4.setter
    def game4(self, game4):
        """Sets the game4 of this Team0.


        :param game4: The game4 of this Team0.  # noqa: E501
        :type: int
        """

        self._game4 = game4

    @property
    def game5(self):
        """Gets the game5 of this Team0.  # noqa: E501


        :return: The game5 of this Team0.  # noqa: E501
        :rtype: int
        """
        return self._game5

    @game5.setter
    def game5(self, game5):
        """Sets the game5 of this Team0.


        :param game5: The game5 of this Team0.  # noqa: E501
        :type: int
        """

        self._game5 = game5

    @property
    def id(self):
        """Gets the id of this Team0.  # noqa: E501


        :return: The id of this Team0.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Team0.


        :param id: The id of this Team0.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def league_match_team_id(self):
        """Gets the league_match_team_id of this Team0.  # noqa: E501


        :return: The league_match_team_id of this Team0.  # noqa: E501
        :rtype: int
        """
        return self._league_match_team_id

    @league_match_team_id.setter
    def league_match_team_id(self, league_match_team_id):
        """Sets the league_match_team_id of this Team0.


        :param league_match_team_id: The league_match_team_id of this Team0.  # noqa: E501
        :type: int
        """

        self._league_match_team_id = league_match_team_id

    @property
    def player1(self):
        """Gets the player1 of this Team0.  # noqa: E501


        :return: The player1 of this Team0.  # noqa: E501
        :rtype: Player
        """
        return self._player1

    @player1.setter
    def player1(self, player1):
        """Sets the player1 of this Team0.


        :param player1: The player1 of this Team0.  # noqa: E501
        :type: Player
        """

        self._player1 = player1

    @property
    def player1_doubles_rating(self):
        """Gets the player1_doubles_rating of this Team0.  # noqa: E501


        :return: The player1_doubles_rating of this Team0.  # noqa: E501
        :rtype: float
        """
        return self._player1_doubles_rating

    @player1_doubles_rating.setter
    def player1_doubles_rating(self, player1_doubles_rating):
        """Sets the player1_doubles_rating of this Team0.


        :param player1_doubles_rating: The player1_doubles_rating of this Team0.  # noqa: E501
        :type: float
        """

        self._player1_doubles_rating = player1_doubles_rating

    @property
    def player1_singles_rating(self):
        """Gets the player1_singles_rating of this Team0.  # noqa: E501


        :return: The player1_singles_rating of this Team0.  # noqa: E501
        :rtype: float
        """
        return self._player1_singles_rating

    @player1_singles_rating.setter
    def player1_singles_rating(self, player1_singles_rating):
        """Sets the player1_singles_rating of this Team0.


        :param player1_singles_rating: The player1_singles_rating of this Team0.  # noqa: E501
        :type: float
        """

        self._player1_singles_rating = player1_singles_rating

    @property
    def player2(self):
        """Gets the player2 of this Team0.  # noqa: E501


        :return: The player2 of this Team0.  # noqa: E501
        :rtype: Player
        """
        return self._player2

    @player2.setter
    def player2(self, player2):
        """Sets the player2 of this Team0.


        :param player2: The player2 of this Team0.  # noqa: E501
        :type: Player
        """

        self._player2 = player2

    @property
    def player2_doubles_rating(self):
        """Gets the player2_doubles_rating of this Team0.  # noqa: E501


        :return: The player2_doubles_rating of this Team0.  # noqa: E501
        :rtype: float
        """
        return self._player2_doubles_rating

    @player2_doubles_rating.setter
    def player2_doubles_rating(self, player2_doubles_rating):
        """Sets the player2_doubles_rating of this Team0.


        :param player2_doubles_rating: The player2_doubles_rating of this Team0.  # noqa: E501
        :type: float
        """

        self._player2_doubles_rating = player2_doubles_rating

    @property
    def player2_singles_rating(self):
        """Gets the player2_singles_rating of this Team0.  # noqa: E501


        :return: The player2_singles_rating of this Team0.  # noqa: E501
        :rtype: float
        """
        return self._player2_singles_rating

    @player2_singles_rating.setter
    def player2_singles_rating(self, player2_singles_rating):
        """Sets the player2_singles_rating of this Team0.


        :param player2_singles_rating: The player2_singles_rating of this Team0.  # noqa: E501
        :type: float
        """

        self._player2_singles_rating = player2_singles_rating

    @property
    def player_ids(self):
        """Gets the player_ids of this Team0.  # noqa: E501


        :return: The player_ids of this Team0.  # noqa: E501
        :rtype: list[int]
        """
        return self._player_ids

    @player_ids.setter
    def player_ids(self, player_ids):
        """Sets the player_ids of this Team0.


        :param player_ids: The player_ids of this Team0.  # noqa: E501
        :type: list[int]
        """
        if player_ids is None:
            raise ValueError("Invalid value for `player_ids`, must not be `None`")  # noqa: E501

        self._player_ids = player_ids

    @property
    def pre_match_rating_and_impact(self):
        """Gets the pre_match_rating_and_impact of this Team0.  # noqa: E501


        :return: The pre_match_rating_and_impact of this Team0.  # noqa: E501
        :rtype: PreMatchRatingAndImpact
        """
        return self._pre_match_rating_and_impact

    @pre_match_rating_and_impact.setter
    def pre_match_rating_and_impact(self, pre_match_rating_and_impact):
        """Sets the pre_match_rating_and_impact of this Team0.


        :param pre_match_rating_and_impact: The pre_match_rating_and_impact of this Team0.  # noqa: E501
        :type: PreMatchRatingAndImpact
        """

        self._pre_match_rating_and_impact = pre_match_rating_and_impact

    @property
    def priority(self):
        """Gets the priority of this Team0.  # noqa: E501


        :return: The priority of this Team0.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Team0.


        :param priority: The priority of this Team0.  # noqa: E501
        :type: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501

        self._priority = priority

    @property
    def team_player1(self):
        """Gets the team_player1 of this Team0.  # noqa: E501


        :return: The team_player1 of this Team0.  # noqa: E501
        :rtype: TeamPlayer
        """
        return self._team_player1

    @team_player1.setter
    def team_player1(self, team_player1):
        """Sets the team_player1 of this Team0.


        :param team_player1: The team_player1 of this Team0.  # noqa: E501
        :type: TeamPlayer
        """

        self._team_player1 = team_player1

    @property
    def team_player2(self):
        """Gets the team_player2 of this Team0.  # noqa: E501


        :return: The team_player2 of this Team0.  # noqa: E501
        :rtype: TeamPlayer
        """
        return self._team_player2

    @team_player2.setter
    def team_player2(self, team_player2):
        """Sets the team_player2 of this Team0.


        :param team_player2: The team_player2 of this Team0.  # noqa: E501
        :type: TeamPlayer
        """

        self._team_player2 = team_player2

    @property
    def team_rating(self):
        """Gets the team_rating of this Team0.  # noqa: E501


        :return: The team_rating of this Team0.  # noqa: E501
        :rtype: float
        """
        return self._team_rating

    @team_rating.setter
    def team_rating(self, team_rating):
        """Sets the team_rating of this Team0.


        :param team_rating: The team_rating of this Team0.  # noqa: E501
        :type: float
        """

        self._team_rating = team_rating

    @property
    def winner(self):
        """Gets the winner of this Team0.  # noqa: E501


        :return: The winner of this Team0.  # noqa: E501
        :rtype: bool
        """
        return self._winner

    @winner.setter
    def winner(self, winner):
        """Sets the winner of this Team0.


        :param winner: The winner of this Team0.  # noqa: E501
        :type: bool
        """
        if winner is None:
            raise ValueError("Invalid value for `winner`, must not be `None`")  # noqa: E501

        self._winner = winner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Team0, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Team0):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

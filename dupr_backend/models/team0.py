# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, conlist
from dupr_backend.models.player import Player
from dupr_backend.models.pre_match_rating_and_impact import PreMatchRatingAndImpact
from dupr_backend.models.team_player import TeamPlayer

class Team0(BaseModel):
    """
    Team0
    """
    delta: Optional[Union[StrictFloat, StrictInt]] = None
    game1: Optional[StrictInt] = None
    game2: Optional[StrictInt] = None
    game3: Optional[StrictInt] = None
    game4: Optional[StrictInt] = None
    game5: Optional[StrictInt] = None
    id: Optional[StrictInt] = None
    league_match_team_id: Optional[StrictInt] = Field(None, alias="leagueMatchTeamId")
    player1: Optional[Player] = None
    player1_doubles_rating: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="player1DoublesRating")
    player1_singles_rating: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="player1SinglesRating")
    player2: Optional[Player] = None
    player2_doubles_rating: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="player2DoublesRating")
    player2_singles_rating: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="player2SinglesRating")
    player_ids: conlist(StrictInt) = Field(..., alias="playerIds")
    pre_match_rating_and_impact: Optional[PreMatchRatingAndImpact] = Field(None, alias="preMatchRatingAndImpact")
    priority: StrictInt = Field(...)
    team_player1: Optional[TeamPlayer] = Field(None, alias="teamPlayer1")
    team_player2: Optional[TeamPlayer] = Field(None, alias="teamPlayer2")
    team_rating: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="teamRating")
    winner: StrictBool = Field(...)
    __properties = ["delta", "game1", "game2", "game3", "game4", "game5", "id", "leagueMatchTeamId", "player1", "player1DoublesRating", "player1SinglesRating", "player2", "player2DoublesRating", "player2SinglesRating", "playerIds", "preMatchRatingAndImpact", "priority", "teamPlayer1", "teamPlayer2", "teamRating", "winner"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Team0:
        """Create an instance of Team0 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of player1
        if self.player1:
            _dict['player1'] = self.player1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of player2
        if self.player2:
            _dict['player2'] = self.player2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pre_match_rating_and_impact
        if self.pre_match_rating_and_impact:
            _dict['preMatchRatingAndImpact'] = self.pre_match_rating_and_impact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team_player1
        if self.team_player1:
            _dict['teamPlayer1'] = self.team_player1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team_player2
        if self.team_player2:
            _dict['teamPlayer2'] = self.team_player2.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Team0:
        """Create an instance of Team0 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Team0.parse_obj(obj)

        _obj = Team0.parse_obj({
            "delta": obj.get("delta"),
            "game1": obj.get("game1"),
            "game2": obj.get("game2"),
            "game3": obj.get("game3"),
            "game4": obj.get("game4"),
            "game5": obj.get("game5"),
            "id": obj.get("id"),
            "league_match_team_id": obj.get("leagueMatchTeamId"),
            "player1": Player.from_dict(obj.get("player1")) if obj.get("player1") is not None else None,
            "player1_doubles_rating": obj.get("player1DoublesRating"),
            "player1_singles_rating": obj.get("player1SinglesRating"),
            "player2": Player.from_dict(obj.get("player2")) if obj.get("player2") is not None else None,
            "player2_doubles_rating": obj.get("player2DoublesRating"),
            "player2_singles_rating": obj.get("player2SinglesRating"),
            "player_ids": obj.get("playerIds"),
            "pre_match_rating_and_impact": PreMatchRatingAndImpact.from_dict(obj.get("preMatchRatingAndImpact")) if obj.get("preMatchRatingAndImpact") is not None else None,
            "priority": obj.get("priority"),
            "team_player1": TeamPlayer.from_dict(obj.get("teamPlayer1")) if obj.get("teamPlayer1") is not None else None,
            "team_player2": TeamPlayer.from_dict(obj.get("teamPlayer2")) if obj.get("teamPlayer2") is not None else None,
            "team_rating": obj.get("teamRating"),
            "winner": obj.get("winner")
        })
        return _obj



# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SeedMatchReq(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bye': 'bool',
        'match_serial': 'int',
        'serial': 'int',
        'team1': 'LeagueTeamsReq',
        'team2': 'LeagueTeamsReq'
    }

    attribute_map = {
        'bye': 'bye',
        'match_serial': 'matchSerial',
        'serial': 'serial',
        'team1': 'team1',
        'team2': 'team2'
    }

    def __init__(self, bye=None, match_serial=None, serial=None, team1=None, team2=None):  # noqa: E501
        """SeedMatchReq - a model defined in Swagger"""  # noqa: E501
        self._bye = None
        self._match_serial = None
        self._serial = None
        self._team1 = None
        self._team2 = None
        self.discriminator = None
        if bye is not None:
            self.bye = bye
        if match_serial is not None:
            self.match_serial = match_serial
        self.serial = serial
        if team1 is not None:
            self.team1 = team1
        if team2 is not None:
            self.team2 = team2

    @property
    def bye(self):
        """Gets the bye of this SeedMatchReq.  # noqa: E501


        :return: The bye of this SeedMatchReq.  # noqa: E501
        :rtype: bool
        """
        return self._bye

    @bye.setter
    def bye(self, bye):
        """Sets the bye of this SeedMatchReq.


        :param bye: The bye of this SeedMatchReq.  # noqa: E501
        :type: bool
        """

        self._bye = bye

    @property
    def match_serial(self):
        """Gets the match_serial of this SeedMatchReq.  # noqa: E501


        :return: The match_serial of this SeedMatchReq.  # noqa: E501
        :rtype: int
        """
        return self._match_serial

    @match_serial.setter
    def match_serial(self, match_serial):
        """Sets the match_serial of this SeedMatchReq.


        :param match_serial: The match_serial of this SeedMatchReq.  # noqa: E501
        :type: int
        """

        self._match_serial = match_serial

    @property
    def serial(self):
        """Gets the serial of this SeedMatchReq.  # noqa: E501


        :return: The serial of this SeedMatchReq.  # noqa: E501
        :rtype: int
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this SeedMatchReq.


        :param serial: The serial of this SeedMatchReq.  # noqa: E501
        :type: int
        """
        if serial is None:
            raise ValueError("Invalid value for `serial`, must not be `None`")  # noqa: E501

        self._serial = serial

    @property
    def team1(self):
        """Gets the team1 of this SeedMatchReq.  # noqa: E501


        :return: The team1 of this SeedMatchReq.  # noqa: E501
        :rtype: LeagueTeamsReq
        """
        return self._team1

    @team1.setter
    def team1(self, team1):
        """Sets the team1 of this SeedMatchReq.


        :param team1: The team1 of this SeedMatchReq.  # noqa: E501
        :type: LeagueTeamsReq
        """

        self._team1 = team1

    @property
    def team2(self):
        """Gets the team2 of this SeedMatchReq.  # noqa: E501


        :return: The team2 of this SeedMatchReq.  # noqa: E501
        :rtype: LeagueTeamsReq
        """
        return self._team2

    @team2.setter
    def team2(self, team2):
        """Sets the team2 of this SeedMatchReq.


        :param team2: The team2 of this SeedMatchReq.  # noqa: E501
        :type: LeagueTeamsReq
        """

        self._team2 = team2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SeedMatchReq, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SeedMatchReq):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

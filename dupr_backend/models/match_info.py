# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class MatchInfo(BaseModel):
    """
    MatchInfo
    """
    event_format: StrictStr = Field(..., alias="eventFormat")
    event_name: Optional[StrictStr] = Field(None, alias="eventName")
    match_source: StrictStr = Field(..., alias="matchSource")
    __properties = ["eventFormat", "eventName", "matchSource"]

    @validator('event_format')
    def event_format_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('DOUBLES', 'SINGLES'):
            raise ValueError("must be one of enum values ('DOUBLES', 'SINGLES')")
        return value

    @validator('match_source')
    def match_source_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('CLUB', 'DUPR', 'EXTERNAL', 'LEAGUE', 'MANUAL', 'PARTNER', 'TOURNAMENT'):
            raise ValueError("must be one of enum values ('CLUB', 'DUPR', 'EXTERNAL', 'LEAGUE', 'MANUAL', 'PARTNER', 'TOURNAMENT')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MatchInfo:
        """Create an instance of MatchInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MatchInfo:
        """Create an instance of MatchInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MatchInfo.parse_obj(obj)

        _obj = MatchInfo.parse_obj({
            "event_format": obj.get("eventFormat"),
            "event_name": obj.get("eventName"),
            "match_source": obj.get("matchSource")
        })
        return _obj



# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, validator
from dupr_backend.models.pair_ofint_andint import PairOfintAndint
from dupr_backend.models.team import Team

class MatchRequest(BaseModel):
    """
    MatchRequest
    """
    club_id: Optional[StrictInt] = Field(None, alias="clubId")
    event: Optional[StrictStr] = None
    event_date: date = Field(..., alias="eventDate")
    format: StrictStr = Field(...)
    league: Optional[StrictStr] = None
    location: Optional[StrictStr] = None
    match_type: Optional[StrictStr] = Field(None, alias="matchType")
    notify: Optional[StrictBool] = None
    score_format_id: Optional[StrictInt] = Field(None, alias="scoreFormatId")
    scores: conlist(PairOfintAndint) = Field(...)
    team1: Team = Field(...)
    team2: Team = Field(...)
    tournament: Optional[StrictStr] = None
    venue: Optional[StrictStr] = None
    __properties = ["clubId", "event", "eventDate", "format", "league", "location", "matchType", "notify", "scoreFormatId", "scores", "team1", "team2", "tournament", "venue"]

    @validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('DOUBLES', 'SINGLES'):
            raise ValueError("must be one of enum values ('DOUBLES', 'SINGLES')")
        return value

    @validator('match_type')
    def match_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('RALLY', 'SIDE_ONLY'):
            raise ValueError("must be one of enum values ('RALLY', 'SIDE_ONLY')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MatchRequest:
        """Create an instance of MatchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in scores (list)
        _items = []
        if self.scores:
            for _item in self.scores:
                if _item:
                    _items.append(_item.to_dict())
            _dict['scores'] = _items
        # override the default output from pydantic by calling `to_dict()` of team1
        if self.team1:
            _dict['team1'] = self.team1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team2
        if self.team2:
            _dict['team2'] = self.team2.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MatchRequest:
        """Create an instance of MatchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MatchRequest.parse_obj(obj)

        _obj = MatchRequest.parse_obj({
            "club_id": obj.get("clubId"),
            "event": obj.get("event"),
            "event_date": obj.get("eventDate"),
            "format": obj.get("format"),
            "league": obj.get("league"),
            "location": obj.get("location"),
            "match_type": obj.get("matchType"),
            "notify": obj.get("notify"),
            "score_format_id": obj.get("scoreFormatId"),
            "scores": [PairOfintAndint.from_dict(_item) for _item in obj.get("scores")] if obj.get("scores") is not None else None,
            "team1": Team.from_dict(obj.get("team1")) if obj.get("team1") is not None else None,
            "team2": Team.from_dict(obj.get("team2")) if obj.get("team2") is not None else None,
            "tournament": obj.get("tournament"),
            "venue": obj.get("venue")
        })
        return _obj



# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnnouncementsNotifications(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'announcement_id': 'int',
        'bracket_id': 'int',
        'email_sent': 'bool',
        'league_id': 'int',
        'push_sent': 'bool',
        'sms_sent': 'bool',
        'user_id': 'int'
    }

    attribute_map = {
        'announcement_id': 'announcementId',
        'bracket_id': 'bracketId',
        'email_sent': 'emailSent',
        'league_id': 'leagueId',
        'push_sent': 'pushSent',
        'sms_sent': 'smsSent',
        'user_id': 'userId'
    }

    def __init__(self, announcement_id=None, bracket_id=None, email_sent=None, league_id=None, push_sent=None, sms_sent=None, user_id=None):  # noqa: E501
        """AnnouncementsNotifications - a model defined in Swagger"""  # noqa: E501
        self._announcement_id = None
        self._bracket_id = None
        self._email_sent = None
        self._league_id = None
        self._push_sent = None
        self._sms_sent = None
        self._user_id = None
        self.discriminator = None
        if announcement_id is not None:
            self.announcement_id = announcement_id
        if bracket_id is not None:
            self.bracket_id = bracket_id
        if email_sent is not None:
            self.email_sent = email_sent
        if league_id is not None:
            self.league_id = league_id
        if push_sent is not None:
            self.push_sent = push_sent
        if sms_sent is not None:
            self.sms_sent = sms_sent
        if user_id is not None:
            self.user_id = user_id

    @property
    def announcement_id(self):
        """Gets the announcement_id of this AnnouncementsNotifications.  # noqa: E501


        :return: The announcement_id of this AnnouncementsNotifications.  # noqa: E501
        :rtype: int
        """
        return self._announcement_id

    @announcement_id.setter
    def announcement_id(self, announcement_id):
        """Sets the announcement_id of this AnnouncementsNotifications.


        :param announcement_id: The announcement_id of this AnnouncementsNotifications.  # noqa: E501
        :type: int
        """

        self._announcement_id = announcement_id

    @property
    def bracket_id(self):
        """Gets the bracket_id of this AnnouncementsNotifications.  # noqa: E501


        :return: The bracket_id of this AnnouncementsNotifications.  # noqa: E501
        :rtype: int
        """
        return self._bracket_id

    @bracket_id.setter
    def bracket_id(self, bracket_id):
        """Sets the bracket_id of this AnnouncementsNotifications.


        :param bracket_id: The bracket_id of this AnnouncementsNotifications.  # noqa: E501
        :type: int
        """

        self._bracket_id = bracket_id

    @property
    def email_sent(self):
        """Gets the email_sent of this AnnouncementsNotifications.  # noqa: E501


        :return: The email_sent of this AnnouncementsNotifications.  # noqa: E501
        :rtype: bool
        """
        return self._email_sent

    @email_sent.setter
    def email_sent(self, email_sent):
        """Sets the email_sent of this AnnouncementsNotifications.


        :param email_sent: The email_sent of this AnnouncementsNotifications.  # noqa: E501
        :type: bool
        """

        self._email_sent = email_sent

    @property
    def league_id(self):
        """Gets the league_id of this AnnouncementsNotifications.  # noqa: E501


        :return: The league_id of this AnnouncementsNotifications.  # noqa: E501
        :rtype: int
        """
        return self._league_id

    @league_id.setter
    def league_id(self, league_id):
        """Sets the league_id of this AnnouncementsNotifications.


        :param league_id: The league_id of this AnnouncementsNotifications.  # noqa: E501
        :type: int
        """

        self._league_id = league_id

    @property
    def push_sent(self):
        """Gets the push_sent of this AnnouncementsNotifications.  # noqa: E501


        :return: The push_sent of this AnnouncementsNotifications.  # noqa: E501
        :rtype: bool
        """
        return self._push_sent

    @push_sent.setter
    def push_sent(self, push_sent):
        """Sets the push_sent of this AnnouncementsNotifications.


        :param push_sent: The push_sent of this AnnouncementsNotifications.  # noqa: E501
        :type: bool
        """

        self._push_sent = push_sent

    @property
    def sms_sent(self):
        """Gets the sms_sent of this AnnouncementsNotifications.  # noqa: E501


        :return: The sms_sent of this AnnouncementsNotifications.  # noqa: E501
        :rtype: bool
        """
        return self._sms_sent

    @sms_sent.setter
    def sms_sent(self, sms_sent):
        """Sets the sms_sent of this AnnouncementsNotifications.


        :param sms_sent: The sms_sent of this AnnouncementsNotifications.  # noqa: E501
        :type: bool
        """

        self._sms_sent = sms_sent

    @property
    def user_id(self):
        """Gets the user_id of this AnnouncementsNotifications.  # noqa: E501


        :return: The user_id of this AnnouncementsNotifications.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AnnouncementsNotifications.


        :param user_id: The user_id of this AnnouncementsNotifications.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnnouncementsNotifications, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnouncementsNotifications):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

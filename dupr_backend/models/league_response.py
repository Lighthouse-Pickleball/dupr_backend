# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LeagueResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_information': 'LeagueContentResponse',
        'address': 'AddressResponse',
        'age_string': 'str',
        'attributes': 'object',
        'brackets': 'list[BracketResponse]',
        'can_show_standings': 'bool',
        'club_id': 'int',
        'club_name': 'str',
        'contact_details': 'list[LeagueContactDetailResponse]',
        'currency_details': 'CurrencyDetailsResponse',
        'display_status': 'str',
        'distance': 'str',
        'distance_in_miles': 'float',
        'duration': 'list[str]',
        'duration_date_time': 'list[str]',
        'duration_date_time_utc': 'list[str]',
        'duration_status': 'str',
        'duration_string': 'str',
        'elimination_string': 'str',
        'end_date': 'datetime',
        'event_format_string': 'str',
        'is_registered': 'bool',
        'league_id': 'int',
        'league_name': 'str',
        'league_price': 'str',
        'liability_waiver_id': 'int',
        'liability_waiver_url': 'str',
        'long_description': 'LeagueContentResponse',
        'media_id': 'int',
        'media_url': 'str',
        'member_fee': 'float',
        'membership_permission': 'str',
        'non_member_fee': 'float',
        'player_group': 'str',
        'refund_policy': 'LeagueContentResponse',
        'registered_members': 'int',
        'registration_date': 'list[str]',
        'registration_date_time': 'list[str]',
        'registration_date_time_utc': 'list[str]',
        'registration_status': 'str',
        'registration_string': 'str',
        'registration_url': 'str',
        'safety_policy': 'LeagueContentResponse',
        'short_address': 'str',
        'short_description': 'LeagueContentResponse',
        'skill_level': 'str',
        'start_date': 'datetime',
        'status': 'str',
        'type': 'str',
        'user_id': 'int'
    }

    attribute_map = {
        'additional_information': 'additionalInformation',
        'address': 'address',
        'age_string': 'ageString',
        'attributes': 'attributes',
        'brackets': 'brackets',
        'can_show_standings': 'canShowStandings',
        'club_id': 'clubId',
        'club_name': 'clubName',
        'contact_details': 'contactDetails',
        'currency_details': 'currencyDetails',
        'display_status': 'displayStatus',
        'distance': 'distance',
        'distance_in_miles': 'distanceInMiles',
        'duration': 'duration',
        'duration_date_time': 'durationDateTime',
        'duration_date_time_utc': 'durationDateTimeUTC',
        'duration_status': 'durationStatus',
        'duration_string': 'durationString',
        'elimination_string': 'eliminationString',
        'end_date': 'endDate',
        'event_format_string': 'eventFormatString',
        'is_registered': 'isRegistered',
        'league_id': 'leagueId',
        'league_name': 'leagueName',
        'league_price': 'leaguePrice',
        'liability_waiver_id': 'liabilityWaiverId',
        'liability_waiver_url': 'liabilityWaiverUrl',
        'long_description': 'longDescription',
        'media_id': 'mediaId',
        'media_url': 'mediaUrl',
        'member_fee': 'memberFee',
        'membership_permission': 'membershipPermission',
        'non_member_fee': 'nonMemberFee',
        'player_group': 'playerGroup',
        'refund_policy': 'refundPolicy',
        'registered_members': 'registeredMembers',
        'registration_date': 'registrationDate',
        'registration_date_time': 'registrationDateTime',
        'registration_date_time_utc': 'registrationDateTimeUTC',
        'registration_status': 'registrationStatus',
        'registration_string': 'registrationString',
        'registration_url': 'registrationUrl',
        'safety_policy': 'safetyPolicy',
        'short_address': 'shortAddress',
        'short_description': 'shortDescription',
        'skill_level': 'skillLevel',
        'start_date': 'startDate',
        'status': 'status',
        'type': 'type',
        'user_id': 'userId'
    }

    def __init__(self, additional_information=None, address=None, age_string=None, attributes=None, brackets=None, can_show_standings=None, club_id=None, club_name=None, contact_details=None, currency_details=None, display_status=None, distance=None, distance_in_miles=None, duration=None, duration_date_time=None, duration_date_time_utc=None, duration_status=None, duration_string=None, elimination_string=None, end_date=None, event_format_string=None, is_registered=None, league_id=None, league_name=None, league_price=None, liability_waiver_id=None, liability_waiver_url=None, long_description=None, media_id=None, media_url=None, member_fee=None, membership_permission=None, non_member_fee=None, player_group=None, refund_policy=None, registered_members=None, registration_date=None, registration_date_time=None, registration_date_time_utc=None, registration_status=None, registration_string=None, registration_url=None, safety_policy=None, short_address=None, short_description=None, skill_level=None, start_date=None, status=None, type=None, user_id=None):  # noqa: E501
        """LeagueResponse - a model defined in Swagger"""  # noqa: E501
        self._additional_information = None
        self._address = None
        self._age_string = None
        self._attributes = None
        self._brackets = None
        self._can_show_standings = None
        self._club_id = None
        self._club_name = None
        self._contact_details = None
        self._currency_details = None
        self._display_status = None
        self._distance = None
        self._distance_in_miles = None
        self._duration = None
        self._duration_date_time = None
        self._duration_date_time_utc = None
        self._duration_status = None
        self._duration_string = None
        self._elimination_string = None
        self._end_date = None
        self._event_format_string = None
        self._is_registered = None
        self._league_id = None
        self._league_name = None
        self._league_price = None
        self._liability_waiver_id = None
        self._liability_waiver_url = None
        self._long_description = None
        self._media_id = None
        self._media_url = None
        self._member_fee = None
        self._membership_permission = None
        self._non_member_fee = None
        self._player_group = None
        self._refund_policy = None
        self._registered_members = None
        self._registration_date = None
        self._registration_date_time = None
        self._registration_date_time_utc = None
        self._registration_status = None
        self._registration_string = None
        self._registration_url = None
        self._safety_policy = None
        self._short_address = None
        self._short_description = None
        self._skill_level = None
        self._start_date = None
        self._status = None
        self._type = None
        self._user_id = None
        self.discriminator = None
        if additional_information is not None:
            self.additional_information = additional_information
        if address is not None:
            self.address = address
        if age_string is not None:
            self.age_string = age_string
        if attributes is not None:
            self.attributes = attributes
        self.brackets = brackets
        if can_show_standings is not None:
            self.can_show_standings = can_show_standings
        self.club_id = club_id
        if club_name is not None:
            self.club_name = club_name
        if contact_details is not None:
            self.contact_details = contact_details
        if currency_details is not None:
            self.currency_details = currency_details
        if display_status is not None:
            self.display_status = display_status
        if distance is not None:
            self.distance = distance
        if distance_in_miles is not None:
            self.distance_in_miles = distance_in_miles
        self.duration = duration
        if duration_date_time is not None:
            self.duration_date_time = duration_date_time
        if duration_date_time_utc is not None:
            self.duration_date_time_utc = duration_date_time_utc
        if duration_status is not None:
            self.duration_status = duration_status
        if duration_string is not None:
            self.duration_string = duration_string
        if elimination_string is not None:
            self.elimination_string = elimination_string
        self.end_date = end_date
        if event_format_string is not None:
            self.event_format_string = event_format_string
        if is_registered is not None:
            self.is_registered = is_registered
        self.league_id = league_id
        self.league_name = league_name
        if league_price is not None:
            self.league_price = league_price
        self.liability_waiver_id = liability_waiver_id
        if liability_waiver_url is not None:
            self.liability_waiver_url = liability_waiver_url
        if long_description is not None:
            self.long_description = long_description
        self.media_id = media_id
        if media_url is not None:
            self.media_url = media_url
        if member_fee is not None:
            self.member_fee = member_fee
        if membership_permission is not None:
            self.membership_permission = membership_permission
        self.non_member_fee = non_member_fee
        if player_group is not None:
            self.player_group = player_group
        if refund_policy is not None:
            self.refund_policy = refund_policy
        if registered_members is not None:
            self.registered_members = registered_members
        self.registration_date = registration_date
        if registration_date_time is not None:
            self.registration_date_time = registration_date_time
        if registration_date_time_utc is not None:
            self.registration_date_time_utc = registration_date_time_utc
        if registration_status is not None:
            self.registration_status = registration_status
        if registration_string is not None:
            self.registration_string = registration_string
        if registration_url is not None:
            self.registration_url = registration_url
        if safety_policy is not None:
            self.safety_policy = safety_policy
        if short_address is not None:
            self.short_address = short_address
        if short_description is not None:
            self.short_description = short_description
        if skill_level is not None:
            self.skill_level = skill_level
        self.start_date = start_date
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        self.user_id = user_id

    @property
    def additional_information(self):
        """Gets the additional_information of this LeagueResponse.  # noqa: E501


        :return: The additional_information of this LeagueResponse.  # noqa: E501
        :rtype: LeagueContentResponse
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this LeagueResponse.


        :param additional_information: The additional_information of this LeagueResponse.  # noqa: E501
        :type: LeagueContentResponse
        """

        self._additional_information = additional_information

    @property
    def address(self):
        """Gets the address of this LeagueResponse.  # noqa: E501


        :return: The address of this LeagueResponse.  # noqa: E501
        :rtype: AddressResponse
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this LeagueResponse.


        :param address: The address of this LeagueResponse.  # noqa: E501
        :type: AddressResponse
        """

        self._address = address

    @property
    def age_string(self):
        """Gets the age_string of this LeagueResponse.  # noqa: E501


        :return: The age_string of this LeagueResponse.  # noqa: E501
        :rtype: str
        """
        return self._age_string

    @age_string.setter
    def age_string(self, age_string):
        """Sets the age_string of this LeagueResponse.


        :param age_string: The age_string of this LeagueResponse.  # noqa: E501
        :type: str
        """

        self._age_string = age_string

    @property
    def attributes(self):
        """Gets the attributes of this LeagueResponse.  # noqa: E501


        :return: The attributes of this LeagueResponse.  # noqa: E501
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this LeagueResponse.


        :param attributes: The attributes of this LeagueResponse.  # noqa: E501
        :type: object
        """

        self._attributes = attributes

    @property
    def brackets(self):
        """Gets the brackets of this LeagueResponse.  # noqa: E501


        :return: The brackets of this LeagueResponse.  # noqa: E501
        :rtype: list[BracketResponse]
        """
        return self._brackets

    @brackets.setter
    def brackets(self, brackets):
        """Sets the brackets of this LeagueResponse.


        :param brackets: The brackets of this LeagueResponse.  # noqa: E501
        :type: list[BracketResponse]
        """
        if brackets is None:
            raise ValueError("Invalid value for `brackets`, must not be `None`")  # noqa: E501

        self._brackets = brackets

    @property
    def can_show_standings(self):
        """Gets the can_show_standings of this LeagueResponse.  # noqa: E501


        :return: The can_show_standings of this LeagueResponse.  # noqa: E501
        :rtype: bool
        """
        return self._can_show_standings

    @can_show_standings.setter
    def can_show_standings(self, can_show_standings):
        """Sets the can_show_standings of this LeagueResponse.


        :param can_show_standings: The can_show_standings of this LeagueResponse.  # noqa: E501
        :type: bool
        """

        self._can_show_standings = can_show_standings

    @property
    def club_id(self):
        """Gets the club_id of this LeagueResponse.  # noqa: E501


        :return: The club_id of this LeagueResponse.  # noqa: E501
        :rtype: int
        """
        return self._club_id

    @club_id.setter
    def club_id(self, club_id):
        """Sets the club_id of this LeagueResponse.


        :param club_id: The club_id of this LeagueResponse.  # noqa: E501
        :type: int
        """
        if club_id is None:
            raise ValueError("Invalid value for `club_id`, must not be `None`")  # noqa: E501

        self._club_id = club_id

    @property
    def club_name(self):
        """Gets the club_name of this LeagueResponse.  # noqa: E501


        :return: The club_name of this LeagueResponse.  # noqa: E501
        :rtype: str
        """
        return self._club_name

    @club_name.setter
    def club_name(self, club_name):
        """Sets the club_name of this LeagueResponse.


        :param club_name: The club_name of this LeagueResponse.  # noqa: E501
        :type: str
        """

        self._club_name = club_name

    @property
    def contact_details(self):
        """Gets the contact_details of this LeagueResponse.  # noqa: E501


        :return: The contact_details of this LeagueResponse.  # noqa: E501
        :rtype: list[LeagueContactDetailResponse]
        """
        return self._contact_details

    @contact_details.setter
    def contact_details(self, contact_details):
        """Sets the contact_details of this LeagueResponse.


        :param contact_details: The contact_details of this LeagueResponse.  # noqa: E501
        :type: list[LeagueContactDetailResponse]
        """

        self._contact_details = contact_details

    @property
    def currency_details(self):
        """Gets the currency_details of this LeagueResponse.  # noqa: E501


        :return: The currency_details of this LeagueResponse.  # noqa: E501
        :rtype: CurrencyDetailsResponse
        """
        return self._currency_details

    @currency_details.setter
    def currency_details(self, currency_details):
        """Sets the currency_details of this LeagueResponse.


        :param currency_details: The currency_details of this LeagueResponse.  # noqa: E501
        :type: CurrencyDetailsResponse
        """

        self._currency_details = currency_details

    @property
    def display_status(self):
        """Gets the display_status of this LeagueResponse.  # noqa: E501


        :return: The display_status of this LeagueResponse.  # noqa: E501
        :rtype: str
        """
        return self._display_status

    @display_status.setter
    def display_status(self, display_status):
        """Sets the display_status of this LeagueResponse.


        :param display_status: The display_status of this LeagueResponse.  # noqa: E501
        :type: str
        """

        self._display_status = display_status

    @property
    def distance(self):
        """Gets the distance of this LeagueResponse.  # noqa: E501


        :return: The distance of this LeagueResponse.  # noqa: E501
        :rtype: str
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this LeagueResponse.


        :param distance: The distance of this LeagueResponse.  # noqa: E501
        :type: str
        """

        self._distance = distance

    @property
    def distance_in_miles(self):
        """Gets the distance_in_miles of this LeagueResponse.  # noqa: E501


        :return: The distance_in_miles of this LeagueResponse.  # noqa: E501
        :rtype: float
        """
        return self._distance_in_miles

    @distance_in_miles.setter
    def distance_in_miles(self, distance_in_miles):
        """Sets the distance_in_miles of this LeagueResponse.


        :param distance_in_miles: The distance_in_miles of this LeagueResponse.  # noqa: E501
        :type: float
        """

        self._distance_in_miles = distance_in_miles

    @property
    def duration(self):
        """Gets the duration of this LeagueResponse.  # noqa: E501


        :return: The duration of this LeagueResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this LeagueResponse.


        :param duration: The duration of this LeagueResponse.  # noqa: E501
        :type: list[str]
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def duration_date_time(self):
        """Gets the duration_date_time of this LeagueResponse.  # noqa: E501


        :return: The duration_date_time of this LeagueResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._duration_date_time

    @duration_date_time.setter
    def duration_date_time(self, duration_date_time):
        """Sets the duration_date_time of this LeagueResponse.


        :param duration_date_time: The duration_date_time of this LeagueResponse.  # noqa: E501
        :type: list[str]
        """

        self._duration_date_time = duration_date_time

    @property
    def duration_date_time_utc(self):
        """Gets the duration_date_time_utc of this LeagueResponse.  # noqa: E501


        :return: The duration_date_time_utc of this LeagueResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._duration_date_time_utc

    @duration_date_time_utc.setter
    def duration_date_time_utc(self, duration_date_time_utc):
        """Sets the duration_date_time_utc of this LeagueResponse.


        :param duration_date_time_utc: The duration_date_time_utc of this LeagueResponse.  # noqa: E501
        :type: list[str]
        """

        self._duration_date_time_utc = duration_date_time_utc

    @property
    def duration_status(self):
        """Gets the duration_status of this LeagueResponse.  # noqa: E501


        :return: The duration_status of this LeagueResponse.  # noqa: E501
        :rtype: str
        """
        return self._duration_status

    @duration_status.setter
    def duration_status(self, duration_status):
        """Sets the duration_status of this LeagueResponse.


        :param duration_status: The duration_status of this LeagueResponse.  # noqa: E501
        :type: str
        """

        self._duration_status = duration_status

    @property
    def duration_string(self):
        """Gets the duration_string of this LeagueResponse.  # noqa: E501


        :return: The duration_string of this LeagueResponse.  # noqa: E501
        :rtype: str
        """
        return self._duration_string

    @duration_string.setter
    def duration_string(self, duration_string):
        """Sets the duration_string of this LeagueResponse.


        :param duration_string: The duration_string of this LeagueResponse.  # noqa: E501
        :type: str
        """

        self._duration_string = duration_string

    @property
    def elimination_string(self):
        """Gets the elimination_string of this LeagueResponse.  # noqa: E501


        :return: The elimination_string of this LeagueResponse.  # noqa: E501
        :rtype: str
        """
        return self._elimination_string

    @elimination_string.setter
    def elimination_string(self, elimination_string):
        """Sets the elimination_string of this LeagueResponse.


        :param elimination_string: The elimination_string of this LeagueResponse.  # noqa: E501
        :type: str
        """

        self._elimination_string = elimination_string

    @property
    def end_date(self):
        """Gets the end_date of this LeagueResponse.  # noqa: E501


        :return: The end_date of this LeagueResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this LeagueResponse.


        :param end_date: The end_date of this LeagueResponse.  # noqa: E501
        :type: datetime
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def event_format_string(self):
        """Gets the event_format_string of this LeagueResponse.  # noqa: E501


        :return: The event_format_string of this LeagueResponse.  # noqa: E501
        :rtype: str
        """
        return self._event_format_string

    @event_format_string.setter
    def event_format_string(self, event_format_string):
        """Sets the event_format_string of this LeagueResponse.


        :param event_format_string: The event_format_string of this LeagueResponse.  # noqa: E501
        :type: str
        """

        self._event_format_string = event_format_string

    @property
    def is_registered(self):
        """Gets the is_registered of this LeagueResponse.  # noqa: E501


        :return: The is_registered of this LeagueResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_registered

    @is_registered.setter
    def is_registered(self, is_registered):
        """Sets the is_registered of this LeagueResponse.


        :param is_registered: The is_registered of this LeagueResponse.  # noqa: E501
        :type: bool
        """

        self._is_registered = is_registered

    @property
    def league_id(self):
        """Gets the league_id of this LeagueResponse.  # noqa: E501


        :return: The league_id of this LeagueResponse.  # noqa: E501
        :rtype: int
        """
        return self._league_id

    @league_id.setter
    def league_id(self, league_id):
        """Sets the league_id of this LeagueResponse.


        :param league_id: The league_id of this LeagueResponse.  # noqa: E501
        :type: int
        """
        if league_id is None:
            raise ValueError("Invalid value for `league_id`, must not be `None`")  # noqa: E501

        self._league_id = league_id

    @property
    def league_name(self):
        """Gets the league_name of this LeagueResponse.  # noqa: E501


        :return: The league_name of this LeagueResponse.  # noqa: E501
        :rtype: str
        """
        return self._league_name

    @league_name.setter
    def league_name(self, league_name):
        """Sets the league_name of this LeagueResponse.


        :param league_name: The league_name of this LeagueResponse.  # noqa: E501
        :type: str
        """
        if league_name is None:
            raise ValueError("Invalid value for `league_name`, must not be `None`")  # noqa: E501

        self._league_name = league_name

    @property
    def league_price(self):
        """Gets the league_price of this LeagueResponse.  # noqa: E501


        :return: The league_price of this LeagueResponse.  # noqa: E501
        :rtype: str
        """
        return self._league_price

    @league_price.setter
    def league_price(self, league_price):
        """Sets the league_price of this LeagueResponse.


        :param league_price: The league_price of this LeagueResponse.  # noqa: E501
        :type: str
        """

        self._league_price = league_price

    @property
    def liability_waiver_id(self):
        """Gets the liability_waiver_id of this LeagueResponse.  # noqa: E501


        :return: The liability_waiver_id of this LeagueResponse.  # noqa: E501
        :rtype: int
        """
        return self._liability_waiver_id

    @liability_waiver_id.setter
    def liability_waiver_id(self, liability_waiver_id):
        """Sets the liability_waiver_id of this LeagueResponse.


        :param liability_waiver_id: The liability_waiver_id of this LeagueResponse.  # noqa: E501
        :type: int
        """
        if liability_waiver_id is None:
            raise ValueError("Invalid value for `liability_waiver_id`, must not be `None`")  # noqa: E501

        self._liability_waiver_id = liability_waiver_id

    @property
    def liability_waiver_url(self):
        """Gets the liability_waiver_url of this LeagueResponse.  # noqa: E501


        :return: The liability_waiver_url of this LeagueResponse.  # noqa: E501
        :rtype: str
        """
        return self._liability_waiver_url

    @liability_waiver_url.setter
    def liability_waiver_url(self, liability_waiver_url):
        """Sets the liability_waiver_url of this LeagueResponse.


        :param liability_waiver_url: The liability_waiver_url of this LeagueResponse.  # noqa: E501
        :type: str
        """

        self._liability_waiver_url = liability_waiver_url

    @property
    def long_description(self):
        """Gets the long_description of this LeagueResponse.  # noqa: E501


        :return: The long_description of this LeagueResponse.  # noqa: E501
        :rtype: LeagueContentResponse
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this LeagueResponse.


        :param long_description: The long_description of this LeagueResponse.  # noqa: E501
        :type: LeagueContentResponse
        """

        self._long_description = long_description

    @property
    def media_id(self):
        """Gets the media_id of this LeagueResponse.  # noqa: E501


        :return: The media_id of this LeagueResponse.  # noqa: E501
        :rtype: int
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id):
        """Sets the media_id of this LeagueResponse.


        :param media_id: The media_id of this LeagueResponse.  # noqa: E501
        :type: int
        """
        if media_id is None:
            raise ValueError("Invalid value for `media_id`, must not be `None`")  # noqa: E501

        self._media_id = media_id

    @property
    def media_url(self):
        """Gets the media_url of this LeagueResponse.  # noqa: E501


        :return: The media_url of this LeagueResponse.  # noqa: E501
        :rtype: str
        """
        return self._media_url

    @media_url.setter
    def media_url(self, media_url):
        """Sets the media_url of this LeagueResponse.


        :param media_url: The media_url of this LeagueResponse.  # noqa: E501
        :type: str
        """

        self._media_url = media_url

    @property
    def member_fee(self):
        """Gets the member_fee of this LeagueResponse.  # noqa: E501


        :return: The member_fee of this LeagueResponse.  # noqa: E501
        :rtype: float
        """
        return self._member_fee

    @member_fee.setter
    def member_fee(self, member_fee):
        """Sets the member_fee of this LeagueResponse.


        :param member_fee: The member_fee of this LeagueResponse.  # noqa: E501
        :type: float
        """

        self._member_fee = member_fee

    @property
    def membership_permission(self):
        """Gets the membership_permission of this LeagueResponse.  # noqa: E501


        :return: The membership_permission of this LeagueResponse.  # noqa: E501
        :rtype: str
        """
        return self._membership_permission

    @membership_permission.setter
    def membership_permission(self, membership_permission):
        """Sets the membership_permission of this LeagueResponse.


        :param membership_permission: The membership_permission of this LeagueResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["CLUB_MEMBERS", "OPEN_TO_ALL"]  # noqa: E501
        if membership_permission not in allowed_values:
            raise ValueError(
                "Invalid value for `membership_permission` ({0}), must be one of {1}"  # noqa: E501
                .format(membership_permission, allowed_values)
            )

        self._membership_permission = membership_permission

    @property
    def non_member_fee(self):
        """Gets the non_member_fee of this LeagueResponse.  # noqa: E501


        :return: The non_member_fee of this LeagueResponse.  # noqa: E501
        :rtype: float
        """
        return self._non_member_fee

    @non_member_fee.setter
    def non_member_fee(self, non_member_fee):
        """Sets the non_member_fee of this LeagueResponse.


        :param non_member_fee: The non_member_fee of this LeagueResponse.  # noqa: E501
        :type: float
        """
        if non_member_fee is None:
            raise ValueError("Invalid value for `non_member_fee`, must not be `None`")  # noqa: E501

        self._non_member_fee = non_member_fee

    @property
    def player_group(self):
        """Gets the player_group of this LeagueResponse.  # noqa: E501


        :return: The player_group of this LeagueResponse.  # noqa: E501
        :rtype: str
        """
        return self._player_group

    @player_group.setter
    def player_group(self, player_group):
        """Sets the player_group of this LeagueResponse.


        :param player_group: The player_group of this LeagueResponse.  # noqa: E501
        :type: str
        """

        self._player_group = player_group

    @property
    def refund_policy(self):
        """Gets the refund_policy of this LeagueResponse.  # noqa: E501


        :return: The refund_policy of this LeagueResponse.  # noqa: E501
        :rtype: LeagueContentResponse
        """
        return self._refund_policy

    @refund_policy.setter
    def refund_policy(self, refund_policy):
        """Sets the refund_policy of this LeagueResponse.


        :param refund_policy: The refund_policy of this LeagueResponse.  # noqa: E501
        :type: LeagueContentResponse
        """

        self._refund_policy = refund_policy

    @property
    def registered_members(self):
        """Gets the registered_members of this LeagueResponse.  # noqa: E501


        :return: The registered_members of this LeagueResponse.  # noqa: E501
        :rtype: int
        """
        return self._registered_members

    @registered_members.setter
    def registered_members(self, registered_members):
        """Sets the registered_members of this LeagueResponse.


        :param registered_members: The registered_members of this LeagueResponse.  # noqa: E501
        :type: int
        """

        self._registered_members = registered_members

    @property
    def registration_date(self):
        """Gets the registration_date of this LeagueResponse.  # noqa: E501


        :return: The registration_date of this LeagueResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date):
        """Sets the registration_date of this LeagueResponse.


        :param registration_date: The registration_date of this LeagueResponse.  # noqa: E501
        :type: list[str]
        """
        if registration_date is None:
            raise ValueError("Invalid value for `registration_date`, must not be `None`")  # noqa: E501

        self._registration_date = registration_date

    @property
    def registration_date_time(self):
        """Gets the registration_date_time of this LeagueResponse.  # noqa: E501


        :return: The registration_date_time of this LeagueResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._registration_date_time

    @registration_date_time.setter
    def registration_date_time(self, registration_date_time):
        """Sets the registration_date_time of this LeagueResponse.


        :param registration_date_time: The registration_date_time of this LeagueResponse.  # noqa: E501
        :type: list[str]
        """

        self._registration_date_time = registration_date_time

    @property
    def registration_date_time_utc(self):
        """Gets the registration_date_time_utc of this LeagueResponse.  # noqa: E501


        :return: The registration_date_time_utc of this LeagueResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._registration_date_time_utc

    @registration_date_time_utc.setter
    def registration_date_time_utc(self, registration_date_time_utc):
        """Sets the registration_date_time_utc of this LeagueResponse.


        :param registration_date_time_utc: The registration_date_time_utc of this LeagueResponse.  # noqa: E501
        :type: list[str]
        """

        self._registration_date_time_utc = registration_date_time_utc

    @property
    def registration_status(self):
        """Gets the registration_status of this LeagueResponse.  # noqa: E501


        :return: The registration_status of this LeagueResponse.  # noqa: E501
        :rtype: str
        """
        return self._registration_status

    @registration_status.setter
    def registration_status(self, registration_status):
        """Sets the registration_status of this LeagueResponse.


        :param registration_status: The registration_status of this LeagueResponse.  # noqa: E501
        :type: str
        """

        self._registration_status = registration_status

    @property
    def registration_string(self):
        """Gets the registration_string of this LeagueResponse.  # noqa: E501


        :return: The registration_string of this LeagueResponse.  # noqa: E501
        :rtype: str
        """
        return self._registration_string

    @registration_string.setter
    def registration_string(self, registration_string):
        """Sets the registration_string of this LeagueResponse.


        :param registration_string: The registration_string of this LeagueResponse.  # noqa: E501
        :type: str
        """

        self._registration_string = registration_string

    @property
    def registration_url(self):
        """Gets the registration_url of this LeagueResponse.  # noqa: E501


        :return: The registration_url of this LeagueResponse.  # noqa: E501
        :rtype: str
        """
        return self._registration_url

    @registration_url.setter
    def registration_url(self, registration_url):
        """Sets the registration_url of this LeagueResponse.


        :param registration_url: The registration_url of this LeagueResponse.  # noqa: E501
        :type: str
        """

        self._registration_url = registration_url

    @property
    def safety_policy(self):
        """Gets the safety_policy of this LeagueResponse.  # noqa: E501


        :return: The safety_policy of this LeagueResponse.  # noqa: E501
        :rtype: LeagueContentResponse
        """
        return self._safety_policy

    @safety_policy.setter
    def safety_policy(self, safety_policy):
        """Sets the safety_policy of this LeagueResponse.


        :param safety_policy: The safety_policy of this LeagueResponse.  # noqa: E501
        :type: LeagueContentResponse
        """

        self._safety_policy = safety_policy

    @property
    def short_address(self):
        """Gets the short_address of this LeagueResponse.  # noqa: E501


        :return: The short_address of this LeagueResponse.  # noqa: E501
        :rtype: str
        """
        return self._short_address

    @short_address.setter
    def short_address(self, short_address):
        """Sets the short_address of this LeagueResponse.


        :param short_address: The short_address of this LeagueResponse.  # noqa: E501
        :type: str
        """

        self._short_address = short_address

    @property
    def short_description(self):
        """Gets the short_description of this LeagueResponse.  # noqa: E501


        :return: The short_description of this LeagueResponse.  # noqa: E501
        :rtype: LeagueContentResponse
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this LeagueResponse.


        :param short_description: The short_description of this LeagueResponse.  # noqa: E501
        :type: LeagueContentResponse
        """

        self._short_description = short_description

    @property
    def skill_level(self):
        """Gets the skill_level of this LeagueResponse.  # noqa: E501


        :return: The skill_level of this LeagueResponse.  # noqa: E501
        :rtype: str
        """
        return self._skill_level

    @skill_level.setter
    def skill_level(self, skill_level):
        """Sets the skill_level of this LeagueResponse.


        :param skill_level: The skill_level of this LeagueResponse.  # noqa: E501
        :type: str
        """

        self._skill_level = skill_level

    @property
    def start_date(self):
        """Gets the start_date of this LeagueResponse.  # noqa: E501


        :return: The start_date of this LeagueResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this LeagueResponse.


        :param start_date: The start_date of this LeagueResponse.  # noqa: E501
        :type: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def status(self):
        """Gets the status of this LeagueResponse.  # noqa: E501


        :return: The status of this LeagueResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LeagueResponse.


        :param status: The status of this LeagueResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this LeagueResponse.  # noqa: E501


        :return: The type of this LeagueResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LeagueResponse.


        :param type: The type of this LeagueResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["FLEX"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user_id(self):
        """Gets the user_id of this LeagueResponse.  # noqa: E501


        :return: The user_id of this LeagueResponse.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this LeagueResponse.


        :param user_id: The user_id of this LeagueResponse.  # noqa: E501
        :type: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LeagueResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LeagueResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist, validator
from dupr_backend.models.address_response import AddressResponse
from dupr_backend.models.bracket_response import BracketResponse
from dupr_backend.models.currency_details_response import CurrencyDetailsResponse
from dupr_backend.models.league_contact_detail_response import LeagueContactDetailResponse
from dupr_backend.models.league_content_response import LeagueContentResponse

class LeagueResponse(BaseModel):
    """
    LeagueResponse
    """
    additional_information: Optional[LeagueContentResponse] = Field(None, alias="additionalInformation")
    address: Optional[AddressResponse] = None
    age_string: Optional[StrictStr] = Field(None, alias="ageString")
    attributes: Optional[Dict[str, Any]] = None
    brackets: conlist(BracketResponse) = Field(...)
    can_show_standings: Optional[StrictBool] = Field(None, alias="canShowStandings")
    club_id: StrictInt = Field(..., alias="clubId")
    club_name: Optional[StrictStr] = Field(None, alias="clubName")
    contact_details: Optional[conlist(LeagueContactDetailResponse)] = Field(None, alias="contactDetails")
    currency_details: Optional[CurrencyDetailsResponse] = Field(None, alias="currencyDetails")
    display_status: Optional[StrictStr] = Field(None, alias="displayStatus")
    distance: Optional[StrictStr] = None
    distance_in_miles: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="distanceInMiles")
    duration: conlist(StrictStr) = Field(...)
    duration_date_time: Optional[conlist(StrictStr)] = Field(None, alias="durationDateTime")
    duration_date_time_utc: Optional[conlist(StrictStr)] = Field(None, alias="durationDateTimeUTC")
    duration_status: Optional[StrictStr] = Field(None, alias="durationStatus")
    duration_string: Optional[StrictStr] = Field(None, alias="durationString")
    elimination_string: Optional[StrictStr] = Field(None, alias="eliminationString")
    end_date: datetime = Field(..., alias="endDate")
    event_format_string: Optional[StrictStr] = Field(None, alias="eventFormatString")
    is_registered: Optional[StrictBool] = Field(None, alias="isRegistered")
    league_id: StrictInt = Field(..., alias="leagueId")
    league_name: StrictStr = Field(..., alias="leagueName")
    league_price: Optional[StrictStr] = Field(None, alias="leaguePrice")
    liability_waiver_id: StrictInt = Field(..., alias="liabilityWaiverId")
    liability_waiver_url: Optional[StrictStr] = Field(None, alias="liabilityWaiverUrl")
    long_description: Optional[LeagueContentResponse] = Field(None, alias="longDescription")
    media_id: StrictInt = Field(..., alias="mediaId")
    media_url: Optional[StrictStr] = Field(None, alias="mediaUrl")
    member_fee: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="memberFee")
    membership_permission: Optional[StrictStr] = Field(None, alias="membershipPermission")
    non_member_fee: Union[StrictFloat, StrictInt] = Field(..., alias="nonMemberFee")
    player_group: Optional[StrictStr] = Field(None, alias="playerGroup")
    refund_policy: Optional[LeagueContentResponse] = Field(None, alias="refundPolicy")
    registered_members: Optional[StrictInt] = Field(None, alias="registeredMembers")
    registration_date: conlist(StrictStr) = Field(..., alias="registrationDate")
    registration_date_time: Optional[conlist(StrictStr)] = Field(None, alias="registrationDateTime")
    registration_date_time_utc: Optional[conlist(StrictStr)] = Field(None, alias="registrationDateTimeUTC")
    registration_status: Optional[StrictStr] = Field(None, alias="registrationStatus")
    registration_string: Optional[StrictStr] = Field(None, alias="registrationString")
    registration_url: Optional[StrictStr] = Field(None, alias="registrationUrl")
    safety_policy: Optional[LeagueContentResponse] = Field(None, alias="safetyPolicy")
    short_address: Optional[StrictStr] = Field(None, alias="shortAddress")
    short_description: Optional[LeagueContentResponse] = Field(None, alias="shortDescription")
    skill_level: Optional[StrictStr] = Field(None, alias="skillLevel")
    start_date: datetime = Field(..., alias="startDate")
    status: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    user_id: StrictInt = Field(..., alias="userId")
    __properties = ["additionalInformation", "address", "ageString", "attributes", "brackets", "canShowStandings", "clubId", "clubName", "contactDetails", "currencyDetails", "displayStatus", "distance", "distanceInMiles", "duration", "durationDateTime", "durationDateTimeUTC", "durationStatus", "durationString", "eliminationString", "endDate", "eventFormatString", "isRegistered", "leagueId", "leagueName", "leaguePrice", "liabilityWaiverId", "liabilityWaiverUrl", "longDescription", "mediaId", "mediaUrl", "memberFee", "membershipPermission", "nonMemberFee", "playerGroup", "refundPolicy", "registeredMembers", "registrationDate", "registrationDateTime", "registrationDateTimeUTC", "registrationStatus", "registrationString", "registrationUrl", "safetyPolicy", "shortAddress", "shortDescription", "skillLevel", "startDate", "status", "type", "userId"]

    @validator('membership_permission')
    def membership_permission_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('CLUB_MEMBERS', 'OPEN_TO_ALL'):
            raise ValueError("must be one of enum values ('CLUB_MEMBERS', 'OPEN_TO_ALL')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING'):
            raise ValueError("must be one of enum values ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING')")
        return value

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('FLEX'):
            raise ValueError("must be one of enum values ('FLEX')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LeagueResponse:
        """Create an instance of LeagueResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of additional_information
        if self.additional_information:
            _dict['additionalInformation'] = self.additional_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in brackets (list)
        _items = []
        if self.brackets:
            for _item in self.brackets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['brackets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in contact_details (list)
        _items = []
        if self.contact_details:
            for _item in self.contact_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['contactDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of currency_details
        if self.currency_details:
            _dict['currencyDetails'] = self.currency_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of long_description
        if self.long_description:
            _dict['longDescription'] = self.long_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of refund_policy
        if self.refund_policy:
            _dict['refundPolicy'] = self.refund_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of safety_policy
        if self.safety_policy:
            _dict['safetyPolicy'] = self.safety_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of short_description
        if self.short_description:
            _dict['shortDescription'] = self.short_description.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LeagueResponse:
        """Create an instance of LeagueResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LeagueResponse.parse_obj(obj)

        _obj = LeagueResponse.parse_obj({
            "additional_information": LeagueContentResponse.from_dict(obj.get("additionalInformation")) if obj.get("additionalInformation") is not None else None,
            "address": AddressResponse.from_dict(obj.get("address")) if obj.get("address") is not None else None,
            "age_string": obj.get("ageString"),
            "attributes": obj.get("attributes"),
            "brackets": [BracketResponse.from_dict(_item) for _item in obj.get("brackets")] if obj.get("brackets") is not None else None,
            "can_show_standings": obj.get("canShowStandings"),
            "club_id": obj.get("clubId"),
            "club_name": obj.get("clubName"),
            "contact_details": [LeagueContactDetailResponse.from_dict(_item) for _item in obj.get("contactDetails")] if obj.get("contactDetails") is not None else None,
            "currency_details": CurrencyDetailsResponse.from_dict(obj.get("currencyDetails")) if obj.get("currencyDetails") is not None else None,
            "display_status": obj.get("displayStatus"),
            "distance": obj.get("distance"),
            "distance_in_miles": obj.get("distanceInMiles"),
            "duration": obj.get("duration"),
            "duration_date_time": obj.get("durationDateTime"),
            "duration_date_time_utc": obj.get("durationDateTimeUTC"),
            "duration_status": obj.get("durationStatus"),
            "duration_string": obj.get("durationString"),
            "elimination_string": obj.get("eliminationString"),
            "end_date": obj.get("endDate"),
            "event_format_string": obj.get("eventFormatString"),
            "is_registered": obj.get("isRegistered"),
            "league_id": obj.get("leagueId"),
            "league_name": obj.get("leagueName"),
            "league_price": obj.get("leaguePrice"),
            "liability_waiver_id": obj.get("liabilityWaiverId"),
            "liability_waiver_url": obj.get("liabilityWaiverUrl"),
            "long_description": LeagueContentResponse.from_dict(obj.get("longDescription")) if obj.get("longDescription") is not None else None,
            "media_id": obj.get("mediaId"),
            "media_url": obj.get("mediaUrl"),
            "member_fee": obj.get("memberFee"),
            "membership_permission": obj.get("membershipPermission"),
            "non_member_fee": obj.get("nonMemberFee"),
            "player_group": obj.get("playerGroup"),
            "refund_policy": LeagueContentResponse.from_dict(obj.get("refundPolicy")) if obj.get("refundPolicy") is not None else None,
            "registered_members": obj.get("registeredMembers"),
            "registration_date": obj.get("registrationDate"),
            "registration_date_time": obj.get("registrationDateTime"),
            "registration_date_time_utc": obj.get("registrationDateTimeUTC"),
            "registration_status": obj.get("registrationStatus"),
            "registration_string": obj.get("registrationString"),
            "registration_url": obj.get("registrationUrl"),
            "safety_policy": LeagueContentResponse.from_dict(obj.get("safetyPolicy")) if obj.get("safetyPolicy") is not None else None,
            "short_address": obj.get("shortAddress"),
            "short_description": LeagueContentResponse.from_dict(obj.get("shortDescription")) if obj.get("shortDescription") is not None else None,
            "skill_level": obj.get("skillLevel"),
            "start_date": obj.get("startDate"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "user_id": obj.get("userId")
        })
        return _obj



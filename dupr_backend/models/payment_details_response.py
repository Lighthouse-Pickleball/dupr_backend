# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaymentDetailsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount_paid': 'float',
        'event_fee': 'float',
        'is_club_member': 'bool',
        'is_registered': 'bool',
        'is_wait_listed': 'bool',
        'payment_capture': 'bool',
        'payment_status': 'str',
        'player_status': 'str',
        'refunded_amount': 'float'
    }

    attribute_map = {
        'amount_paid': 'amountPaid',
        'event_fee': 'eventFee',
        'is_club_member': 'isClubMember',
        'is_registered': 'isRegistered',
        'is_wait_listed': 'isWaitListed',
        'payment_capture': 'paymentCapture',
        'payment_status': 'paymentStatus',
        'player_status': 'playerStatus',
        'refunded_amount': 'refundedAmount'
    }

    def __init__(self, amount_paid=None, event_fee=None, is_club_member=None, is_registered=None, is_wait_listed=None, payment_capture=None, payment_status=None, player_status=None, refunded_amount=None):  # noqa: E501
        """PaymentDetailsResponse - a model defined in Swagger"""  # noqa: E501
        self._amount_paid = None
        self._event_fee = None
        self._is_club_member = None
        self._is_registered = None
        self._is_wait_listed = None
        self._payment_capture = None
        self._payment_status = None
        self._player_status = None
        self._refunded_amount = None
        self.discriminator = None
        self.amount_paid = amount_paid
        self.event_fee = event_fee
        self.is_club_member = is_club_member
        self.is_registered = is_registered
        self.is_wait_listed = is_wait_listed
        self.payment_capture = payment_capture
        self.payment_status = payment_status
        self.player_status = player_status
        self.refunded_amount = refunded_amount

    @property
    def amount_paid(self):
        """Gets the amount_paid of this PaymentDetailsResponse.  # noqa: E501


        :return: The amount_paid of this PaymentDetailsResponse.  # noqa: E501
        :rtype: float
        """
        return self._amount_paid

    @amount_paid.setter
    def amount_paid(self, amount_paid):
        """Sets the amount_paid of this PaymentDetailsResponse.


        :param amount_paid: The amount_paid of this PaymentDetailsResponse.  # noqa: E501
        :type: float
        """
        if amount_paid is None:
            raise ValueError("Invalid value for `amount_paid`, must not be `None`")  # noqa: E501

        self._amount_paid = amount_paid

    @property
    def event_fee(self):
        """Gets the event_fee of this PaymentDetailsResponse.  # noqa: E501


        :return: The event_fee of this PaymentDetailsResponse.  # noqa: E501
        :rtype: float
        """
        return self._event_fee

    @event_fee.setter
    def event_fee(self, event_fee):
        """Sets the event_fee of this PaymentDetailsResponse.


        :param event_fee: The event_fee of this PaymentDetailsResponse.  # noqa: E501
        :type: float
        """
        if event_fee is None:
            raise ValueError("Invalid value for `event_fee`, must not be `None`")  # noqa: E501

        self._event_fee = event_fee

    @property
    def is_club_member(self):
        """Gets the is_club_member of this PaymentDetailsResponse.  # noqa: E501


        :return: The is_club_member of this PaymentDetailsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_club_member

    @is_club_member.setter
    def is_club_member(self, is_club_member):
        """Sets the is_club_member of this PaymentDetailsResponse.


        :param is_club_member: The is_club_member of this PaymentDetailsResponse.  # noqa: E501
        :type: bool
        """
        if is_club_member is None:
            raise ValueError("Invalid value for `is_club_member`, must not be `None`")  # noqa: E501

        self._is_club_member = is_club_member

    @property
    def is_registered(self):
        """Gets the is_registered of this PaymentDetailsResponse.  # noqa: E501


        :return: The is_registered of this PaymentDetailsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_registered

    @is_registered.setter
    def is_registered(self, is_registered):
        """Sets the is_registered of this PaymentDetailsResponse.


        :param is_registered: The is_registered of this PaymentDetailsResponse.  # noqa: E501
        :type: bool
        """
        if is_registered is None:
            raise ValueError("Invalid value for `is_registered`, must not be `None`")  # noqa: E501

        self._is_registered = is_registered

    @property
    def is_wait_listed(self):
        """Gets the is_wait_listed of this PaymentDetailsResponse.  # noqa: E501


        :return: The is_wait_listed of this PaymentDetailsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_wait_listed

    @is_wait_listed.setter
    def is_wait_listed(self, is_wait_listed):
        """Sets the is_wait_listed of this PaymentDetailsResponse.


        :param is_wait_listed: The is_wait_listed of this PaymentDetailsResponse.  # noqa: E501
        :type: bool
        """
        if is_wait_listed is None:
            raise ValueError("Invalid value for `is_wait_listed`, must not be `None`")  # noqa: E501

        self._is_wait_listed = is_wait_listed

    @property
    def payment_capture(self):
        """Gets the payment_capture of this PaymentDetailsResponse.  # noqa: E501


        :return: The payment_capture of this PaymentDetailsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._payment_capture

    @payment_capture.setter
    def payment_capture(self, payment_capture):
        """Sets the payment_capture of this PaymentDetailsResponse.


        :param payment_capture: The payment_capture of this PaymentDetailsResponse.  # noqa: E501
        :type: bool
        """
        if payment_capture is None:
            raise ValueError("Invalid value for `payment_capture`, must not be `None`")  # noqa: E501

        self._payment_capture = payment_capture

    @property
    def payment_status(self):
        """Gets the payment_status of this PaymentDetailsResponse.  # noqa: E501


        :return: The payment_status of this PaymentDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_status

    @payment_status.setter
    def payment_status(self, payment_status):
        """Sets the payment_status of this PaymentDetailsResponse.


        :param payment_status: The payment_status of this PaymentDetailsResponse.  # noqa: E501
        :type: str
        """
        if payment_status is None:
            raise ValueError("Invalid value for `payment_status`, must not be `None`")  # noqa: E501
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if payment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_status` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_status, allowed_values)
            )

        self._payment_status = payment_status

    @property
    def player_status(self):
        """Gets the player_status of this PaymentDetailsResponse.  # noqa: E501


        :return: The player_status of this PaymentDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._player_status

    @player_status.setter
    def player_status(self, player_status):
        """Sets the player_status of this PaymentDetailsResponse.


        :param player_status: The player_status of this PaymentDetailsResponse.  # noqa: E501
        :type: str
        """
        if player_status is None:
            raise ValueError("Invalid value for `player_status`, must not be `None`")  # noqa: E501
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if player_status not in allowed_values:
            raise ValueError(
                "Invalid value for `player_status` ({0}), must be one of {1}"  # noqa: E501
                .format(player_status, allowed_values)
            )

        self._player_status = player_status

    @property
    def refunded_amount(self):
        """Gets the refunded_amount of this PaymentDetailsResponse.  # noqa: E501


        :return: The refunded_amount of this PaymentDetailsResponse.  # noqa: E501
        :rtype: float
        """
        return self._refunded_amount

    @refunded_amount.setter
    def refunded_amount(self, refunded_amount):
        """Sets the refunded_amount of this PaymentDetailsResponse.


        :param refunded_amount: The refunded_amount of this PaymentDetailsResponse.  # noqa: E501
        :type: float
        """
        if refunded_amount is None:
            raise ValueError("Invalid value for `refunded_amount`, must not be `None`")  # noqa: E501

        self._refunded_amount = refunded_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentDetailsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentDetailsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DuplicatedPlayer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'birthday': 'str',
        'dupr_id': 'str',
        'email': 'str',
        'first_name': 'str',
        'full_name': 'str',
        'gender': 'str',
        'hand': 'str',
        'id': 'int',
        'last_name': 'str',
        'status': 'str',
        'verified_email': 'bool'
    }

    attribute_map = {
        'birthday': 'birthday',
        'dupr_id': 'duprId',
        'email': 'email',
        'first_name': 'firstName',
        'full_name': 'fullName',
        'gender': 'gender',
        'hand': 'hand',
        'id': 'id',
        'last_name': 'lastName',
        'status': 'status',
        'verified_email': 'verifiedEmail'
    }

    def __init__(self, birthday=None, dupr_id=None, email=None, first_name=None, full_name=None, gender=None, hand=None, id=None, last_name=None, status=None, verified_email=None):  # noqa: E501
        """DuplicatedPlayer - a model defined in Swagger"""  # noqa: E501
        self._birthday = None
        self._dupr_id = None
        self._email = None
        self._first_name = None
        self._full_name = None
        self._gender = None
        self._hand = None
        self._id = None
        self._last_name = None
        self._status = None
        self._verified_email = None
        self.discriminator = None
        if birthday is not None:
            self.birthday = birthday
        if dupr_id is not None:
            self.dupr_id = dupr_id
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if full_name is not None:
            self.full_name = full_name
        if gender is not None:
            self.gender = gender
        if hand is not None:
            self.hand = hand
        self.id = id
        if last_name is not None:
            self.last_name = last_name
        if status is not None:
            self.status = status
        self.verified_email = verified_email

    @property
    def birthday(self):
        """Gets the birthday of this DuplicatedPlayer.  # noqa: E501


        :return: The birthday of this DuplicatedPlayer.  # noqa: E501
        :rtype: str
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this DuplicatedPlayer.


        :param birthday: The birthday of this DuplicatedPlayer.  # noqa: E501
        :type: str
        """

        self._birthday = birthday

    @property
    def dupr_id(self):
        """Gets the dupr_id of this DuplicatedPlayer.  # noqa: E501


        :return: The dupr_id of this DuplicatedPlayer.  # noqa: E501
        :rtype: str
        """
        return self._dupr_id

    @dupr_id.setter
    def dupr_id(self, dupr_id):
        """Sets the dupr_id of this DuplicatedPlayer.


        :param dupr_id: The dupr_id of this DuplicatedPlayer.  # noqa: E501
        :type: str
        """

        self._dupr_id = dupr_id

    @property
    def email(self):
        """Gets the email of this DuplicatedPlayer.  # noqa: E501


        :return: The email of this DuplicatedPlayer.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this DuplicatedPlayer.


        :param email: The email of this DuplicatedPlayer.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this DuplicatedPlayer.  # noqa: E501


        :return: The first_name of this DuplicatedPlayer.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this DuplicatedPlayer.


        :param first_name: The first_name of this DuplicatedPlayer.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def full_name(self):
        """Gets the full_name of this DuplicatedPlayer.  # noqa: E501


        :return: The full_name of this DuplicatedPlayer.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this DuplicatedPlayer.


        :param full_name: The full_name of this DuplicatedPlayer.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def gender(self):
        """Gets the gender of this DuplicatedPlayer.  # noqa: E501


        :return: The gender of this DuplicatedPlayer.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this DuplicatedPlayer.


        :param gender: The gender of this DuplicatedPlayer.  # noqa: E501
        :type: str
        """
        allowed_values = ["FEMALE", "MALE"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def hand(self):
        """Gets the hand of this DuplicatedPlayer.  # noqa: E501


        :return: The hand of this DuplicatedPlayer.  # noqa: E501
        :rtype: str
        """
        return self._hand

    @hand.setter
    def hand(self, hand):
        """Sets the hand of this DuplicatedPlayer.


        :param hand: The hand of this DuplicatedPlayer.  # noqa: E501
        :type: str
        """
        allowed_values = ["BOTH", "LEFT", "NONE", "RIGHT"]  # noqa: E501
        if hand not in allowed_values:
            raise ValueError(
                "Invalid value for `hand` ({0}), must be one of {1}"  # noqa: E501
                .format(hand, allowed_values)
            )

        self._hand = hand

    @property
    def id(self):
        """Gets the id of this DuplicatedPlayer.  # noqa: E501


        :return: The id of this DuplicatedPlayer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DuplicatedPlayer.


        :param id: The id of this DuplicatedPlayer.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this DuplicatedPlayer.  # noqa: E501


        :return: The last_name of this DuplicatedPlayer.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this DuplicatedPlayer.


        :param last_name: The last_name of this DuplicatedPlayer.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def status(self):
        """Gets the status of this DuplicatedPlayer.  # noqa: E501


        :return: The status of this DuplicatedPlayer.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DuplicatedPlayer.


        :param status: The status of this DuplicatedPlayer.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def verified_email(self):
        """Gets the verified_email of this DuplicatedPlayer.  # noqa: E501


        :return: The verified_email of this DuplicatedPlayer.  # noqa: E501
        :rtype: bool
        """
        return self._verified_email

    @verified_email.setter
    def verified_email(self, verified_email):
        """Sets the verified_email of this DuplicatedPlayer.


        :param verified_email: The verified_email of this DuplicatedPlayer.  # noqa: E501
        :type: bool
        """
        if verified_email is None:
            raise ValueError("Invalid value for `verified_email`, must not be `None`")  # noqa: E501

        self._verified_email = verified_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DuplicatedPlayer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DuplicatedPlayer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

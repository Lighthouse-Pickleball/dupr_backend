# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScoreFormat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'format': 'str',
        'games': 'int',
        'id': 'int',
        'priority': 'int',
        'status': 'str',
        'variant': 'str',
        'winning_score': 'int'
    }

    attribute_map = {
        'format': 'format',
        'games': 'games',
        'id': 'id',
        'priority': 'priority',
        'status': 'status',
        'variant': 'variant',
        'winning_score': 'winningScore'
    }

    def __init__(self, format=None, games=None, id=None, priority=None, status=None, variant=None, winning_score=None):  # noqa: E501
        """ScoreFormat - a model defined in Swagger"""  # noqa: E501
        self._format = None
        self._games = None
        self._id = None
        self._priority = None
        self._status = None
        self._variant = None
        self._winning_score = None
        self.discriminator = None
        if format is not None:
            self.format = format
        self.games = games
        if id is not None:
            self.id = id
        if priority is not None:
            self.priority = priority
        if status is not None:
            self.status = status
        if variant is not None:
            self.variant = variant
        self.winning_score = winning_score

    @property
    def format(self):
        """Gets the format of this ScoreFormat.  # noqa: E501


        :return: The format of this ScoreFormat.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ScoreFormat.


        :param format: The format of this ScoreFormat.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def games(self):
        """Gets the games of this ScoreFormat.  # noqa: E501


        :return: The games of this ScoreFormat.  # noqa: E501
        :rtype: int
        """
        return self._games

    @games.setter
    def games(self, games):
        """Sets the games of this ScoreFormat.


        :param games: The games of this ScoreFormat.  # noqa: E501
        :type: int
        """
        if games is None:
            raise ValueError("Invalid value for `games`, must not be `None`")  # noqa: E501

        self._games = games

    @property
    def id(self):
        """Gets the id of this ScoreFormat.  # noqa: E501


        :return: The id of this ScoreFormat.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScoreFormat.


        :param id: The id of this ScoreFormat.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def priority(self):
        """Gets the priority of this ScoreFormat.  # noqa: E501


        :return: The priority of this ScoreFormat.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ScoreFormat.


        :param priority: The priority of this ScoreFormat.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def status(self):
        """Gets the status of this ScoreFormat.  # noqa: E501


        :return: The status of this ScoreFormat.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ScoreFormat.


        :param status: The status of this ScoreFormat.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def variant(self):
        """Gets the variant of this ScoreFormat.  # noqa: E501


        :return: The variant of this ScoreFormat.  # noqa: E501
        :rtype: str
        """
        return self._variant

    @variant.setter
    def variant(self, variant):
        """Sets the variant of this ScoreFormat.


        :param variant: The variant of this ScoreFormat.  # noqa: E501
        :type: str
        """

        self._variant = variant

    @property
    def winning_score(self):
        """Gets the winning_score of this ScoreFormat.  # noqa: E501


        :return: The winning_score of this ScoreFormat.  # noqa: E501
        :rtype: int
        """
        return self._winning_score

    @winning_score.setter
    def winning_score(self, winning_score):
        """Sets the winning_score of this ScoreFormat.


        :param winning_score: The winning_score of this ScoreFormat.  # noqa: E501
        :type: int
        """
        if winning_score is None:
            raise ValueError("Invalid value for `winning_score`, must not be `None`")  # noqa: E501

        self._winning_score = winning_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScoreFormat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScoreFormat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BracketResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'age_bracket': 'list[int]',
        'bracket_id': 'int',
        'can_show_standings': 'bool',
        'club_id': 'int',
        'club_name': 'str',
        'contact_details': 'list[LeagueContactDetailResponse]',
        'courts': 'int',
        'currency_details': 'CurrencyDetailsResponse',
        'custom_code': 'str',
        'description': 'LeagueContentResponse',
        'display_status': 'str',
        'draw_impacted': 'bool',
        'duration': 'list[str]',
        'duration_date_time': 'list[str]',
        'duration_status': 'str',
        'elimination': 'str',
        'format': 'str',
        'has_confirm_match': 'bool',
        'has_queue': 'bool',
        'is_match_seeded': 'bool',
        'is_player_eligible': 'bool',
        'is_queue_complete': 'bool',
        'is_registered': 'bool',
        'is_wait_list_full': 'bool',
        'league_address': 'AddressResponse',
        'league_id': 'int',
        'league_name': 'str',
        'match_bonus_points': 'float',
        'max_team': 'int',
        'media_url': 'str',
        'member_fee': 'float',
        'name': 'str',
        'non_member_fee': 'float',
        'payment_details': 'PaymentDetailsResponse',
        'payment_status': 'str',
        'player_group': 'str',
        'rating_bracket': 'list[float]',
        'reg_user_id': 'int',
        'registered_members': 'int',
        'registration_date': 'list[str]',
        'registration_date_time': 'list[str]',
        'registration_details': 'RegistrationResponse',
        'registration_status': 'str',
        'score_format': 'str',
        'score_format_id': 'int',
        'status': 'str',
        'time_zone': 'str',
        'total_rounds': 'int',
        'wait_list': 'int',
        'zone_name': 'str'
    }

    attribute_map = {
        'age_bracket': 'ageBracket',
        'bracket_id': 'bracketId',
        'can_show_standings': 'canShowStandings',
        'club_id': 'clubId',
        'club_name': 'clubName',
        'contact_details': 'contactDetails',
        'courts': 'courts',
        'currency_details': 'currencyDetails',
        'custom_code': 'customCode',
        'description': 'description',
        'display_status': 'displayStatus',
        'draw_impacted': 'drawImpacted',
        'duration': 'duration',
        'duration_date_time': 'durationDateTime',
        'duration_status': 'durationStatus',
        'elimination': 'elimination',
        'format': 'format',
        'has_confirm_match': 'hasConfirmMatch',
        'has_queue': 'hasQueue',
        'is_match_seeded': 'isMatchSeeded',
        'is_player_eligible': 'isPlayerEligible',
        'is_queue_complete': 'isQueueComplete',
        'is_registered': 'isRegistered',
        'is_wait_list_full': 'isWaitListFull',
        'league_address': 'leagueAddress',
        'league_id': 'leagueId',
        'league_name': 'leagueName',
        'match_bonus_points': 'matchBonusPoints',
        'max_team': 'maxTeam',
        'media_url': 'mediaUrl',
        'member_fee': 'memberFee',
        'name': 'name',
        'non_member_fee': 'nonMemberFee',
        'payment_details': 'paymentDetails',
        'payment_status': 'paymentStatus',
        'player_group': 'playerGroup',
        'rating_bracket': 'ratingBracket',
        'reg_user_id': 'regUserId',
        'registered_members': 'registeredMembers',
        'registration_date': 'registrationDate',
        'registration_date_time': 'registrationDateTime',
        'registration_details': 'registrationDetails',
        'registration_status': 'registrationStatus',
        'score_format': 'scoreFormat',
        'score_format_id': 'scoreFormatId',
        'status': 'status',
        'time_zone': 'timeZone',
        'total_rounds': 'totalRounds',
        'wait_list': 'waitList',
        'zone_name': 'zoneName'
    }

    def __init__(self, age_bracket=None, bracket_id=None, can_show_standings=None, club_id=None, club_name=None, contact_details=None, courts=None, currency_details=None, custom_code=None, description=None, display_status=None, draw_impacted=None, duration=None, duration_date_time=None, duration_status=None, elimination=None, format=None, has_confirm_match=None, has_queue=None, is_match_seeded=None, is_player_eligible=None, is_queue_complete=None, is_registered=None, is_wait_list_full=None, league_address=None, league_id=None, league_name=None, match_bonus_points=None, max_team=None, media_url=None, member_fee=None, name=None, non_member_fee=None, payment_details=None, payment_status=None, player_group=None, rating_bracket=None, reg_user_id=None, registered_members=None, registration_date=None, registration_date_time=None, registration_details=None, registration_status=None, score_format=None, score_format_id=None, status=None, time_zone=None, total_rounds=None, wait_list=None, zone_name=None):  # noqa: E501
        """BracketResponse - a model defined in Swagger"""  # noqa: E501
        self._age_bracket = None
        self._bracket_id = None
        self._can_show_standings = None
        self._club_id = None
        self._club_name = None
        self._contact_details = None
        self._courts = None
        self._currency_details = None
        self._custom_code = None
        self._description = None
        self._display_status = None
        self._draw_impacted = None
        self._duration = None
        self._duration_date_time = None
        self._duration_status = None
        self._elimination = None
        self._format = None
        self._has_confirm_match = None
        self._has_queue = None
        self._is_match_seeded = None
        self._is_player_eligible = None
        self._is_queue_complete = None
        self._is_registered = None
        self._is_wait_list_full = None
        self._league_address = None
        self._league_id = None
        self._league_name = None
        self._match_bonus_points = None
        self._max_team = None
        self._media_url = None
        self._member_fee = None
        self._name = None
        self._non_member_fee = None
        self._payment_details = None
        self._payment_status = None
        self._player_group = None
        self._rating_bracket = None
        self._reg_user_id = None
        self._registered_members = None
        self._registration_date = None
        self._registration_date_time = None
        self._registration_details = None
        self._registration_status = None
        self._score_format = None
        self._score_format_id = None
        self._status = None
        self._time_zone = None
        self._total_rounds = None
        self._wait_list = None
        self._zone_name = None
        self.discriminator = None
        if age_bracket is not None:
            self.age_bracket = age_bracket
        self.bracket_id = bracket_id
        if can_show_standings is not None:
            self.can_show_standings = can_show_standings
        self.club_id = club_id
        self.club_name = club_name
        if contact_details is not None:
            self.contact_details = contact_details
        if courts is not None:
            self.courts = courts
        if currency_details is not None:
            self.currency_details = currency_details
        if custom_code is not None:
            self.custom_code = custom_code
        if description is not None:
            self.description = description
        if display_status is not None:
            self.display_status = display_status
        if draw_impacted is not None:
            self.draw_impacted = draw_impacted
        self.duration = duration
        if duration_date_time is not None:
            self.duration_date_time = duration_date_time
        if duration_status is not None:
            self.duration_status = duration_status
        if elimination is not None:
            self.elimination = elimination
        if format is not None:
            self.format = format
        if has_confirm_match is not None:
            self.has_confirm_match = has_confirm_match
        if has_queue is not None:
            self.has_queue = has_queue
        if is_match_seeded is not None:
            self.is_match_seeded = is_match_seeded
        if is_player_eligible is not None:
            self.is_player_eligible = is_player_eligible
        if is_queue_complete is not None:
            self.is_queue_complete = is_queue_complete
        self.is_registered = is_registered
        self.is_wait_list_full = is_wait_list_full
        if league_address is not None:
            self.league_address = league_address
        self.league_id = league_id
        self.league_name = league_name
        if match_bonus_points is not None:
            self.match_bonus_points = match_bonus_points
        if max_team is not None:
            self.max_team = max_team
        if media_url is not None:
            self.media_url = media_url
        if member_fee is not None:
            self.member_fee = member_fee
        if name is not None:
            self.name = name
        self.non_member_fee = non_member_fee
        if payment_details is not None:
            self.payment_details = payment_details
        self.payment_status = payment_status
        if player_group is not None:
            self.player_group = player_group
        if rating_bracket is not None:
            self.rating_bracket = rating_bracket
        if reg_user_id is not None:
            self.reg_user_id = reg_user_id
        if registered_members is not None:
            self.registered_members = registered_members
        if registration_date is not None:
            self.registration_date = registration_date
        if registration_date_time is not None:
            self.registration_date_time = registration_date_time
        if registration_details is not None:
            self.registration_details = registration_details
        if registration_status is not None:
            self.registration_status = registration_status
        self.score_format = score_format
        self.score_format_id = score_format_id
        if status is not None:
            self.status = status
        if time_zone is not None:
            self.time_zone = time_zone
        if total_rounds is not None:
            self.total_rounds = total_rounds
        self.wait_list = wait_list
        if zone_name is not None:
            self.zone_name = zone_name

    @property
    def age_bracket(self):
        """Gets the age_bracket of this BracketResponse.  # noqa: E501


        :return: The age_bracket of this BracketResponse.  # noqa: E501
        :rtype: list[int]
        """
        return self._age_bracket

    @age_bracket.setter
    def age_bracket(self, age_bracket):
        """Sets the age_bracket of this BracketResponse.


        :param age_bracket: The age_bracket of this BracketResponse.  # noqa: E501
        :type: list[int]
        """

        self._age_bracket = age_bracket

    @property
    def bracket_id(self):
        """Gets the bracket_id of this BracketResponse.  # noqa: E501


        :return: The bracket_id of this BracketResponse.  # noqa: E501
        :rtype: int
        """
        return self._bracket_id

    @bracket_id.setter
    def bracket_id(self, bracket_id):
        """Sets the bracket_id of this BracketResponse.


        :param bracket_id: The bracket_id of this BracketResponse.  # noqa: E501
        :type: int
        """
        if bracket_id is None:
            raise ValueError("Invalid value for `bracket_id`, must not be `None`")  # noqa: E501

        self._bracket_id = bracket_id

    @property
    def can_show_standings(self):
        """Gets the can_show_standings of this BracketResponse.  # noqa: E501


        :return: The can_show_standings of this BracketResponse.  # noqa: E501
        :rtype: bool
        """
        return self._can_show_standings

    @can_show_standings.setter
    def can_show_standings(self, can_show_standings):
        """Sets the can_show_standings of this BracketResponse.


        :param can_show_standings: The can_show_standings of this BracketResponse.  # noqa: E501
        :type: bool
        """

        self._can_show_standings = can_show_standings

    @property
    def club_id(self):
        """Gets the club_id of this BracketResponse.  # noqa: E501


        :return: The club_id of this BracketResponse.  # noqa: E501
        :rtype: int
        """
        return self._club_id

    @club_id.setter
    def club_id(self, club_id):
        """Sets the club_id of this BracketResponse.


        :param club_id: The club_id of this BracketResponse.  # noqa: E501
        :type: int
        """
        if club_id is None:
            raise ValueError("Invalid value for `club_id`, must not be `None`")  # noqa: E501

        self._club_id = club_id

    @property
    def club_name(self):
        """Gets the club_name of this BracketResponse.  # noqa: E501


        :return: The club_name of this BracketResponse.  # noqa: E501
        :rtype: str
        """
        return self._club_name

    @club_name.setter
    def club_name(self, club_name):
        """Sets the club_name of this BracketResponse.


        :param club_name: The club_name of this BracketResponse.  # noqa: E501
        :type: str
        """
        if club_name is None:
            raise ValueError("Invalid value for `club_name`, must not be `None`")  # noqa: E501

        self._club_name = club_name

    @property
    def contact_details(self):
        """Gets the contact_details of this BracketResponse.  # noqa: E501


        :return: The contact_details of this BracketResponse.  # noqa: E501
        :rtype: list[LeagueContactDetailResponse]
        """
        return self._contact_details

    @contact_details.setter
    def contact_details(self, contact_details):
        """Sets the contact_details of this BracketResponse.


        :param contact_details: The contact_details of this BracketResponse.  # noqa: E501
        :type: list[LeagueContactDetailResponse]
        """

        self._contact_details = contact_details

    @property
    def courts(self):
        """Gets the courts of this BracketResponse.  # noqa: E501


        :return: The courts of this BracketResponse.  # noqa: E501
        :rtype: int
        """
        return self._courts

    @courts.setter
    def courts(self, courts):
        """Sets the courts of this BracketResponse.


        :param courts: The courts of this BracketResponse.  # noqa: E501
        :type: int
        """

        self._courts = courts

    @property
    def currency_details(self):
        """Gets the currency_details of this BracketResponse.  # noqa: E501


        :return: The currency_details of this BracketResponse.  # noqa: E501
        :rtype: CurrencyDetailsResponse
        """
        return self._currency_details

    @currency_details.setter
    def currency_details(self, currency_details):
        """Sets the currency_details of this BracketResponse.


        :param currency_details: The currency_details of this BracketResponse.  # noqa: E501
        :type: CurrencyDetailsResponse
        """

        self._currency_details = currency_details

    @property
    def custom_code(self):
        """Gets the custom_code of this BracketResponse.  # noqa: E501


        :return: The custom_code of this BracketResponse.  # noqa: E501
        :rtype: str
        """
        return self._custom_code

    @custom_code.setter
    def custom_code(self, custom_code):
        """Sets the custom_code of this BracketResponse.


        :param custom_code: The custom_code of this BracketResponse.  # noqa: E501
        :type: str
        """

        self._custom_code = custom_code

    @property
    def description(self):
        """Gets the description of this BracketResponse.  # noqa: E501


        :return: The description of this BracketResponse.  # noqa: E501
        :rtype: LeagueContentResponse
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BracketResponse.


        :param description: The description of this BracketResponse.  # noqa: E501
        :type: LeagueContentResponse
        """

        self._description = description

    @property
    def display_status(self):
        """Gets the display_status of this BracketResponse.  # noqa: E501


        :return: The display_status of this BracketResponse.  # noqa: E501
        :rtype: str
        """
        return self._display_status

    @display_status.setter
    def display_status(self, display_status):
        """Sets the display_status of this BracketResponse.


        :param display_status: The display_status of this BracketResponse.  # noqa: E501
        :type: str
        """

        self._display_status = display_status

    @property
    def draw_impacted(self):
        """Gets the draw_impacted of this BracketResponse.  # noqa: E501


        :return: The draw_impacted of this BracketResponse.  # noqa: E501
        :rtype: bool
        """
        return self._draw_impacted

    @draw_impacted.setter
    def draw_impacted(self, draw_impacted):
        """Sets the draw_impacted of this BracketResponse.


        :param draw_impacted: The draw_impacted of this BracketResponse.  # noqa: E501
        :type: bool
        """

        self._draw_impacted = draw_impacted

    @property
    def duration(self):
        """Gets the duration of this BracketResponse.  # noqa: E501


        :return: The duration of this BracketResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this BracketResponse.


        :param duration: The duration of this BracketResponse.  # noqa: E501
        :type: list[str]
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def duration_date_time(self):
        """Gets the duration_date_time of this BracketResponse.  # noqa: E501


        :return: The duration_date_time of this BracketResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._duration_date_time

    @duration_date_time.setter
    def duration_date_time(self, duration_date_time):
        """Sets the duration_date_time of this BracketResponse.


        :param duration_date_time: The duration_date_time of this BracketResponse.  # noqa: E501
        :type: list[str]
        """

        self._duration_date_time = duration_date_time

    @property
    def duration_status(self):
        """Gets the duration_status of this BracketResponse.  # noqa: E501


        :return: The duration_status of this BracketResponse.  # noqa: E501
        :rtype: str
        """
        return self._duration_status

    @duration_status.setter
    def duration_status(self, duration_status):
        """Sets the duration_status of this BracketResponse.


        :param duration_status: The duration_status of this BracketResponse.  # noqa: E501
        :type: str
        """

        self._duration_status = duration_status

    @property
    def elimination(self):
        """Gets the elimination of this BracketResponse.  # noqa: E501


        :return: The elimination of this BracketResponse.  # noqa: E501
        :rtype: str
        """
        return self._elimination

    @elimination.setter
    def elimination(self, elimination):
        """Sets the elimination of this BracketResponse.


        :param elimination: The elimination of this BracketResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["COMPASS", "DOUBLE", "DOUBLE_PREVENTED", "FLEX", "ROUND_ROBIN", "SINGLE"]  # noqa: E501
        if elimination not in allowed_values:
            raise ValueError(
                "Invalid value for `elimination` ({0}), must be one of {1}"  # noqa: E501
                .format(elimination, allowed_values)
            )

        self._elimination = elimination

    @property
    def format(self):
        """Gets the format of this BracketResponse.  # noqa: E501


        :return: The format of this BracketResponse.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this BracketResponse.


        :param format: The format of this BracketResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["DOUBLES", "SINGLES"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def has_confirm_match(self):
        """Gets the has_confirm_match of this BracketResponse.  # noqa: E501


        :return: The has_confirm_match of this BracketResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_confirm_match

    @has_confirm_match.setter
    def has_confirm_match(self, has_confirm_match):
        """Sets the has_confirm_match of this BracketResponse.


        :param has_confirm_match: The has_confirm_match of this BracketResponse.  # noqa: E501
        :type: bool
        """

        self._has_confirm_match = has_confirm_match

    @property
    def has_queue(self):
        """Gets the has_queue of this BracketResponse.  # noqa: E501


        :return: The has_queue of this BracketResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_queue

    @has_queue.setter
    def has_queue(self, has_queue):
        """Sets the has_queue of this BracketResponse.


        :param has_queue: The has_queue of this BracketResponse.  # noqa: E501
        :type: bool
        """

        self._has_queue = has_queue

    @property
    def is_match_seeded(self):
        """Gets the is_match_seeded of this BracketResponse.  # noqa: E501


        :return: The is_match_seeded of this BracketResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_match_seeded

    @is_match_seeded.setter
    def is_match_seeded(self, is_match_seeded):
        """Sets the is_match_seeded of this BracketResponse.


        :param is_match_seeded: The is_match_seeded of this BracketResponse.  # noqa: E501
        :type: bool
        """

        self._is_match_seeded = is_match_seeded

    @property
    def is_player_eligible(self):
        """Gets the is_player_eligible of this BracketResponse.  # noqa: E501


        :return: The is_player_eligible of this BracketResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_player_eligible

    @is_player_eligible.setter
    def is_player_eligible(self, is_player_eligible):
        """Sets the is_player_eligible of this BracketResponse.


        :param is_player_eligible: The is_player_eligible of this BracketResponse.  # noqa: E501
        :type: bool
        """

        self._is_player_eligible = is_player_eligible

    @property
    def is_queue_complete(self):
        """Gets the is_queue_complete of this BracketResponse.  # noqa: E501


        :return: The is_queue_complete of this BracketResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_queue_complete

    @is_queue_complete.setter
    def is_queue_complete(self, is_queue_complete):
        """Sets the is_queue_complete of this BracketResponse.


        :param is_queue_complete: The is_queue_complete of this BracketResponse.  # noqa: E501
        :type: bool
        """

        self._is_queue_complete = is_queue_complete

    @property
    def is_registered(self):
        """Gets the is_registered of this BracketResponse.  # noqa: E501


        :return: The is_registered of this BracketResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_registered

    @is_registered.setter
    def is_registered(self, is_registered):
        """Sets the is_registered of this BracketResponse.


        :param is_registered: The is_registered of this BracketResponse.  # noqa: E501
        :type: bool
        """
        if is_registered is None:
            raise ValueError("Invalid value for `is_registered`, must not be `None`")  # noqa: E501

        self._is_registered = is_registered

    @property
    def is_wait_list_full(self):
        """Gets the is_wait_list_full of this BracketResponse.  # noqa: E501


        :return: The is_wait_list_full of this BracketResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_wait_list_full

    @is_wait_list_full.setter
    def is_wait_list_full(self, is_wait_list_full):
        """Sets the is_wait_list_full of this BracketResponse.


        :param is_wait_list_full: The is_wait_list_full of this BracketResponse.  # noqa: E501
        :type: bool
        """
        if is_wait_list_full is None:
            raise ValueError("Invalid value for `is_wait_list_full`, must not be `None`")  # noqa: E501

        self._is_wait_list_full = is_wait_list_full

    @property
    def league_address(self):
        """Gets the league_address of this BracketResponse.  # noqa: E501


        :return: The league_address of this BracketResponse.  # noqa: E501
        :rtype: AddressResponse
        """
        return self._league_address

    @league_address.setter
    def league_address(self, league_address):
        """Sets the league_address of this BracketResponse.


        :param league_address: The league_address of this BracketResponse.  # noqa: E501
        :type: AddressResponse
        """

        self._league_address = league_address

    @property
    def league_id(self):
        """Gets the league_id of this BracketResponse.  # noqa: E501


        :return: The league_id of this BracketResponse.  # noqa: E501
        :rtype: int
        """
        return self._league_id

    @league_id.setter
    def league_id(self, league_id):
        """Sets the league_id of this BracketResponse.


        :param league_id: The league_id of this BracketResponse.  # noqa: E501
        :type: int
        """
        if league_id is None:
            raise ValueError("Invalid value for `league_id`, must not be `None`")  # noqa: E501

        self._league_id = league_id

    @property
    def league_name(self):
        """Gets the league_name of this BracketResponse.  # noqa: E501


        :return: The league_name of this BracketResponse.  # noqa: E501
        :rtype: str
        """
        return self._league_name

    @league_name.setter
    def league_name(self, league_name):
        """Sets the league_name of this BracketResponse.


        :param league_name: The league_name of this BracketResponse.  # noqa: E501
        :type: str
        """
        if league_name is None:
            raise ValueError("Invalid value for `league_name`, must not be `None`")  # noqa: E501

        self._league_name = league_name

    @property
    def match_bonus_points(self):
        """Gets the match_bonus_points of this BracketResponse.  # noqa: E501


        :return: The match_bonus_points of this BracketResponse.  # noqa: E501
        :rtype: float
        """
        return self._match_bonus_points

    @match_bonus_points.setter
    def match_bonus_points(self, match_bonus_points):
        """Sets the match_bonus_points of this BracketResponse.


        :param match_bonus_points: The match_bonus_points of this BracketResponse.  # noqa: E501
        :type: float
        """

        self._match_bonus_points = match_bonus_points

    @property
    def max_team(self):
        """Gets the max_team of this BracketResponse.  # noqa: E501


        :return: The max_team of this BracketResponse.  # noqa: E501
        :rtype: int
        """
        return self._max_team

    @max_team.setter
    def max_team(self, max_team):
        """Sets the max_team of this BracketResponse.


        :param max_team: The max_team of this BracketResponse.  # noqa: E501
        :type: int
        """

        self._max_team = max_team

    @property
    def media_url(self):
        """Gets the media_url of this BracketResponse.  # noqa: E501


        :return: The media_url of this BracketResponse.  # noqa: E501
        :rtype: str
        """
        return self._media_url

    @media_url.setter
    def media_url(self, media_url):
        """Sets the media_url of this BracketResponse.


        :param media_url: The media_url of this BracketResponse.  # noqa: E501
        :type: str
        """

        self._media_url = media_url

    @property
    def member_fee(self):
        """Gets the member_fee of this BracketResponse.  # noqa: E501


        :return: The member_fee of this BracketResponse.  # noqa: E501
        :rtype: float
        """
        return self._member_fee

    @member_fee.setter
    def member_fee(self, member_fee):
        """Sets the member_fee of this BracketResponse.


        :param member_fee: The member_fee of this BracketResponse.  # noqa: E501
        :type: float
        """

        self._member_fee = member_fee

    @property
    def name(self):
        """Gets the name of this BracketResponse.  # noqa: E501


        :return: The name of this BracketResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BracketResponse.


        :param name: The name of this BracketResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def non_member_fee(self):
        """Gets the non_member_fee of this BracketResponse.  # noqa: E501


        :return: The non_member_fee of this BracketResponse.  # noqa: E501
        :rtype: float
        """
        return self._non_member_fee

    @non_member_fee.setter
    def non_member_fee(self, non_member_fee):
        """Sets the non_member_fee of this BracketResponse.


        :param non_member_fee: The non_member_fee of this BracketResponse.  # noqa: E501
        :type: float
        """
        if non_member_fee is None:
            raise ValueError("Invalid value for `non_member_fee`, must not be `None`")  # noqa: E501

        self._non_member_fee = non_member_fee

    @property
    def payment_details(self):
        """Gets the payment_details of this BracketResponse.  # noqa: E501


        :return: The payment_details of this BracketResponse.  # noqa: E501
        :rtype: PaymentDetailsResponse
        """
        return self._payment_details

    @payment_details.setter
    def payment_details(self, payment_details):
        """Sets the payment_details of this BracketResponse.


        :param payment_details: The payment_details of this BracketResponse.  # noqa: E501
        :type: PaymentDetailsResponse
        """

        self._payment_details = payment_details

    @property
    def payment_status(self):
        """Gets the payment_status of this BracketResponse.  # noqa: E501


        :return: The payment_status of this BracketResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_status

    @payment_status.setter
    def payment_status(self, payment_status):
        """Sets the payment_status of this BracketResponse.


        :param payment_status: The payment_status of this BracketResponse.  # noqa: E501
        :type: str
        """
        if payment_status is None:
            raise ValueError("Invalid value for `payment_status`, must not be `None`")  # noqa: E501
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if payment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_status` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_status, allowed_values)
            )

        self._payment_status = payment_status

    @property
    def player_group(self):
        """Gets the player_group of this BracketResponse.  # noqa: E501


        :return: The player_group of this BracketResponse.  # noqa: E501
        :rtype: str
        """
        return self._player_group

    @player_group.setter
    def player_group(self, player_group):
        """Sets the player_group of this BracketResponse.


        :param player_group: The player_group of this BracketResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["COED", "MEN", "MIXED", "OPEN", "WOMEN"]  # noqa: E501
        if player_group not in allowed_values:
            raise ValueError(
                "Invalid value for `player_group` ({0}), must be one of {1}"  # noqa: E501
                .format(player_group, allowed_values)
            )

        self._player_group = player_group

    @property
    def rating_bracket(self):
        """Gets the rating_bracket of this BracketResponse.  # noqa: E501


        :return: The rating_bracket of this BracketResponse.  # noqa: E501
        :rtype: list[float]
        """
        return self._rating_bracket

    @rating_bracket.setter
    def rating_bracket(self, rating_bracket):
        """Sets the rating_bracket of this BracketResponse.


        :param rating_bracket: The rating_bracket of this BracketResponse.  # noqa: E501
        :type: list[float]
        """

        self._rating_bracket = rating_bracket

    @property
    def reg_user_id(self):
        """Gets the reg_user_id of this BracketResponse.  # noqa: E501


        :return: The reg_user_id of this BracketResponse.  # noqa: E501
        :rtype: int
        """
        return self._reg_user_id

    @reg_user_id.setter
    def reg_user_id(self, reg_user_id):
        """Sets the reg_user_id of this BracketResponse.


        :param reg_user_id: The reg_user_id of this BracketResponse.  # noqa: E501
        :type: int
        """

        self._reg_user_id = reg_user_id

    @property
    def registered_members(self):
        """Gets the registered_members of this BracketResponse.  # noqa: E501


        :return: The registered_members of this BracketResponse.  # noqa: E501
        :rtype: int
        """
        return self._registered_members

    @registered_members.setter
    def registered_members(self, registered_members):
        """Sets the registered_members of this BracketResponse.


        :param registered_members: The registered_members of this BracketResponse.  # noqa: E501
        :type: int
        """

        self._registered_members = registered_members

    @property
    def registration_date(self):
        """Gets the registration_date of this BracketResponse.  # noqa: E501


        :return: The registration_date of this BracketResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date):
        """Sets the registration_date of this BracketResponse.


        :param registration_date: The registration_date of this BracketResponse.  # noqa: E501
        :type: list[str]
        """

        self._registration_date = registration_date

    @property
    def registration_date_time(self):
        """Gets the registration_date_time of this BracketResponse.  # noqa: E501


        :return: The registration_date_time of this BracketResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._registration_date_time

    @registration_date_time.setter
    def registration_date_time(self, registration_date_time):
        """Sets the registration_date_time of this BracketResponse.


        :param registration_date_time: The registration_date_time of this BracketResponse.  # noqa: E501
        :type: list[str]
        """

        self._registration_date_time = registration_date_time

    @property
    def registration_details(self):
        """Gets the registration_details of this BracketResponse.  # noqa: E501


        :return: The registration_details of this BracketResponse.  # noqa: E501
        :rtype: RegistrationResponse
        """
        return self._registration_details

    @registration_details.setter
    def registration_details(self, registration_details):
        """Sets the registration_details of this BracketResponse.


        :param registration_details: The registration_details of this BracketResponse.  # noqa: E501
        :type: RegistrationResponse
        """

        self._registration_details = registration_details

    @property
    def registration_status(self):
        """Gets the registration_status of this BracketResponse.  # noqa: E501


        :return: The registration_status of this BracketResponse.  # noqa: E501
        :rtype: str
        """
        return self._registration_status

    @registration_status.setter
    def registration_status(self, registration_status):
        """Sets the registration_status of this BracketResponse.


        :param registration_status: The registration_status of this BracketResponse.  # noqa: E501
        :type: str
        """

        self._registration_status = registration_status

    @property
    def score_format(self):
        """Gets the score_format of this BracketResponse.  # noqa: E501


        :return: The score_format of this BracketResponse.  # noqa: E501
        :rtype: str
        """
        return self._score_format

    @score_format.setter
    def score_format(self, score_format):
        """Sets the score_format of this BracketResponse.


        :param score_format: The score_format of this BracketResponse.  # noqa: E501
        :type: str
        """
        if score_format is None:
            raise ValueError("Invalid value for `score_format`, must not be `None`")  # noqa: E501

        self._score_format = score_format

    @property
    def score_format_id(self):
        """Gets the score_format_id of this BracketResponse.  # noqa: E501


        :return: The score_format_id of this BracketResponse.  # noqa: E501
        :rtype: int
        """
        return self._score_format_id

    @score_format_id.setter
    def score_format_id(self, score_format_id):
        """Sets the score_format_id of this BracketResponse.


        :param score_format_id: The score_format_id of this BracketResponse.  # noqa: E501
        :type: int
        """
        if score_format_id is None:
            raise ValueError("Invalid value for `score_format_id`, must not be `None`")  # noqa: E501

        self._score_format_id = score_format_id

    @property
    def status(self):
        """Gets the status of this BracketResponse.  # noqa: E501


        :return: The status of this BracketResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BracketResponse.


        :param status: The status of this BracketResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def time_zone(self):
        """Gets the time_zone of this BracketResponse.  # noqa: E501


        :return: The time_zone of this BracketResponse.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this BracketResponse.


        :param time_zone: The time_zone of this BracketResponse.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def total_rounds(self):
        """Gets the total_rounds of this BracketResponse.  # noqa: E501


        :return: The total_rounds of this BracketResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_rounds

    @total_rounds.setter
    def total_rounds(self, total_rounds):
        """Sets the total_rounds of this BracketResponse.


        :param total_rounds: The total_rounds of this BracketResponse.  # noqa: E501
        :type: int
        """

        self._total_rounds = total_rounds

    @property
    def wait_list(self):
        """Gets the wait_list of this BracketResponse.  # noqa: E501


        :return: The wait_list of this BracketResponse.  # noqa: E501
        :rtype: int
        """
        return self._wait_list

    @wait_list.setter
    def wait_list(self, wait_list):
        """Sets the wait_list of this BracketResponse.


        :param wait_list: The wait_list of this BracketResponse.  # noqa: E501
        :type: int
        """
        if wait_list is None:
            raise ValueError("Invalid value for `wait_list`, must not be `None`")  # noqa: E501

        self._wait_list = wait_list

    @property
    def zone_name(self):
        """Gets the zone_name of this BracketResponse.  # noqa: E501


        :return: The zone_name of this BracketResponse.  # noqa: E501
        :rtype: str
        """
        return self._zone_name

    @zone_name.setter
    def zone_name(self, zone_name):
        """Sets the zone_name of this BracketResponse.


        :param zone_name: The zone_name of this BracketResponse.  # noqa: E501
        :type: str
        """

        self._zone_name = zone_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BracketResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BracketResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class PlayerInitializationDataResponse(BaseModel):
    """
    PlayerInitializationDataResponse
    """
    days_left_for_initialization: Optional[StrictInt] = Field(None, alias="daysLeftForInitialization")
    event_format: StrictStr = Field(..., alias="eventFormat")
    initialization_status: StrictStr = Field(..., alias="initializationStatus")
    player_id: StrictStr = Field(..., alias="playerId")
    player_name: StrictStr = Field(..., alias="playerName")
    qualification_score: Union[StrictFloat, StrictInt] = Field(..., alias="qualificationScore")
    __properties = ["daysLeftForInitialization", "eventFormat", "initializationStatus", "playerId", "playerName", "qualificationScore"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlayerInitializationDataResponse:
        """Create an instance of PlayerInitializationDataResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlayerInitializationDataResponse:
        """Create an instance of PlayerInitializationDataResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlayerInitializationDataResponse.parse_obj(obj)

        _obj = PlayerInitializationDataResponse.parse_obj({
            "days_left_for_initialization": obj.get("daysLeftForInitialization"),
            "event_format": obj.get("eventFormat"),
            "initialization_status": obj.get("initializationStatus"),
            "player_id": obj.get("playerId"),
            "player_name": obj.get("playerName"),
            "qualification_score": obj.get("qualificationScore")
        })
        return _obj



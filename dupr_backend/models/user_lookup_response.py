# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserLookupResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'birthdate': 'date',
        'created': 'str',
        'email': 'str',
        'external_id': 'str',
        'full_name': 'str',
        'gender': 'str',
        'hand': 'str',
        'id': 'int',
        'image_url': 'str',
        'is_valid_email': 'bool',
        'is_valid_phone': 'bool',
        'phone_number': 'str',
        'referral_code': 'str',
        'registered': 'bool',
        'restricted': 'bool',
        'role': 'RoleResponse',
        'status': 'str'
    }

    attribute_map = {
        'birthdate': 'birthdate',
        'created': 'created',
        'email': 'email',
        'external_id': 'externalId',
        'full_name': 'fullName',
        'gender': 'gender',
        'hand': 'hand',
        'id': 'id',
        'image_url': 'imageUrl',
        'is_valid_email': 'isValidEmail',
        'is_valid_phone': 'isValidPhone',
        'phone_number': 'phoneNumber',
        'referral_code': 'referralCode',
        'registered': 'registered',
        'restricted': 'restricted',
        'role': 'role',
        'status': 'status'
    }

    def __init__(self, birthdate=None, created=None, email=None, external_id=None, full_name=None, gender=None, hand=None, id=None, image_url=None, is_valid_email=None, is_valid_phone=None, phone_number=None, referral_code=None, registered=None, restricted=None, role=None, status=None):  # noqa: E501
        """UserLookupResponse - a model defined in Swagger"""  # noqa: E501
        self._birthdate = None
        self._created = None
        self._email = None
        self._external_id = None
        self._full_name = None
        self._gender = None
        self._hand = None
        self._id = None
        self._image_url = None
        self._is_valid_email = None
        self._is_valid_phone = None
        self._phone_number = None
        self._referral_code = None
        self._registered = None
        self._restricted = None
        self._role = None
        self._status = None
        self.discriminator = None
        if birthdate is not None:
            self.birthdate = birthdate
        if created is not None:
            self.created = created
        if email is not None:
            self.email = email
        if external_id is not None:
            self.external_id = external_id
        if full_name is not None:
            self.full_name = full_name
        if gender is not None:
            self.gender = gender
        if hand is not None:
            self.hand = hand
        if id is not None:
            self.id = id
        if image_url is not None:
            self.image_url = image_url
        if is_valid_email is not None:
            self.is_valid_email = is_valid_email
        if is_valid_phone is not None:
            self.is_valid_phone = is_valid_phone
        if phone_number is not None:
            self.phone_number = phone_number
        if referral_code is not None:
            self.referral_code = referral_code
        if registered is not None:
            self.registered = registered
        if restricted is not None:
            self.restricted = restricted
        if role is not None:
            self.role = role
        if status is not None:
            self.status = status

    @property
    def birthdate(self):
        """Gets the birthdate of this UserLookupResponse.  # noqa: E501


        :return: The birthdate of this UserLookupResponse.  # noqa: E501
        :rtype: date
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate):
        """Sets the birthdate of this UserLookupResponse.


        :param birthdate: The birthdate of this UserLookupResponse.  # noqa: E501
        :type: date
        """

        self._birthdate = birthdate

    @property
    def created(self):
        """Gets the created of this UserLookupResponse.  # noqa: E501


        :return: The created of this UserLookupResponse.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this UserLookupResponse.


        :param created: The created of this UserLookupResponse.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def email(self):
        """Gets the email of this UserLookupResponse.  # noqa: E501


        :return: The email of this UserLookupResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserLookupResponse.


        :param email: The email of this UserLookupResponse.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def external_id(self):
        """Gets the external_id of this UserLookupResponse.  # noqa: E501


        :return: The external_id of this UserLookupResponse.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this UserLookupResponse.


        :param external_id: The external_id of this UserLookupResponse.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def full_name(self):
        """Gets the full_name of this UserLookupResponse.  # noqa: E501


        :return: The full_name of this UserLookupResponse.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this UserLookupResponse.


        :param full_name: The full_name of this UserLookupResponse.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def gender(self):
        """Gets the gender of this UserLookupResponse.  # noqa: E501


        :return: The gender of this UserLookupResponse.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this UserLookupResponse.


        :param gender: The gender of this UserLookupResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["FEMALE", "MALE"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def hand(self):
        """Gets the hand of this UserLookupResponse.  # noqa: E501


        :return: The hand of this UserLookupResponse.  # noqa: E501
        :rtype: str
        """
        return self._hand

    @hand.setter
    def hand(self, hand):
        """Sets the hand of this UserLookupResponse.


        :param hand: The hand of this UserLookupResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["BOTH", "LEFT", "NONE", "RIGHT"]  # noqa: E501
        if hand not in allowed_values:
            raise ValueError(
                "Invalid value for `hand` ({0}), must be one of {1}"  # noqa: E501
                .format(hand, allowed_values)
            )

        self._hand = hand

    @property
    def id(self):
        """Gets the id of this UserLookupResponse.  # noqa: E501


        :return: The id of this UserLookupResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserLookupResponse.


        :param id: The id of this UserLookupResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this UserLookupResponse.  # noqa: E501


        :return: The image_url of this UserLookupResponse.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this UserLookupResponse.


        :param image_url: The image_url of this UserLookupResponse.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def is_valid_email(self):
        """Gets the is_valid_email of this UserLookupResponse.  # noqa: E501


        :return: The is_valid_email of this UserLookupResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid_email

    @is_valid_email.setter
    def is_valid_email(self, is_valid_email):
        """Sets the is_valid_email of this UserLookupResponse.


        :param is_valid_email: The is_valid_email of this UserLookupResponse.  # noqa: E501
        :type: bool
        """

        self._is_valid_email = is_valid_email

    @property
    def is_valid_phone(self):
        """Gets the is_valid_phone of this UserLookupResponse.  # noqa: E501


        :return: The is_valid_phone of this UserLookupResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid_phone

    @is_valid_phone.setter
    def is_valid_phone(self, is_valid_phone):
        """Sets the is_valid_phone of this UserLookupResponse.


        :param is_valid_phone: The is_valid_phone of this UserLookupResponse.  # noqa: E501
        :type: bool
        """

        self._is_valid_phone = is_valid_phone

    @property
    def phone_number(self):
        """Gets the phone_number of this UserLookupResponse.  # noqa: E501


        :return: The phone_number of this UserLookupResponse.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UserLookupResponse.


        :param phone_number: The phone_number of this UserLookupResponse.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def referral_code(self):
        """Gets the referral_code of this UserLookupResponse.  # noqa: E501


        :return: The referral_code of this UserLookupResponse.  # noqa: E501
        :rtype: str
        """
        return self._referral_code

    @referral_code.setter
    def referral_code(self, referral_code):
        """Sets the referral_code of this UserLookupResponse.


        :param referral_code: The referral_code of this UserLookupResponse.  # noqa: E501
        :type: str
        """

        self._referral_code = referral_code

    @property
    def registered(self):
        """Gets the registered of this UserLookupResponse.  # noqa: E501


        :return: The registered of this UserLookupResponse.  # noqa: E501
        :rtype: bool
        """
        return self._registered

    @registered.setter
    def registered(self, registered):
        """Sets the registered of this UserLookupResponse.


        :param registered: The registered of this UserLookupResponse.  # noqa: E501
        :type: bool
        """

        self._registered = registered

    @property
    def restricted(self):
        """Gets the restricted of this UserLookupResponse.  # noqa: E501


        :return: The restricted of this UserLookupResponse.  # noqa: E501
        :rtype: bool
        """
        return self._restricted

    @restricted.setter
    def restricted(self, restricted):
        """Sets the restricted of this UserLookupResponse.


        :param restricted: The restricted of this UserLookupResponse.  # noqa: E501
        :type: bool
        """

        self._restricted = restricted

    @property
    def role(self):
        """Gets the role of this UserLookupResponse.  # noqa: E501


        :return: The role of this UserLookupResponse.  # noqa: E501
        :rtype: RoleResponse
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UserLookupResponse.


        :param role: The role of this UserLookupResponse.  # noqa: E501
        :type: RoleResponse
        """

        self._role = role

    @property
    def status(self):
        """Gets the status of this UserLookupResponse.  # noqa: E501


        :return: The status of this UserLookupResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UserLookupResponse.


        :param status: The status of this UserLookupResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserLookupResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserLookupResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

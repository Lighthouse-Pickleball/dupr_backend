# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from dupr_backend.models.bracket_response import BracketResponse
from dupr_backend.models.player_rating_response import PlayerRatingResponse
from typing import Optional, Set
from typing_extensions import Self

class PlayerPaymentResponse(BaseModel):
    """
    PlayerPaymentResponse
    """ # noqa: E501
    age: Optional[StrictInt] = None
    brackets: Optional[List[BracketResponse]] = None
    display_username: Optional[StrictBool] = Field(default=None, alias="displayUsername")
    distance: Optional[StrictStr] = None
    distance_in_miles: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="distanceInMiles")
    dupr_id: StrictStr = Field(alias="duprId")
    email: StrictStr
    enable_privacy: Optional[StrictBool] = Field(default=None, alias="enablePrivacy")
    event_fee: Union[StrictFloat, StrictInt] = Field(alias="eventFee")
    event_refunded_amount: Union[StrictFloat, StrictInt] = Field(alias="eventRefundedAmount")
    first_name: StrictStr = Field(alias="firstName")
    formatted_address: Optional[StrictStr] = Field(default=None, alias="formattedAddress")
    full_name: StrictStr = Field(alias="fullName")
    gender: Optional[StrictStr] = None
    hand: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    image_url: Optional[StrictStr] = Field(default=None, alias="imageUrl")
    invited: Optional[StrictBool] = None
    is_logged_in_user: Optional[StrictBool] = Field(default=None, alias="isLoggedInUser")
    is_player1: Optional[StrictBool] = Field(default=None, alias="isPlayer1")
    is_substitute: Optional[StrictBool] = Field(default=None, alias="isSubstitute")
    last_name: StrictStr = Field(alias="lastName")
    latitude: Optional[Union[StrictFloat, StrictInt]] = None
    longitude: Optional[Union[StrictFloat, StrictInt]] = None
    partner_status: Optional[StrictStr] = Field(default=None, alias="partnerStatus")
    phone: Optional[StrictStr] = None
    ratings: Optional[PlayerRatingResponse] = None
    registered: StrictBool
    registration_type: StrictStr = Field(alias="registrationType")
    short_address: Optional[StrictStr] = Field(default=None, alias="shortAddress")
    team_status: Optional[StrictStr] = Field(default=None, alias="teamStatus")
    username: Optional[StrictStr] = None
    verified_email: Optional[StrictBool] = Field(default=None, alias="verifiedEmail")
    __properties: ClassVar[List[str]] = ["age", "brackets", "displayUsername", "distance", "distanceInMiles", "duprId", "email", "enablePrivacy", "eventFee", "eventRefundedAmount", "firstName", "formattedAddress", "fullName", "gender", "hand", "id", "imageUrl", "invited", "isLoggedInUser", "isPlayer1", "isSubstitute", "lastName", "latitude", "longitude", "partnerStatus", "phone", "ratings", "registered", "registrationType", "shortAddress", "teamStatus", "username", "verifiedEmail"]

    @field_validator('gender')
    def gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FEMALE', 'MALE']):
            raise ValueError("must be one of enum values ('FEMALE', 'MALE')")
        return value

    @field_validator('hand')
    def hand_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BOTH', 'LEFT', 'NONE', 'RIGHT']):
            raise ValueError("must be one of enum values ('BOTH', 'LEFT', 'NONE', 'RIGHT')")
        return value

    @field_validator('partner_status')
    def partner_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING']):
            raise ValueError("must be one of enum values ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING')")
        return value

    @field_validator('registration_type')
    def registration_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['INVITATION', 'UNCLAIMED']):
            raise ValueError("must be one of enum values ('INVITATION', 'UNCLAIMED')")
        return value

    @field_validator('team_status')
    def team_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING']):
            raise ValueError("must be one of enum values ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlayerPaymentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in brackets (list)
        _items = []
        if self.brackets:
            for _item_brackets in self.brackets:
                if _item_brackets:
                    _items.append(_item_brackets.to_dict())
            _dict['brackets'] = _items
        # override the default output from pydantic by calling `to_dict()` of ratings
        if self.ratings:
            _dict['ratings'] = self.ratings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlayerPaymentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "age": obj.get("age"),
            "brackets": [BracketResponse.from_dict(_item) for _item in obj["brackets"]] if obj.get("brackets") is not None else None,
            "displayUsername": obj.get("displayUsername"),
            "distance": obj.get("distance"),
            "distanceInMiles": obj.get("distanceInMiles"),
            "duprId": obj.get("duprId"),
            "email": obj.get("email"),
            "enablePrivacy": obj.get("enablePrivacy"),
            "eventFee": obj.get("eventFee"),
            "eventRefundedAmount": obj.get("eventRefundedAmount"),
            "firstName": obj.get("firstName"),
            "formattedAddress": obj.get("formattedAddress"),
            "fullName": obj.get("fullName"),
            "gender": obj.get("gender"),
            "hand": obj.get("hand"),
            "id": obj.get("id"),
            "imageUrl": obj.get("imageUrl"),
            "invited": obj.get("invited"),
            "isLoggedInUser": obj.get("isLoggedInUser"),
            "isPlayer1": obj.get("isPlayer1"),
            "isSubstitute": obj.get("isSubstitute"),
            "lastName": obj.get("lastName"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "partnerStatus": obj.get("partnerStatus"),
            "phone": obj.get("phone"),
            "ratings": PlayerRatingResponse.from_dict(obj["ratings"]) if obj.get("ratings") is not None else None,
            "registered": obj.get("registered"),
            "registrationType": obj.get("registrationType"),
            "shortAddress": obj.get("shortAddress"),
            "teamStatus": obj.get("teamStatus"),
            "username": obj.get("username"),
            "verifiedEmail": obj.get("verifiedEmail")
        })
        return _obj



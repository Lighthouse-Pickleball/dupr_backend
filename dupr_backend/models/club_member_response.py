# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from dupr_backend.models.club_role import ClubRole
from typing import Optional, Set
from typing_extensions import Self

class ClubMemberResponse(BaseModel):
    """
    ClubMemberResponse
    """ # noqa: E501
    age: Optional[StrictInt] = None
    birthdate: Optional[StrictStr] = None
    club_id: StrictInt = Field(alias="clubId")
    created: Optional[StrictStr] = None
    default_rating: Optional[StrictStr] = Field(default=None, alias="defaultRating")
    display_username: Optional[StrictBool] = Field(default=None, alias="displayUsername")
    distance: Optional[StrictStr] = None
    distance_in_miles: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="distanceInMiles")
    doubles: Optional[StrictStr] = None
    doubles_provisional: Optional[StrictBool] = Field(default=None, alias="doublesProvisional")
    doubles_reliability: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="doublesReliability")
    doubles_verified: Optional[StrictStr] = Field(default=None, alias="doublesVerified")
    dupr_id: Optional[StrictStr] = Field(default=None, alias="duprId")
    email: Optional[StrictStr] = None
    enable_privacy: StrictBool = Field(alias="enablePrivacy")
    formatted_address: Optional[StrictStr] = Field(default=None, alias="formattedAddress")
    full_name: StrictStr = Field(alias="fullName")
    gender: Optional[StrictStr] = None
    hand: Optional[StrictStr] = None
    id: StrictInt
    image_url: Optional[StrictStr] = Field(default=None, alias="imageUrl")
    invitation_type: Optional[StrictStr] = Field(default=None, alias="invitationType")
    is_checked: Optional[StrictBool] = Field(default=None, alias="isChecked")
    iso_alpha2_code: Optional[StrictStr] = Field(default=None, alias="isoAlpha2Code")
    latitude: Optional[Union[StrictFloat, StrictInt]] = None
    location: Optional[StrictStr] = None
    longitude: Optional[Union[StrictFloat, StrictInt]] = None
    phone: Optional[StrictStr] = None
    provisional_doubles_rating: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="provisionalDoublesRating")
    provisional_singles_rating: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="provisionalSinglesRating")
    requested_by: Optional[StrictInt] = Field(default=None, alias="requestedBy")
    roles: List[ClubRole]
    short_address: Optional[StrictStr] = Field(default=None, alias="shortAddress")
    singles: Optional[StrictStr] = None
    singles_provisional: Optional[StrictBool] = Field(default=None, alias="singlesProvisional")
    singles_reliability: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="singlesReliability")
    singles_verified: Optional[StrictStr] = Field(default=None, alias="singlesVerified")
    status: Optional[StrictStr] = None
    username: Optional[StrictStr] = None
    verified_email: Optional[StrictBool] = Field(default=None, alias="verifiedEmail")
    verified_phone: Optional[StrictBool] = Field(default=None, alias="verifiedPhone")
    __properties: ClassVar[List[str]] = ["age", "birthdate", "clubId", "created", "defaultRating", "displayUsername", "distance", "distanceInMiles", "doubles", "doublesProvisional", "doublesReliability", "doublesVerified", "duprId", "email", "enablePrivacy", "formattedAddress", "fullName", "gender", "hand", "id", "imageUrl", "invitationType", "isChecked", "isoAlpha2Code", "latitude", "location", "longitude", "phone", "provisionalDoublesRating", "provisionalSinglesRating", "requestedBy", "roles", "shortAddress", "singles", "singlesProvisional", "singlesReliability", "singlesVerified", "status", "username", "verifiedEmail", "verifiedPhone"]

    @field_validator('default_rating')
    def default_rating_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DOUBLES', 'SINGLES']):
            raise ValueError("must be one of enum values ('DOUBLES', 'SINGLES')")
        return value

    @field_validator('gender')
    def gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FEMALE', 'MALE']):
            raise ValueError("must be one of enum values ('FEMALE', 'MALE')")
        return value

    @field_validator('hand')
    def hand_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BOTH', 'LEFT', 'NONE', 'RIGHT']):
            raise ValueError("must be one of enum values ('BOTH', 'LEFT', 'NONE', 'RIGHT')")
        return value

    @field_validator('invitation_type')
    def invitation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INVITATION', 'INVITATION_CSV', 'PARTNER_INVITE', 'REQUEST']):
            raise ValueError("must be one of enum values ('INVITATION', 'INVITATION_CSV', 'PARTNER_INVITE', 'REQUEST')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING']):
            raise ValueError("must be one of enum values ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClubMemberResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item_roles in self.roles:
                if _item_roles:
                    _items.append(_item_roles.to_dict())
            _dict['roles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClubMemberResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "age": obj.get("age"),
            "birthdate": obj.get("birthdate"),
            "clubId": obj.get("clubId"),
            "created": obj.get("created"),
            "defaultRating": obj.get("defaultRating"),
            "displayUsername": obj.get("displayUsername"),
            "distance": obj.get("distance"),
            "distanceInMiles": obj.get("distanceInMiles"),
            "doubles": obj.get("doubles"),
            "doublesProvisional": obj.get("doublesProvisional"),
            "doublesReliability": obj.get("doublesReliability"),
            "doublesVerified": obj.get("doublesVerified"),
            "duprId": obj.get("duprId"),
            "email": obj.get("email"),
            "enablePrivacy": obj.get("enablePrivacy"),
            "formattedAddress": obj.get("formattedAddress"),
            "fullName": obj.get("fullName"),
            "gender": obj.get("gender"),
            "hand": obj.get("hand"),
            "id": obj.get("id"),
            "imageUrl": obj.get("imageUrl"),
            "invitationType": obj.get("invitationType"),
            "isChecked": obj.get("isChecked"),
            "isoAlpha2Code": obj.get("isoAlpha2Code"),
            "latitude": obj.get("latitude"),
            "location": obj.get("location"),
            "longitude": obj.get("longitude"),
            "phone": obj.get("phone"),
            "provisionalDoublesRating": obj.get("provisionalDoublesRating"),
            "provisionalSinglesRating": obj.get("provisionalSinglesRating"),
            "requestedBy": obj.get("requestedBy"),
            "roles": [ClubRole.from_dict(_item) for _item in obj["roles"]] if obj.get("roles") is not None else None,
            "shortAddress": obj.get("shortAddress"),
            "singles": obj.get("singles"),
            "singlesProvisional": obj.get("singlesProvisional"),
            "singlesReliability": obj.get("singlesReliability"),
            "singlesVerified": obj.get("singlesVerified"),
            "status": obj.get("status"),
            "username": obj.get("username"),
            "verifiedEmail": obj.get("verifiedEmail"),
            "verifiedPhone": obj.get("verifiedPhone")
        })
        return _obj



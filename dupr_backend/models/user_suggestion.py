# coding: utf-8

"""
    DUPR Backend APIs

    Internal RESTful APIs to access DUPR ratings, users and provide matches.

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from dupr_backend.models.user_follow import UserFollow
from typing import Optional, Set
from typing_extensions import Self

class UserSuggestion(BaseModel):
    """
    UserSuggestion
    """ # noqa: E501
    user_id: StrictInt = Field(alias="userId")
    dupr_id: StrictStr = Field(alias="duprId")
    status: StrictStr
    name: StrictStr
    image_url: Optional[StrictStr] = Field(default=None, alias="imageUrl")
    address: Optional[StrictStr] = None
    brief_followers: Optional[List[UserFollow]] = Field(default=None, alias="briefFollowers")
    follower_count: Optional[StrictInt] = Field(default=None, alias="followerCount")
    __properties: ClassVar[List[str]] = ["userId", "duprId", "status", "name", "imageUrl", "address", "briefFollowers", "followerCount"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ACTIVE', 'INACTIVE', 'UPCOMING', 'IN_PROGRESS', 'COMPLETE', 'CANCELLED', 'NOT_CONFIRMED', 'INVITED', 'CONFIRMED', 'MATCH_BYE', 'PENDING', 'FORFEITED', 'DELETED', 'ONGOING', 'SUSPENDED_TOS_13']):
            raise ValueError("must be one of enum values ('ACTIVE', 'INACTIVE', 'UPCOMING', 'IN_PROGRESS', 'COMPLETE', 'CANCELLED', 'NOT_CONFIRMED', 'INVITED', 'CONFIRMED', 'MATCH_BYE', 'PENDING', 'FORFEITED', 'DELETED', 'ONGOING', 'SUSPENDED_TOS_13')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserSuggestion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in brief_followers (list)
        _items = []
        if self.brief_followers:
            for _item_brief_followers in self.brief_followers:
                if _item_brief_followers:
                    _items.append(_item_brief_followers.to_dict())
            _dict['briefFollowers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserSuggestion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "userId": obj.get("userId"),
            "duprId": obj.get("duprId"),
            "status": obj.get("status"),
            "name": obj.get("name"),
            "imageUrl": obj.get("imageUrl"),
            "address": obj.get("address"),
            "briefFollowers": [UserFollow.from_dict(_item) for _item in obj["briefFollowers"]] if obj.get("briefFollowers") is not None else None,
            "followerCount": obj.get("followerCount")
        })
        return _obj



# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator
from dupr_backend.models.user_follow import UserFollow

class UserSuggestion(BaseModel):
    """
    UserSuggestion
    """
    address: Optional[StrictStr] = None
    brief_followers: Optional[conlist(UserFollow)] = Field(None, alias="briefFollowers")
    dupr_id: StrictStr = Field(..., alias="duprId")
    follower_count: Optional[StrictInt] = Field(None, alias="followerCount")
    image_url: Optional[StrictStr] = Field(None, alias="imageUrl")
    name: StrictStr = Field(...)
    status: StrictStr = Field(...)
    user_id: StrictInt = Field(..., alias="userId")
    __properties = ["address", "briefFollowers", "duprId", "followerCount", "imageUrl", "name", "status", "userId"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING'):
            raise ValueError("must be one of enum values ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserSuggestion:
        """Create an instance of UserSuggestion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in brief_followers (list)
        _items = []
        if self.brief_followers:
            for _item in self.brief_followers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['briefFollowers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserSuggestion:
        """Create an instance of UserSuggestion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserSuggestion.parse_obj(obj)

        _obj = UserSuggestion.parse_obj({
            "address": obj.get("address"),
            "brief_followers": [UserFollow.from_dict(_item) for _item in obj.get("briefFollowers")] if obj.get("briefFollowers") is not None else None,
            "dupr_id": obj.get("duprId"),
            "follower_count": obj.get("followerCount"),
            "image_url": obj.get("imageUrl"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "user_id": obj.get("userId")
        })
        return _obj



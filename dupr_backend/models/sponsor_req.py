# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class SponsorReq(BaseModel):
    """
    SponsorReq
    """
    button_text: Optional[StrictStr] = Field(None, alias="buttonText")
    description: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    image_url: Optional[StrictStr] = Field(None, alias="imageURL")
    sponsor_popup_heading: Optional[StrictStr] = Field(None, alias="sponsorPopupHeading")
    sponsor_redirect_url: Optional[StrictStr] = Field(None, alias="sponsorRedirectUrl")
    __properties = ["buttonText", "description", "id", "imageURL", "sponsorPopupHeading", "sponsorRedirectUrl"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SponsorReq:
        """Create an instance of SponsorReq from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SponsorReq:
        """Create an instance of SponsorReq from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SponsorReq.parse_obj(obj)

        _obj = SponsorReq.parse_obj({
            "button_text": obj.get("buttonText"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "image_url": obj.get("imageURL"),
            "sponsor_popup_heading": obj.get("sponsorPopupHeading"),
            "sponsor_redirect_url": obj.get("sponsorRedirectUrl")
        })
        return _obj



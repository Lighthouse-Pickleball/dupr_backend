# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class OpenPlayMember(BaseModel):
    """
    OpenPlayMember
    """
    create_at: Optional[StrictStr] = Field(None, alias="createAt")
    doubles: Optional[StrictStr] = None
    dupr_id: Optional[StrictStr] = Field(None, alias="duprId")
    event_id: StrictInt = Field(..., alias="eventId")
    id: StrictInt = Field(...)
    name: Optional[StrictStr] = None
    singles: Optional[StrictStr] = None
    __properties = ["createAt", "doubles", "duprId", "eventId", "id", "name", "singles"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OpenPlayMember:
        """Create an instance of OpenPlayMember from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OpenPlayMember:
        """Create an instance of OpenPlayMember from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OpenPlayMember.parse_obj(obj)

        _obj = OpenPlayMember.parse_obj({
            "create_at": obj.get("createAt"),
            "doubles": obj.get("doubles"),
            "dupr_id": obj.get("duprId"),
            "event_id": obj.get("eventId"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "singles": obj.get("singles")
        })
        return _obj



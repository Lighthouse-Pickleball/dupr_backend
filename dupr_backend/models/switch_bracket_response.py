# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SwitchBracketResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'failed_reason': 'str',
        'is_source_re_seeded': 'bool',
        'is_success': 'bool',
        'is_target_re_seeded': 'bool',
        'registration_id': 'int',
        'user_id': 'int'
    }

    attribute_map = {
        'failed_reason': 'failedReason',
        'is_source_re_seeded': 'isSourceReSeeded',
        'is_success': 'isSuccess',
        'is_target_re_seeded': 'isTargetReSeeded',
        'registration_id': 'registrationId',
        'user_id': 'userId'
    }

    def __init__(self, failed_reason=None, is_source_re_seeded=None, is_success=None, is_target_re_seeded=None, registration_id=None, user_id=None):  # noqa: E501
        """SwitchBracketResponse - a model defined in Swagger"""  # noqa: E501
        self._failed_reason = None
        self._is_source_re_seeded = None
        self._is_success = None
        self._is_target_re_seeded = None
        self._registration_id = None
        self._user_id = None
        self.discriminator = None
        if failed_reason is not None:
            self.failed_reason = failed_reason
        if is_source_re_seeded is not None:
            self.is_source_re_seeded = is_source_re_seeded
        if is_success is not None:
            self.is_success = is_success
        if is_target_re_seeded is not None:
            self.is_target_re_seeded = is_target_re_seeded
        if registration_id is not None:
            self.registration_id = registration_id
        if user_id is not None:
            self.user_id = user_id

    @property
    def failed_reason(self):
        """Gets the failed_reason of this SwitchBracketResponse.  # noqa: E501


        :return: The failed_reason of this SwitchBracketResponse.  # noqa: E501
        :rtype: str
        """
        return self._failed_reason

    @failed_reason.setter
    def failed_reason(self, failed_reason):
        """Sets the failed_reason of this SwitchBracketResponse.


        :param failed_reason: The failed_reason of this SwitchBracketResponse.  # noqa: E501
        :type: str
        """

        self._failed_reason = failed_reason

    @property
    def is_source_re_seeded(self):
        """Gets the is_source_re_seeded of this SwitchBracketResponse.  # noqa: E501


        :return: The is_source_re_seeded of this SwitchBracketResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_source_re_seeded

    @is_source_re_seeded.setter
    def is_source_re_seeded(self, is_source_re_seeded):
        """Sets the is_source_re_seeded of this SwitchBracketResponse.


        :param is_source_re_seeded: The is_source_re_seeded of this SwitchBracketResponse.  # noqa: E501
        :type: bool
        """

        self._is_source_re_seeded = is_source_re_seeded

    @property
    def is_success(self):
        """Gets the is_success of this SwitchBracketResponse.  # noqa: E501


        :return: The is_success of this SwitchBracketResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_success

    @is_success.setter
    def is_success(self, is_success):
        """Sets the is_success of this SwitchBracketResponse.


        :param is_success: The is_success of this SwitchBracketResponse.  # noqa: E501
        :type: bool
        """

        self._is_success = is_success

    @property
    def is_target_re_seeded(self):
        """Gets the is_target_re_seeded of this SwitchBracketResponse.  # noqa: E501


        :return: The is_target_re_seeded of this SwitchBracketResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_target_re_seeded

    @is_target_re_seeded.setter
    def is_target_re_seeded(self, is_target_re_seeded):
        """Sets the is_target_re_seeded of this SwitchBracketResponse.


        :param is_target_re_seeded: The is_target_re_seeded of this SwitchBracketResponse.  # noqa: E501
        :type: bool
        """

        self._is_target_re_seeded = is_target_re_seeded

    @property
    def registration_id(self):
        """Gets the registration_id of this SwitchBracketResponse.  # noqa: E501


        :return: The registration_id of this SwitchBracketResponse.  # noqa: E501
        :rtype: int
        """
        return self._registration_id

    @registration_id.setter
    def registration_id(self, registration_id):
        """Sets the registration_id of this SwitchBracketResponse.


        :param registration_id: The registration_id of this SwitchBracketResponse.  # noqa: E501
        :type: int
        """

        self._registration_id = registration_id

    @property
    def user_id(self):
        """Gets the user_id of this SwitchBracketResponse.  # noqa: E501


        :return: The user_id of this SwitchBracketResponse.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SwitchBracketResponse.


        :param user_id: The user_id of this SwitchBracketResponse.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SwitchBracketResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SwitchBracketResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

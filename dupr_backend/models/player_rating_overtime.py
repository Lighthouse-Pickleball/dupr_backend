# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator
from dupr_backend.models.history import History

class PlayerRatingOvertime(BaseModel):
    """
    PlayerRatingOvertime
    """
    player_id: StrictInt = Field(..., alias="playerId")
    rating_history: conlist(History) = Field(..., alias="ratingHistory")
    type: StrictStr = Field(...)
    __properties = ["playerId", "ratingHistory", "type"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('DOUBLES', 'SINGLES'):
            raise ValueError("must be one of enum values ('DOUBLES', 'SINGLES')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlayerRatingOvertime:
        """Create an instance of PlayerRatingOvertime from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in rating_history (list)
        _items = []
        if self.rating_history:
            for _item in self.rating_history:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ratingHistory'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlayerRatingOvertime:
        """Create an instance of PlayerRatingOvertime from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlayerRatingOvertime.parse_obj(obj)

        _obj = PlayerRatingOvertime.parse_obj({
            "player_id": obj.get("playerId"),
            "rating_history": [History.from_dict(_item) for _item in obj.get("ratingHistory")] if obj.get("ratingHistory") is not None else None,
            "type": obj.get("type")
        })
        return _obj



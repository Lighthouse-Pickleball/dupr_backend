# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlayerSignUpRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_id': 'int',
        'ambassador_code': 'str',
        'birthdate': 'date',
        'client_key': 'str',
        'default_rating': 'str',
        'doubles_rating': 'float',
        'email': 'str',
        'enable_newsletter': 'bool',
        'first_name': 'str',
        'full_name': 'str',
        'gender': 'str',
        'hand': 'str',
        'identifier': 'str',
        'iso_code': 'str',
        'last_name': 'str',
        'media_id': 'int',
        'password': 'str',
        'phone': 'str',
        'singles_rating': 'float',
        'user_id': 'int',
        'username': 'str'
    }

    attribute_map = {
        'address_id': 'addressId',
        'ambassador_code': 'ambassadorCode',
        'birthdate': 'birthdate',
        'client_key': 'clientKey',
        'default_rating': 'defaultRating',
        'doubles_rating': 'doublesRating',
        'email': 'email',
        'enable_newsletter': 'enableNewsletter',
        'first_name': 'firstName',
        'full_name': 'fullName',
        'gender': 'gender',
        'hand': 'hand',
        'identifier': 'identifier',
        'iso_code': 'isoCode',
        'last_name': 'lastName',
        'media_id': 'mediaId',
        'password': 'password',
        'phone': 'phone',
        'singles_rating': 'singlesRating',
        'user_id': 'userId',
        'username': 'username'
    }

    def __init__(self, address_id=None, ambassador_code=None, birthdate=None, client_key=None, default_rating=None, doubles_rating=None, email=None, enable_newsletter=None, first_name=None, full_name=None, gender=None, hand=None, identifier=None, iso_code=None, last_name=None, media_id=None, password=None, phone=None, singles_rating=None, user_id=None, username=None):  # noqa: E501
        """PlayerSignUpRequest - a model defined in Swagger"""  # noqa: E501
        self._address_id = None
        self._ambassador_code = None
        self._birthdate = None
        self._client_key = None
        self._default_rating = None
        self._doubles_rating = None
        self._email = None
        self._enable_newsletter = None
        self._first_name = None
        self._full_name = None
        self._gender = None
        self._hand = None
        self._identifier = None
        self._iso_code = None
        self._last_name = None
        self._media_id = None
        self._password = None
        self._phone = None
        self._singles_rating = None
        self._user_id = None
        self._username = None
        self.discriminator = None
        self.address_id = address_id
        if ambassador_code is not None:
            self.ambassador_code = ambassador_code
        self.birthdate = birthdate
        if client_key is not None:
            self.client_key = client_key
        if default_rating is not None:
            self.default_rating = default_rating
        if doubles_rating is not None:
            self.doubles_rating = doubles_rating
        self.email = email
        self.enable_newsletter = enable_newsletter
        self.first_name = first_name
        self.full_name = full_name
        self.gender = gender
        self.hand = hand
        if identifier is not None:
            self.identifier = identifier
        if iso_code is not None:
            self.iso_code = iso_code
        self.last_name = last_name
        if media_id is not None:
            self.media_id = media_id
        self.password = password
        if phone is not None:
            self.phone = phone
        if singles_rating is not None:
            self.singles_rating = singles_rating
        if user_id is not None:
            self.user_id = user_id
        if username is not None:
            self.username = username

    @property
    def address_id(self):
        """Gets the address_id of this PlayerSignUpRequest.  # noqa: E501


        :return: The address_id of this PlayerSignUpRequest.  # noqa: E501
        :rtype: int
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """Sets the address_id of this PlayerSignUpRequest.


        :param address_id: The address_id of this PlayerSignUpRequest.  # noqa: E501
        :type: int
        """
        if address_id is None:
            raise ValueError("Invalid value for `address_id`, must not be `None`")  # noqa: E501

        self._address_id = address_id

    @property
    def ambassador_code(self):
        """Gets the ambassador_code of this PlayerSignUpRequest.  # noqa: E501


        :return: The ambassador_code of this PlayerSignUpRequest.  # noqa: E501
        :rtype: str
        """
        return self._ambassador_code

    @ambassador_code.setter
    def ambassador_code(self, ambassador_code):
        """Sets the ambassador_code of this PlayerSignUpRequest.


        :param ambassador_code: The ambassador_code of this PlayerSignUpRequest.  # noqa: E501
        :type: str
        """

        self._ambassador_code = ambassador_code

    @property
    def birthdate(self):
        """Gets the birthdate of this PlayerSignUpRequest.  # noqa: E501


        :return: The birthdate of this PlayerSignUpRequest.  # noqa: E501
        :rtype: date
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate):
        """Sets the birthdate of this PlayerSignUpRequest.


        :param birthdate: The birthdate of this PlayerSignUpRequest.  # noqa: E501
        :type: date
        """
        if birthdate is None:
            raise ValueError("Invalid value for `birthdate`, must not be `None`")  # noqa: E501

        self._birthdate = birthdate

    @property
    def client_key(self):
        """Gets the client_key of this PlayerSignUpRequest.  # noqa: E501


        :return: The client_key of this PlayerSignUpRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_key

    @client_key.setter
    def client_key(self, client_key):
        """Sets the client_key of this PlayerSignUpRequest.


        :param client_key: The client_key of this PlayerSignUpRequest.  # noqa: E501
        :type: str
        """

        self._client_key = client_key

    @property
    def default_rating(self):
        """Gets the default_rating of this PlayerSignUpRequest.  # noqa: E501


        :return: The default_rating of this PlayerSignUpRequest.  # noqa: E501
        :rtype: str
        """
        return self._default_rating

    @default_rating.setter
    def default_rating(self, default_rating):
        """Sets the default_rating of this PlayerSignUpRequest.


        :param default_rating: The default_rating of this PlayerSignUpRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["DOUBLES", "SINGLES"]  # noqa: E501
        if default_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `default_rating` ({0}), must be one of {1}"  # noqa: E501
                .format(default_rating, allowed_values)
            )

        self._default_rating = default_rating

    @property
    def doubles_rating(self):
        """Gets the doubles_rating of this PlayerSignUpRequest.  # noqa: E501


        :return: The doubles_rating of this PlayerSignUpRequest.  # noqa: E501
        :rtype: float
        """
        return self._doubles_rating

    @doubles_rating.setter
    def doubles_rating(self, doubles_rating):
        """Sets the doubles_rating of this PlayerSignUpRequest.


        :param doubles_rating: The doubles_rating of this PlayerSignUpRequest.  # noqa: E501
        :type: float
        """

        self._doubles_rating = doubles_rating

    @property
    def email(self):
        """Gets the email of this PlayerSignUpRequest.  # noqa: E501


        :return: The email of this PlayerSignUpRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PlayerSignUpRequest.


        :param email: The email of this PlayerSignUpRequest.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def enable_newsletter(self):
        """Gets the enable_newsletter of this PlayerSignUpRequest.  # noqa: E501


        :return: The enable_newsletter of this PlayerSignUpRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable_newsletter

    @enable_newsletter.setter
    def enable_newsletter(self, enable_newsletter):
        """Sets the enable_newsletter of this PlayerSignUpRequest.


        :param enable_newsletter: The enable_newsletter of this PlayerSignUpRequest.  # noqa: E501
        :type: bool
        """
        if enable_newsletter is None:
            raise ValueError("Invalid value for `enable_newsletter`, must not be `None`")  # noqa: E501

        self._enable_newsletter = enable_newsletter

    @property
    def first_name(self):
        """Gets the first_name of this PlayerSignUpRequest.  # noqa: E501


        :return: The first_name of this PlayerSignUpRequest.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this PlayerSignUpRequest.


        :param first_name: The first_name of this PlayerSignUpRequest.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def full_name(self):
        """Gets the full_name of this PlayerSignUpRequest.  # noqa: E501


        :return: The full_name of this PlayerSignUpRequest.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this PlayerSignUpRequest.


        :param full_name: The full_name of this PlayerSignUpRequest.  # noqa: E501
        :type: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")  # noqa: E501

        self._full_name = full_name

    @property
    def gender(self):
        """Gets the gender of this PlayerSignUpRequest.  # noqa: E501


        :return: The gender of this PlayerSignUpRequest.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this PlayerSignUpRequest.


        :param gender: The gender of this PlayerSignUpRequest.  # noqa: E501
        :type: str
        """
        if gender is None:
            raise ValueError("Invalid value for `gender`, must not be `None`")  # noqa: E501
        allowed_values = ["FEMALE", "MALE"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def hand(self):
        """Gets the hand of this PlayerSignUpRequest.  # noqa: E501


        :return: The hand of this PlayerSignUpRequest.  # noqa: E501
        :rtype: str
        """
        return self._hand

    @hand.setter
    def hand(self, hand):
        """Sets the hand of this PlayerSignUpRequest.


        :param hand: The hand of this PlayerSignUpRequest.  # noqa: E501
        :type: str
        """
        if hand is None:
            raise ValueError("Invalid value for `hand`, must not be `None`")  # noqa: E501
        allowed_values = ["BOTH", "LEFT", "NONE", "RIGHT"]  # noqa: E501
        if hand not in allowed_values:
            raise ValueError(
                "Invalid value for `hand` ({0}), must be one of {1}"  # noqa: E501
                .format(hand, allowed_values)
            )

        self._hand = hand

    @property
    def identifier(self):
        """Gets the identifier of this PlayerSignUpRequest.  # noqa: E501

        An unique identifier of this user from your platform  # noqa: E501

        :return: The identifier of this PlayerSignUpRequest.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PlayerSignUpRequest.

        An unique identifier of this user from your platform  # noqa: E501

        :param identifier: The identifier of this PlayerSignUpRequest.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def iso_code(self):
        """Gets the iso_code of this PlayerSignUpRequest.  # noqa: E501


        :return: The iso_code of this PlayerSignUpRequest.  # noqa: E501
        :rtype: str
        """
        return self._iso_code

    @iso_code.setter
    def iso_code(self, iso_code):
        """Sets the iso_code of this PlayerSignUpRequest.


        :param iso_code: The iso_code of this PlayerSignUpRequest.  # noqa: E501
        :type: str
        """

        self._iso_code = iso_code

    @property
    def last_name(self):
        """Gets the last_name of this PlayerSignUpRequest.  # noqa: E501


        :return: The last_name of this PlayerSignUpRequest.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this PlayerSignUpRequest.


        :param last_name: The last_name of this PlayerSignUpRequest.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def media_id(self):
        """Gets the media_id of this PlayerSignUpRequest.  # noqa: E501


        :return: The media_id of this PlayerSignUpRequest.  # noqa: E501
        :rtype: int
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id):
        """Sets the media_id of this PlayerSignUpRequest.


        :param media_id: The media_id of this PlayerSignUpRequest.  # noqa: E501
        :type: int
        """

        self._media_id = media_id

    @property
    def password(self):
        """Gets the password of this PlayerSignUpRequest.  # noqa: E501


        :return: The password of this PlayerSignUpRequest.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PlayerSignUpRequest.


        :param password: The password of this PlayerSignUpRequest.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def phone(self):
        """Gets the phone of this PlayerSignUpRequest.  # noqa: E501


        :return: The phone of this PlayerSignUpRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this PlayerSignUpRequest.


        :param phone: The phone of this PlayerSignUpRequest.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def singles_rating(self):
        """Gets the singles_rating of this PlayerSignUpRequest.  # noqa: E501


        :return: The singles_rating of this PlayerSignUpRequest.  # noqa: E501
        :rtype: float
        """
        return self._singles_rating

    @singles_rating.setter
    def singles_rating(self, singles_rating):
        """Sets the singles_rating of this PlayerSignUpRequest.


        :param singles_rating: The singles_rating of this PlayerSignUpRequest.  # noqa: E501
        :type: float
        """

        self._singles_rating = singles_rating

    @property
    def user_id(self):
        """Gets the user_id of this PlayerSignUpRequest.  # noqa: E501


        :return: The user_id of this PlayerSignUpRequest.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PlayerSignUpRequest.


        :param user_id: The user_id of this PlayerSignUpRequest.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this PlayerSignUpRequest.  # noqa: E501


        :return: The username of this PlayerSignUpRequest.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PlayerSignUpRequest.


        :param username: The username of this PlayerSignUpRequest.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlayerSignUpRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlayerSignUpRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

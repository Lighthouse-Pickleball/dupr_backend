# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, confloat, conint, validator

class PlayerSignUpRequest(BaseModel):
    """
    PlayerSignUpRequest
    """
    address_id: StrictInt = Field(..., alias="addressId")
    ambassador_code: Optional[StrictStr] = Field(None, alias="ambassadorCode")
    birthdate: date = Field(...)
    client_key: Optional[StrictStr] = Field(None, alias="clientKey")
    default_rating: Optional[StrictStr] = Field(None, alias="defaultRating")
    doubles_rating: Optional[Union[confloat(le=8, ge=0.1, strict=True), conint(le=8, ge=1, strict=True)]] = Field(None, alias="doublesRating")
    email: StrictStr = Field(...)
    enable_newsletter: StrictBool = Field(..., alias="enableNewsletter")
    first_name: StrictStr = Field(..., alias="firstName")
    full_name: StrictStr = Field(..., alias="fullName")
    gender: StrictStr = Field(...)
    hand: StrictStr = Field(...)
    identifier: Optional[StrictStr] = Field(None, description="An unique identifier of this user from your platform")
    iso_code: Optional[StrictStr] = Field(None, alias="isoCode")
    last_name: StrictStr = Field(..., alias="lastName")
    media_id: Optional[StrictInt] = Field(None, alias="mediaId")
    password: StrictStr = Field(...)
    phone: Optional[StrictStr] = None
    singles_rating: Optional[Union[confloat(le=8, ge=0.1, strict=True), conint(le=8, ge=1, strict=True)]] = Field(None, alias="singlesRating")
    user_id: Optional[StrictInt] = Field(None, alias="userId")
    username: Optional[StrictStr] = None
    __properties = ["addressId", "ambassadorCode", "birthdate", "clientKey", "defaultRating", "doublesRating", "email", "enableNewsletter", "firstName", "fullName", "gender", "hand", "identifier", "isoCode", "lastName", "mediaId", "password", "phone", "singlesRating", "userId", "username"]

    @validator('default_rating')
    def default_rating_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('DOUBLES', 'SINGLES'):
            raise ValueError("must be one of enum values ('DOUBLES', 'SINGLES')")
        return value

    @validator('gender')
    def gender_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('FEMALE', 'MALE'):
            raise ValueError("must be one of enum values ('FEMALE', 'MALE')")
        return value

    @validator('hand')
    def hand_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('BOTH', 'LEFT', 'NONE', 'RIGHT'):
            raise ValueError("must be one of enum values ('BOTH', 'LEFT', 'NONE', 'RIGHT')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlayerSignUpRequest:
        """Create an instance of PlayerSignUpRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlayerSignUpRequest:
        """Create an instance of PlayerSignUpRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlayerSignUpRequest.parse_obj(obj)

        _obj = PlayerSignUpRequest.parse_obj({
            "address_id": obj.get("addressId"),
            "ambassador_code": obj.get("ambassadorCode"),
            "birthdate": obj.get("birthdate"),
            "client_key": obj.get("clientKey"),
            "default_rating": obj.get("defaultRating"),
            "doubles_rating": obj.get("doublesRating"),
            "email": obj.get("email"),
            "enable_newsletter": obj.get("enableNewsletter"),
            "first_name": obj.get("firstName"),
            "full_name": obj.get("fullName"),
            "gender": obj.get("gender"),
            "hand": obj.get("hand"),
            "identifier": obj.get("identifier"),
            "iso_code": obj.get("isoCode"),
            "last_name": obj.get("lastName"),
            "media_id": obj.get("mediaId"),
            "password": obj.get("password"),
            "phone": obj.get("phone"),
            "singles_rating": obj.get("singlesRating"),
            "user_id": obj.get("userId"),
            "username": obj.get("username")
        })
        return _obj



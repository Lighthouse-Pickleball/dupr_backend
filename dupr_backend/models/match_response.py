# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MatchResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bracket_id': 'int',
        'client_id': 'int',
        'club_id': 'int',
        'confirmed': 'bool',
        'created': 'str',
        'creator': 'BasicUserInfo',
        'display_identity': 'str',
        'elo_calculated': 'bool',
        'event_date': 'str',
        'event_format': 'str',
        'event_name': 'str',
        'id': 'int',
        'initialization': 'bool',
        'league': 'str',
        'league_id': 'int',
        'league_match_id': 'int',
        'location': 'str',
        'match_id': 'int',
        'match_score_added': 'bool',
        'match_source': 'str',
        'match_type': 'str',
        'modified': 'str',
        'no_of_games': 'int',
        'score_format': 'ScoreFormatResponse',
        'status': 'str',
        'teams': 'list[TeamResponse]',
        'tournament': 'str',
        'user_id': 'int',
        'validator': 'BasicUserInfo',
        'venue': 'str'
    }

    attribute_map = {
        'bracket_id': 'bracketId',
        'client_id': 'clientId',
        'club_id': 'clubId',
        'confirmed': 'confirmed',
        'created': 'created',
        'creator': 'creator',
        'display_identity': 'displayIdentity',
        'elo_calculated': 'eloCalculated',
        'event_date': 'eventDate',
        'event_format': 'eventFormat',
        'event_name': 'eventName',
        'id': 'id',
        'initialization': 'initialization',
        'league': 'league',
        'league_id': 'leagueId',
        'league_match_id': 'leagueMatchId',
        'location': 'location',
        'match_id': 'matchId',
        'match_score_added': 'matchScoreAdded',
        'match_source': 'matchSource',
        'match_type': 'matchType',
        'modified': 'modified',
        'no_of_games': 'noOfGames',
        'score_format': 'scoreFormat',
        'status': 'status',
        'teams': 'teams',
        'tournament': 'tournament',
        'user_id': 'userId',
        'validator': 'validator',
        'venue': 'venue'
    }

    def __init__(self, bracket_id=None, client_id=None, club_id=None, confirmed=None, created=None, creator=None, display_identity=None, elo_calculated=None, event_date=None, event_format=None, event_name=None, id=None, initialization=None, league=None, league_id=None, league_match_id=None, location=None, match_id=None, match_score_added=None, match_source=None, match_type=None, modified=None, no_of_games=None, score_format=None, status=None, teams=None, tournament=None, user_id=None, validator=None, venue=None):  # noqa: E501
        """MatchResponse - a model defined in Swagger"""  # noqa: E501
        self._bracket_id = None
        self._client_id = None
        self._club_id = None
        self._confirmed = None
        self._created = None
        self._creator = None
        self._display_identity = None
        self._elo_calculated = None
        self._event_date = None
        self._event_format = None
        self._event_name = None
        self._id = None
        self._initialization = None
        self._league = None
        self._league_id = None
        self._league_match_id = None
        self._location = None
        self._match_id = None
        self._match_score_added = None
        self._match_source = None
        self._match_type = None
        self._modified = None
        self._no_of_games = None
        self._score_format = None
        self._status = None
        self._teams = None
        self._tournament = None
        self._user_id = None
        self._validator = None
        self._venue = None
        self.discriminator = None
        if bracket_id is not None:
            self.bracket_id = bracket_id
        if client_id is not None:
            self.client_id = client_id
        if club_id is not None:
            self.club_id = club_id
        self.confirmed = confirmed
        if created is not None:
            self.created = created
        if creator is not None:
            self.creator = creator
        self.display_identity = display_identity
        if elo_calculated is not None:
            self.elo_calculated = elo_calculated
        self.event_date = event_date
        self.event_format = event_format
        if event_name is not None:
            self.event_name = event_name
        if id is not None:
            self.id = id
        if initialization is not None:
            self.initialization = initialization
        if league is not None:
            self.league = league
        if league_id is not None:
            self.league_id = league_id
        if league_match_id is not None:
            self.league_match_id = league_match_id
        self.location = location
        if match_id is not None:
            self.match_id = match_id
        self.match_score_added = match_score_added
        if match_source is not None:
            self.match_source = match_source
        if match_type is not None:
            self.match_type = match_type
        if modified is not None:
            self.modified = modified
        if no_of_games is not None:
            self.no_of_games = no_of_games
        if score_format is not None:
            self.score_format = score_format
        if status is not None:
            self.status = status
        self.teams = teams
        self.tournament = tournament
        self.user_id = user_id
        if validator is not None:
            self.validator = validator
        self.venue = venue

    @property
    def bracket_id(self):
        """Gets the bracket_id of this MatchResponse.  # noqa: E501


        :return: The bracket_id of this MatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._bracket_id

    @bracket_id.setter
    def bracket_id(self, bracket_id):
        """Sets the bracket_id of this MatchResponse.


        :param bracket_id: The bracket_id of this MatchResponse.  # noqa: E501
        :type: int
        """

        self._bracket_id = bracket_id

    @property
    def client_id(self):
        """Gets the client_id of this MatchResponse.  # noqa: E501


        :return: The client_id of this MatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this MatchResponse.


        :param client_id: The client_id of this MatchResponse.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def club_id(self):
        """Gets the club_id of this MatchResponse.  # noqa: E501


        :return: The club_id of this MatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._club_id

    @club_id.setter
    def club_id(self, club_id):
        """Sets the club_id of this MatchResponse.


        :param club_id: The club_id of this MatchResponse.  # noqa: E501
        :type: int
        """

        self._club_id = club_id

    @property
    def confirmed(self):
        """Gets the confirmed of this MatchResponse.  # noqa: E501


        :return: The confirmed of this MatchResponse.  # noqa: E501
        :rtype: bool
        """
        return self._confirmed

    @confirmed.setter
    def confirmed(self, confirmed):
        """Sets the confirmed of this MatchResponse.


        :param confirmed: The confirmed of this MatchResponse.  # noqa: E501
        :type: bool
        """
        if confirmed is None:
            raise ValueError("Invalid value for `confirmed`, must not be `None`")  # noqa: E501

        self._confirmed = confirmed

    @property
    def created(self):
        """Gets the created of this MatchResponse.  # noqa: E501


        :return: The created of this MatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this MatchResponse.


        :param created: The created of this MatchResponse.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def creator(self):
        """Gets the creator of this MatchResponse.  # noqa: E501


        :return: The creator of this MatchResponse.  # noqa: E501
        :rtype: BasicUserInfo
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this MatchResponse.


        :param creator: The creator of this MatchResponse.  # noqa: E501
        :type: BasicUserInfo
        """

        self._creator = creator

    @property
    def display_identity(self):
        """Gets the display_identity of this MatchResponse.  # noqa: E501


        :return: The display_identity of this MatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._display_identity

    @display_identity.setter
    def display_identity(self, display_identity):
        """Sets the display_identity of this MatchResponse.


        :param display_identity: The display_identity of this MatchResponse.  # noqa: E501
        :type: str
        """
        if display_identity is None:
            raise ValueError("Invalid value for `display_identity`, must not be `None`")  # noqa: E501

        self._display_identity = display_identity

    @property
    def elo_calculated(self):
        """Gets the elo_calculated of this MatchResponse.  # noqa: E501


        :return: The elo_calculated of this MatchResponse.  # noqa: E501
        :rtype: bool
        """
        return self._elo_calculated

    @elo_calculated.setter
    def elo_calculated(self, elo_calculated):
        """Sets the elo_calculated of this MatchResponse.


        :param elo_calculated: The elo_calculated of this MatchResponse.  # noqa: E501
        :type: bool
        """

        self._elo_calculated = elo_calculated

    @property
    def event_date(self):
        """Gets the event_date of this MatchResponse.  # noqa: E501


        :return: The event_date of this MatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this MatchResponse.


        :param event_date: The event_date of this MatchResponse.  # noqa: E501
        :type: str
        """
        if event_date is None:
            raise ValueError("Invalid value for `event_date`, must not be `None`")  # noqa: E501

        self._event_date = event_date

    @property
    def event_format(self):
        """Gets the event_format of this MatchResponse.  # noqa: E501


        :return: The event_format of this MatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._event_format

    @event_format.setter
    def event_format(self, event_format):
        """Sets the event_format of this MatchResponse.


        :param event_format: The event_format of this MatchResponse.  # noqa: E501
        :type: str
        """
        if event_format is None:
            raise ValueError("Invalid value for `event_format`, must not be `None`")  # noqa: E501
        allowed_values = ["DOUBLES", "SINGLES"]  # noqa: E501
        if event_format not in allowed_values:
            raise ValueError(
                "Invalid value for `event_format` ({0}), must be one of {1}"  # noqa: E501
                .format(event_format, allowed_values)
            )

        self._event_format = event_format

    @property
    def event_name(self):
        """Gets the event_name of this MatchResponse.  # noqa: E501


        :return: The event_name of this MatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this MatchResponse.


        :param event_name: The event_name of this MatchResponse.  # noqa: E501
        :type: str
        """

        self._event_name = event_name

    @property
    def id(self):
        """Gets the id of this MatchResponse.  # noqa: E501


        :return: The id of this MatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MatchResponse.


        :param id: The id of this MatchResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def initialization(self):
        """Gets the initialization of this MatchResponse.  # noqa: E501


        :return: The initialization of this MatchResponse.  # noqa: E501
        :rtype: bool
        """
        return self._initialization

    @initialization.setter
    def initialization(self, initialization):
        """Sets the initialization of this MatchResponse.


        :param initialization: The initialization of this MatchResponse.  # noqa: E501
        :type: bool
        """

        self._initialization = initialization

    @property
    def league(self):
        """Gets the league of this MatchResponse.  # noqa: E501


        :return: The league of this MatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._league

    @league.setter
    def league(self, league):
        """Sets the league of this MatchResponse.


        :param league: The league of this MatchResponse.  # noqa: E501
        :type: str
        """

        self._league = league

    @property
    def league_id(self):
        """Gets the league_id of this MatchResponse.  # noqa: E501


        :return: The league_id of this MatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._league_id

    @league_id.setter
    def league_id(self, league_id):
        """Sets the league_id of this MatchResponse.


        :param league_id: The league_id of this MatchResponse.  # noqa: E501
        :type: int
        """

        self._league_id = league_id

    @property
    def league_match_id(self):
        """Gets the league_match_id of this MatchResponse.  # noqa: E501


        :return: The league_match_id of this MatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._league_match_id

    @league_match_id.setter
    def league_match_id(self, league_match_id):
        """Sets the league_match_id of this MatchResponse.


        :param league_match_id: The league_match_id of this MatchResponse.  # noqa: E501
        :type: int
        """

        self._league_match_id = league_match_id

    @property
    def location(self):
        """Gets the location of this MatchResponse.  # noqa: E501


        :return: The location of this MatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this MatchResponse.


        :param location: The location of this MatchResponse.  # noqa: E501
        :type: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def match_id(self):
        """Gets the match_id of this MatchResponse.  # noqa: E501


        :return: The match_id of this MatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id):
        """Sets the match_id of this MatchResponse.


        :param match_id: The match_id of this MatchResponse.  # noqa: E501
        :type: int
        """

        self._match_id = match_id

    @property
    def match_score_added(self):
        """Gets the match_score_added of this MatchResponse.  # noqa: E501


        :return: The match_score_added of this MatchResponse.  # noqa: E501
        :rtype: bool
        """
        return self._match_score_added

    @match_score_added.setter
    def match_score_added(self, match_score_added):
        """Sets the match_score_added of this MatchResponse.


        :param match_score_added: The match_score_added of this MatchResponse.  # noqa: E501
        :type: bool
        """
        if match_score_added is None:
            raise ValueError("Invalid value for `match_score_added`, must not be `None`")  # noqa: E501

        self._match_score_added = match_score_added

    @property
    def match_source(self):
        """Gets the match_source of this MatchResponse.  # noqa: E501


        :return: The match_source of this MatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._match_source

    @match_source.setter
    def match_source(self, match_source):
        """Sets the match_source of this MatchResponse.


        :param match_source: The match_source of this MatchResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["CLUB", "DUPR", "EXTERNAL", "LEAGUE", "MANUAL", "PARTNER", "TOURNAMENT"]  # noqa: E501
        if match_source not in allowed_values:
            raise ValueError(
                "Invalid value for `match_source` ({0}), must be one of {1}"  # noqa: E501
                .format(match_source, allowed_values)
            )

        self._match_source = match_source

    @property
    def match_type(self):
        """Gets the match_type of this MatchResponse.  # noqa: E501


        :return: The match_type of this MatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this MatchResponse.


        :param match_type: The match_type of this MatchResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["RALLY", "SIDE_ONLY"]  # noqa: E501
        if match_type not in allowed_values:
            raise ValueError(
                "Invalid value for `match_type` ({0}), must be one of {1}"  # noqa: E501
                .format(match_type, allowed_values)
            )

        self._match_type = match_type

    @property
    def modified(self):
        """Gets the modified of this MatchResponse.  # noqa: E501


        :return: The modified of this MatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this MatchResponse.


        :param modified: The modified of this MatchResponse.  # noqa: E501
        :type: str
        """

        self._modified = modified

    @property
    def no_of_games(self):
        """Gets the no_of_games of this MatchResponse.  # noqa: E501


        :return: The no_of_games of this MatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._no_of_games

    @no_of_games.setter
    def no_of_games(self, no_of_games):
        """Sets the no_of_games of this MatchResponse.


        :param no_of_games: The no_of_games of this MatchResponse.  # noqa: E501
        :type: int
        """

        self._no_of_games = no_of_games

    @property
    def score_format(self):
        """Gets the score_format of this MatchResponse.  # noqa: E501


        :return: The score_format of this MatchResponse.  # noqa: E501
        :rtype: ScoreFormatResponse
        """
        return self._score_format

    @score_format.setter
    def score_format(self, score_format):
        """Sets the score_format of this MatchResponse.


        :param score_format: The score_format of this MatchResponse.  # noqa: E501
        :type: ScoreFormatResponse
        """

        self._score_format = score_format

    @property
    def status(self):
        """Gets the status of this MatchResponse.  # noqa: E501


        :return: The status of this MatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MatchResponse.


        :param status: The status of this MatchResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def teams(self):
        """Gets the teams of this MatchResponse.  # noqa: E501


        :return: The teams of this MatchResponse.  # noqa: E501
        :rtype: list[TeamResponse]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this MatchResponse.


        :param teams: The teams of this MatchResponse.  # noqa: E501
        :type: list[TeamResponse]
        """
        if teams is None:
            raise ValueError("Invalid value for `teams`, must not be `None`")  # noqa: E501

        self._teams = teams

    @property
    def tournament(self):
        """Gets the tournament of this MatchResponse.  # noqa: E501


        :return: The tournament of this MatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._tournament

    @tournament.setter
    def tournament(self, tournament):
        """Sets the tournament of this MatchResponse.


        :param tournament: The tournament of this MatchResponse.  # noqa: E501
        :type: str
        """
        if tournament is None:
            raise ValueError("Invalid value for `tournament`, must not be `None`")  # noqa: E501

        self._tournament = tournament

    @property
    def user_id(self):
        """Gets the user_id of this MatchResponse.  # noqa: E501


        :return: The user_id of this MatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this MatchResponse.


        :param user_id: The user_id of this MatchResponse.  # noqa: E501
        :type: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def validator(self):
        """Gets the validator of this MatchResponse.  # noqa: E501


        :return: The validator of this MatchResponse.  # noqa: E501
        :rtype: BasicUserInfo
        """
        return self._validator

    @validator.setter
    def validator(self, validator):
        """Sets the validator of this MatchResponse.


        :param validator: The validator of this MatchResponse.  # noqa: E501
        :type: BasicUserInfo
        """

        self._validator = validator

    @property
    def venue(self):
        """Gets the venue of this MatchResponse.  # noqa: E501


        :return: The venue of this MatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this MatchResponse.


        :param venue: The venue of this MatchResponse.  # noqa: E501
        :type: str
        """
        if venue is None:
            raise ValueError("Invalid value for `venue`, must not be `None`")  # noqa: E501

        self._venue = venue

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MatchResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

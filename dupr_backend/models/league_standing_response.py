# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt
from dupr_backend.models.player_response import PlayerResponse

class LeagueStandingResponse(BaseModel):
    """
    LeagueStandingResponse
    """
    bracket_id: StrictInt = Field(..., alias="bracketId")
    game_lost: Optional[StrictInt] = Field(None, alias="gameLost")
    game_won: Optional[StrictInt] = Field(None, alias="gameWon")
    match_lost: Optional[StrictInt] = Field(None, alias="matchLost")
    match_won: Optional[StrictInt] = Field(None, alias="matchWon")
    player1: Optional[PlayerResponse] = None
    player2: Optional[PlayerResponse] = None
    point_diff_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="pointDiffPercentage")
    point_difference: Optional[StrictInt] = Field(None, alias="pointDifference")
    points_conceded: Optional[StrictInt] = Field(None, alias="pointsConceded")
    points_scored: Optional[StrictInt] = Field(None, alias="pointsScored")
    rank: Optional[StrictInt] = None
    registration_id: StrictInt = Field(..., alias="registrationId")
    round: StrictInt = Field(...)
    __properties = ["bracketId", "gameLost", "gameWon", "matchLost", "matchWon", "player1", "player2", "pointDiffPercentage", "pointDifference", "pointsConceded", "pointsScored", "rank", "registrationId", "round"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LeagueStandingResponse:
        """Create an instance of LeagueStandingResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of player1
        if self.player1:
            _dict['player1'] = self.player1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of player2
        if self.player2:
            _dict['player2'] = self.player2.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LeagueStandingResponse:
        """Create an instance of LeagueStandingResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LeagueStandingResponse.parse_obj(obj)

        _obj = LeagueStandingResponse.parse_obj({
            "bracket_id": obj.get("bracketId"),
            "game_lost": obj.get("gameLost"),
            "game_won": obj.get("gameWon"),
            "match_lost": obj.get("matchLost"),
            "match_won": obj.get("matchWon"),
            "player1": PlayerResponse.from_dict(obj.get("player1")) if obj.get("player1") is not None else None,
            "player2": PlayerResponse.from_dict(obj.get("player2")) if obj.get("player2") is not None else None,
            "point_diff_percentage": obj.get("pointDiffPercentage"),
            "point_difference": obj.get("pointDifference"),
            "points_conceded": obj.get("pointsConceded"),
            "points_scored": obj.get("pointsScored"),
            "rank": obj.get("rank"),
            "registration_id": obj.get("registrationId"),
            "round": obj.get("round")
        })
        return _obj



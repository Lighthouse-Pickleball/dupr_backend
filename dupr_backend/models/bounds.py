# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from dupr_backend.models.lat_lng import LatLng

class Bounds(BaseModel):
    """
    Bounds
    """
    northeast: Optional[LatLng] = None
    southwest: Optional[LatLng] = None
    __properties = ["northeast", "southwest"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Bounds:
        """Create an instance of Bounds from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of northeast
        if self.northeast:
            _dict['northeast'] = self.northeast.to_dict()
        # override the default output from pydantic by calling `to_dict()` of southwest
        if self.southwest:
            _dict['southwest'] = self.southwest.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Bounds:
        """Create an instance of Bounds from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Bounds.parse_obj(obj)

        _obj = Bounds.parse_obj({
            "northeast": LatLng.from_dict(obj.get("northeast")) if obj.get("northeast") is not None else None,
            "southwest": LatLng.from_dict(obj.get("southwest")) if obj.get("southwest") is not None else None
        })
        return _obj



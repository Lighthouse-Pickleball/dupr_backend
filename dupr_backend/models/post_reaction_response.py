# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostReactionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activity_id': 'str',
        'actor': 'ActivityUser',
        'children': 'dict(str, list[PostReactionResponse])',
        'comment': 'str',
        'created_at': 'int',
        'getstream_id': 'str',
        'id': 'str',
        'images': 'list[str]',
        'matches': 'list[Match]',
        'parent_id': 'str',
        'post_id': 'str',
        'react': 'str',
        'reaction_counts': 'dict(str, Number)',
        'tags': 'list[ActivityUser]',
        'updated_at': 'int'
    }

    attribute_map = {
        'activity_id': 'activityId',
        'actor': 'actor',
        'children': 'children',
        'comment': 'comment',
        'created_at': 'createdAt',
        'getstream_id': 'getstreamId',
        'id': 'id',
        'images': 'images',
        'matches': 'matches',
        'parent_id': 'parentId',
        'post_id': 'postId',
        'react': 'react',
        'reaction_counts': 'reactionCounts',
        'tags': 'tags',
        'updated_at': 'updatedAt'
    }

    def __init__(self, activity_id=None, actor=None, children=None, comment=None, created_at=None, getstream_id=None, id=None, images=None, matches=None, parent_id=None, post_id=None, react=None, reaction_counts=None, tags=None, updated_at=None):  # noqa: E501
        """PostReactionResponse - a model defined in Swagger"""  # noqa: E501
        self._activity_id = None
        self._actor = None
        self._children = None
        self._comment = None
        self._created_at = None
        self._getstream_id = None
        self._id = None
        self._images = None
        self._matches = None
        self._parent_id = None
        self._post_id = None
        self._react = None
        self._reaction_counts = None
        self._tags = None
        self._updated_at = None
        self.discriminator = None
        self.activity_id = activity_id
        self.actor = actor
        self.children = children
        self.comment = comment
        self.created_at = created_at
        self.getstream_id = getstream_id
        self.id = id
        self.images = images
        self.matches = matches
        self.parent_id = parent_id
        self.post_id = post_id
        self.react = react
        self.reaction_counts = reaction_counts
        self.tags = tags
        self.updated_at = updated_at

    @property
    def activity_id(self):
        """Gets the activity_id of this PostReactionResponse.  # noqa: E501


        :return: The activity_id of this PostReactionResponse.  # noqa: E501
        :rtype: str
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this PostReactionResponse.


        :param activity_id: The activity_id of this PostReactionResponse.  # noqa: E501
        :type: str
        """
        if activity_id is None:
            raise ValueError("Invalid value for `activity_id`, must not be `None`")  # noqa: E501

        self._activity_id = activity_id

    @property
    def actor(self):
        """Gets the actor of this PostReactionResponse.  # noqa: E501


        :return: The actor of this PostReactionResponse.  # noqa: E501
        :rtype: ActivityUser
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this PostReactionResponse.


        :param actor: The actor of this PostReactionResponse.  # noqa: E501
        :type: ActivityUser
        """
        if actor is None:
            raise ValueError("Invalid value for `actor`, must not be `None`")  # noqa: E501

        self._actor = actor

    @property
    def children(self):
        """Gets the children of this PostReactionResponse.  # noqa: E501


        :return: The children of this PostReactionResponse.  # noqa: E501
        :rtype: dict(str, list[PostReactionResponse])
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this PostReactionResponse.


        :param children: The children of this PostReactionResponse.  # noqa: E501
        :type: dict(str, list[PostReactionResponse])
        """
        if children is None:
            raise ValueError("Invalid value for `children`, must not be `None`")  # noqa: E501

        self._children = children

    @property
    def comment(self):
        """Gets the comment of this PostReactionResponse.  # noqa: E501


        :return: The comment of this PostReactionResponse.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this PostReactionResponse.


        :param comment: The comment of this PostReactionResponse.  # noqa: E501
        :type: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")  # noqa: E501

        self._comment = comment

    @property
    def created_at(self):
        """Gets the created_at of this PostReactionResponse.  # noqa: E501


        :return: The created_at of this PostReactionResponse.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PostReactionResponse.


        :param created_at: The created_at of this PostReactionResponse.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def getstream_id(self):
        """Gets the getstream_id of this PostReactionResponse.  # noqa: E501


        :return: The getstream_id of this PostReactionResponse.  # noqa: E501
        :rtype: str
        """
        return self._getstream_id

    @getstream_id.setter
    def getstream_id(self, getstream_id):
        """Sets the getstream_id of this PostReactionResponse.


        :param getstream_id: The getstream_id of this PostReactionResponse.  # noqa: E501
        :type: str
        """
        if getstream_id is None:
            raise ValueError("Invalid value for `getstream_id`, must not be `None`")  # noqa: E501

        self._getstream_id = getstream_id

    @property
    def id(self):
        """Gets the id of this PostReactionResponse.  # noqa: E501


        :return: The id of this PostReactionResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PostReactionResponse.


        :param id: The id of this PostReactionResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def images(self):
        """Gets the images of this PostReactionResponse.  # noqa: E501


        :return: The images of this PostReactionResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this PostReactionResponse.


        :param images: The images of this PostReactionResponse.  # noqa: E501
        :type: list[str]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")  # noqa: E501

        self._images = images

    @property
    def matches(self):
        """Gets the matches of this PostReactionResponse.  # noqa: E501


        :return: The matches of this PostReactionResponse.  # noqa: E501
        :rtype: list[Match]
        """
        return self._matches

    @matches.setter
    def matches(self, matches):
        """Sets the matches of this PostReactionResponse.


        :param matches: The matches of this PostReactionResponse.  # noqa: E501
        :type: list[Match]
        """
        if matches is None:
            raise ValueError("Invalid value for `matches`, must not be `None`")  # noqa: E501

        self._matches = matches

    @property
    def parent_id(self):
        """Gets the parent_id of this PostReactionResponse.  # noqa: E501


        :return: The parent_id of this PostReactionResponse.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this PostReactionResponse.


        :param parent_id: The parent_id of this PostReactionResponse.  # noqa: E501
        :type: str
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")  # noqa: E501

        self._parent_id = parent_id

    @property
    def post_id(self):
        """Gets the post_id of this PostReactionResponse.  # noqa: E501


        :return: The post_id of this PostReactionResponse.  # noqa: E501
        :rtype: str
        """
        return self._post_id

    @post_id.setter
    def post_id(self, post_id):
        """Sets the post_id of this PostReactionResponse.


        :param post_id: The post_id of this PostReactionResponse.  # noqa: E501
        :type: str
        """
        if post_id is None:
            raise ValueError("Invalid value for `post_id`, must not be `None`")  # noqa: E501

        self._post_id = post_id

    @property
    def react(self):
        """Gets the react of this PostReactionResponse.  # noqa: E501


        :return: The react of this PostReactionResponse.  # noqa: E501
        :rtype: str
        """
        return self._react

    @react.setter
    def react(self, react):
        """Sets the react of this PostReactionResponse.


        :param react: The react of this PostReactionResponse.  # noqa: E501
        :type: str
        """
        if react is None:
            raise ValueError("Invalid value for `react`, must not be `None`")  # noqa: E501
        allowed_values = ["COMMENT", "LIKE"]  # noqa: E501
        if react not in allowed_values:
            raise ValueError(
                "Invalid value for `react` ({0}), must be one of {1}"  # noqa: E501
                .format(react, allowed_values)
            )

        self._react = react

    @property
    def reaction_counts(self):
        """Gets the reaction_counts of this PostReactionResponse.  # noqa: E501


        :return: The reaction_counts of this PostReactionResponse.  # noqa: E501
        :rtype: dict(str, Number)
        """
        return self._reaction_counts

    @reaction_counts.setter
    def reaction_counts(self, reaction_counts):
        """Sets the reaction_counts of this PostReactionResponse.


        :param reaction_counts: The reaction_counts of this PostReactionResponse.  # noqa: E501
        :type: dict(str, Number)
        """
        if reaction_counts is None:
            raise ValueError("Invalid value for `reaction_counts`, must not be `None`")  # noqa: E501

        self._reaction_counts = reaction_counts

    @property
    def tags(self):
        """Gets the tags of this PostReactionResponse.  # noqa: E501


        :return: The tags of this PostReactionResponse.  # noqa: E501
        :rtype: list[ActivityUser]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PostReactionResponse.


        :param tags: The tags of this PostReactionResponse.  # noqa: E501
        :type: list[ActivityUser]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def updated_at(self):
        """Gets the updated_at of this PostReactionResponse.  # noqa: E501


        :return: The updated_at of this PostReactionResponse.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PostReactionResponse.


        :param updated_at: The updated_at of this PostReactionResponse.  # noqa: E501
        :type: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostReactionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostReactionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MatchesReassignRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'match_code': 'str',
        'notify': 'bool',
        'source': 'str',
        'source_merge_input_type': 'str',
        'target': 'str',
        'target_merge_input_type': 'str'
    }

    attribute_map = {
        'match_code': 'matchCode',
        'notify': 'notify',
        'source': 'source',
        'source_merge_input_type': 'sourceMergeInputType',
        'target': 'target',
        'target_merge_input_type': 'targetMergeInputType'
    }

    def __init__(self, match_code=None, notify=None, source=None, source_merge_input_type=None, target=None, target_merge_input_type=None):  # noqa: E501
        """MatchesReassignRequest - a model defined in Swagger"""  # noqa: E501
        self._match_code = None
        self._notify = None
        self._source = None
        self._source_merge_input_type = None
        self._target = None
        self._target_merge_input_type = None
        self.discriminator = None
        self.match_code = match_code
        if notify is not None:
            self.notify = notify
        self.source = source
        self.source_merge_input_type = source_merge_input_type
        self.target = target
        self.target_merge_input_type = target_merge_input_type

    @property
    def match_code(self):
        """Gets the match_code of this MatchesReassignRequest.  # noqa: E501


        :return: The match_code of this MatchesReassignRequest.  # noqa: E501
        :rtype: str
        """
        return self._match_code

    @match_code.setter
    def match_code(self, match_code):
        """Sets the match_code of this MatchesReassignRequest.


        :param match_code: The match_code of this MatchesReassignRequest.  # noqa: E501
        :type: str
        """
        if match_code is None:
            raise ValueError("Invalid value for `match_code`, must not be `None`")  # noqa: E501

        self._match_code = match_code

    @property
    def notify(self):
        """Gets the notify of this MatchesReassignRequest.  # noqa: E501


        :return: The notify of this MatchesReassignRequest.  # noqa: E501
        :rtype: bool
        """
        return self._notify

    @notify.setter
    def notify(self, notify):
        """Sets the notify of this MatchesReassignRequest.


        :param notify: The notify of this MatchesReassignRequest.  # noqa: E501
        :type: bool
        """

        self._notify = notify

    @property
    def source(self):
        """Gets the source of this MatchesReassignRequest.  # noqa: E501


        :return: The source of this MatchesReassignRequest.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this MatchesReassignRequest.


        :param source: The source of this MatchesReassignRequest.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def source_merge_input_type(self):
        """Gets the source_merge_input_type of this MatchesReassignRequest.  # noqa: E501


        :return: The source_merge_input_type of this MatchesReassignRequest.  # noqa: E501
        :rtype: str
        """
        return self._source_merge_input_type

    @source_merge_input_type.setter
    def source_merge_input_type(self, source_merge_input_type):
        """Sets the source_merge_input_type of this MatchesReassignRequest.


        :param source_merge_input_type: The source_merge_input_type of this MatchesReassignRequest.  # noqa: E501
        :type: str
        """
        if source_merge_input_type is None:
            raise ValueError("Invalid value for `source_merge_input_type`, must not be `None`")  # noqa: E501
        allowed_values = ["DUPR_ID", "EMAIL", "OBFUSCATED_USER_ID"]  # noqa: E501
        if source_merge_input_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_merge_input_type` ({0}), must be one of {1}"  # noqa: E501
                .format(source_merge_input_type, allowed_values)
            )

        self._source_merge_input_type = source_merge_input_type

    @property
    def target(self):
        """Gets the target of this MatchesReassignRequest.  # noqa: E501


        :return: The target of this MatchesReassignRequest.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this MatchesReassignRequest.


        :param target: The target of this MatchesReassignRequest.  # noqa: E501
        :type: str
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")  # noqa: E501

        self._target = target

    @property
    def target_merge_input_type(self):
        """Gets the target_merge_input_type of this MatchesReassignRequest.  # noqa: E501


        :return: The target_merge_input_type of this MatchesReassignRequest.  # noqa: E501
        :rtype: str
        """
        return self._target_merge_input_type

    @target_merge_input_type.setter
    def target_merge_input_type(self, target_merge_input_type):
        """Sets the target_merge_input_type of this MatchesReassignRequest.


        :param target_merge_input_type: The target_merge_input_type of this MatchesReassignRequest.  # noqa: E501
        :type: str
        """
        if target_merge_input_type is None:
            raise ValueError("Invalid value for `target_merge_input_type`, must not be `None`")  # noqa: E501
        allowed_values = ["DUPR_ID", "EMAIL", "OBFUSCATED_USER_ID"]  # noqa: E501
        if target_merge_input_type not in allowed_values:
            raise ValueError(
                "Invalid value for `target_merge_input_type` ({0}), must be one of {1}"  # noqa: E501
                .format(target_merge_input_type, allowed_values)
            )

        self._target_merge_input_type = target_merge_input_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MatchesReassignRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchesReassignRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ForfeitMatchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bracket_id': 'int',
        'club_id': 'int',
        'league_match_id': 'int',
        'match_id': 'int',
        'team1': 'ForfeitTeamRequest',
        'team2': 'ForfeitTeamRequest'
    }

    attribute_map = {
        'bracket_id': 'bracketId',
        'club_id': 'clubId',
        'league_match_id': 'leagueMatchId',
        'match_id': 'matchId',
        'team1': 'team1',
        'team2': 'team2'
    }

    def __init__(self, bracket_id=None, club_id=None, league_match_id=None, match_id=None, team1=None, team2=None):  # noqa: E501
        """ForfeitMatchRequest - a model defined in Swagger"""  # noqa: E501
        self._bracket_id = None
        self._club_id = None
        self._league_match_id = None
        self._match_id = None
        self._team1 = None
        self._team2 = None
        self.discriminator = None
        self.bracket_id = bracket_id
        self.club_id = club_id
        self.league_match_id = league_match_id
        self.match_id = match_id
        self.team1 = team1
        self.team2 = team2

    @property
    def bracket_id(self):
        """Gets the bracket_id of this ForfeitMatchRequest.  # noqa: E501


        :return: The bracket_id of this ForfeitMatchRequest.  # noqa: E501
        :rtype: int
        """
        return self._bracket_id

    @bracket_id.setter
    def bracket_id(self, bracket_id):
        """Sets the bracket_id of this ForfeitMatchRequest.


        :param bracket_id: The bracket_id of this ForfeitMatchRequest.  # noqa: E501
        :type: int
        """
        if bracket_id is None:
            raise ValueError("Invalid value for `bracket_id`, must not be `None`")  # noqa: E501

        self._bracket_id = bracket_id

    @property
    def club_id(self):
        """Gets the club_id of this ForfeitMatchRequest.  # noqa: E501


        :return: The club_id of this ForfeitMatchRequest.  # noqa: E501
        :rtype: int
        """
        return self._club_id

    @club_id.setter
    def club_id(self, club_id):
        """Sets the club_id of this ForfeitMatchRequest.


        :param club_id: The club_id of this ForfeitMatchRequest.  # noqa: E501
        :type: int
        """
        if club_id is None:
            raise ValueError("Invalid value for `club_id`, must not be `None`")  # noqa: E501

        self._club_id = club_id

    @property
    def league_match_id(self):
        """Gets the league_match_id of this ForfeitMatchRequest.  # noqa: E501


        :return: The league_match_id of this ForfeitMatchRequest.  # noqa: E501
        :rtype: int
        """
        return self._league_match_id

    @league_match_id.setter
    def league_match_id(self, league_match_id):
        """Sets the league_match_id of this ForfeitMatchRequest.


        :param league_match_id: The league_match_id of this ForfeitMatchRequest.  # noqa: E501
        :type: int
        """
        if league_match_id is None:
            raise ValueError("Invalid value for `league_match_id`, must not be `None`")  # noqa: E501

        self._league_match_id = league_match_id

    @property
    def match_id(self):
        """Gets the match_id of this ForfeitMatchRequest.  # noqa: E501


        :return: The match_id of this ForfeitMatchRequest.  # noqa: E501
        :rtype: int
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id):
        """Sets the match_id of this ForfeitMatchRequest.


        :param match_id: The match_id of this ForfeitMatchRequest.  # noqa: E501
        :type: int
        """
        if match_id is None:
            raise ValueError("Invalid value for `match_id`, must not be `None`")  # noqa: E501

        self._match_id = match_id

    @property
    def team1(self):
        """Gets the team1 of this ForfeitMatchRequest.  # noqa: E501


        :return: The team1 of this ForfeitMatchRequest.  # noqa: E501
        :rtype: ForfeitTeamRequest
        """
        return self._team1

    @team1.setter
    def team1(self, team1):
        """Sets the team1 of this ForfeitMatchRequest.


        :param team1: The team1 of this ForfeitMatchRequest.  # noqa: E501
        :type: ForfeitTeamRequest
        """
        if team1 is None:
            raise ValueError("Invalid value for `team1`, must not be `None`")  # noqa: E501

        self._team1 = team1

    @property
    def team2(self):
        """Gets the team2 of this ForfeitMatchRequest.  # noqa: E501


        :return: The team2 of this ForfeitMatchRequest.  # noqa: E501
        :rtype: ForfeitTeamRequest
        """
        return self._team2

    @team2.setter
    def team2(self, team2):
        """Sets the team2 of this ForfeitMatchRequest.


        :param team2: The team2 of this ForfeitMatchRequest.  # noqa: E501
        :type: ForfeitTeamRequest
        """
        if team2 is None:
            raise ValueError("Invalid value for `team2`, must not be `None`")  # noqa: E501

        self._team2 = team2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ForfeitMatchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ForfeitMatchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MatchSearchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filters': 'MatchFilters',
        'limit': 'int',
        'offset': 'int',
        'sort': 'MatchSort'
    }

    attribute_map = {
        'filters': 'filters',
        'limit': 'limit',
        'offset': 'offset',
        'sort': 'sort'
    }

    def __init__(self, filters=None, limit=None, offset=None, sort=None):  # noqa: E501
        """MatchSearchRequest - a model defined in Swagger"""  # noqa: E501
        self._filters = None
        self._limit = None
        self._offset = None
        self._sort = None
        self.discriminator = None
        if filters is not None:
            self.filters = filters
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if sort is not None:
            self.sort = sort

    @property
    def filters(self):
        """Gets the filters of this MatchSearchRequest.  # noqa: E501


        :return: The filters of this MatchSearchRequest.  # noqa: E501
        :rtype: MatchFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this MatchSearchRequest.


        :param filters: The filters of this MatchSearchRequest.  # noqa: E501
        :type: MatchFilters
        """

        self._filters = filters

    @property
    def limit(self):
        """Gets the limit of this MatchSearchRequest.  # noqa: E501


        :return: The limit of this MatchSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this MatchSearchRequest.


        :param limit: The limit of this MatchSearchRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this MatchSearchRequest.  # noqa: E501


        :return: The offset of this MatchSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this MatchSearchRequest.


        :param offset: The offset of this MatchSearchRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def sort(self):
        """Gets the sort of this MatchSearchRequest.  # noqa: E501


        :return: The sort of this MatchSearchRequest.  # noqa: E501
        :rtype: MatchSort
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this MatchSearchRequest.


        :param sort: The sort of this MatchSearchRequest.  # noqa: E501
        :type: MatchSort
        """

        self._sort = sort

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MatchSearchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchSearchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

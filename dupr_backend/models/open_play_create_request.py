# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from dupr_backend.models.rating_range_req import RatingRangeReq
from dupr_backend.models.time_range_req import TimeRangeReq

class OpenPlayCreateRequest(BaseModel):
    """
    OpenPlayCreateRequest
    """
    address_id: StrictInt = Field(..., alias="addressId")
    description: Optional[StrictStr] = None
    event_date: date = Field(..., alias="eventDate")
    invited_players: Optional[conlist(StrictStr, unique_items=True)] = Field(None, alias="invitedPlayers")
    max_players: StrictInt = Field(..., alias="maxPlayers")
    name: StrictStr = Field(...)
    rating: RatingRangeReq = Field(...)
    time: TimeRangeReq = Field(...)
    __properties = ["addressId", "description", "eventDate", "invitedPlayers", "maxPlayers", "name", "rating", "time"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OpenPlayCreateRequest:
        """Create an instance of OpenPlayCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of rating
        if self.rating:
            _dict['rating'] = self.rating.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time
        if self.time:
            _dict['time'] = self.time.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OpenPlayCreateRequest:
        """Create an instance of OpenPlayCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OpenPlayCreateRequest.parse_obj(obj)

        _obj = OpenPlayCreateRequest.parse_obj({
            "address_id": obj.get("addressId"),
            "description": obj.get("description"),
            "event_date": obj.get("eventDate"),
            "invited_players": obj.get("invitedPlayers"),
            "max_players": obj.get("maxPlayers"),
            "name": obj.get("name"),
            "rating": RatingRangeReq.from_dict(obj.get("rating")) if obj.get("rating") is not None else None,
            "time": TimeRangeReq.from_dict(obj.get("time")) if obj.get("time") is not None else None
        })
        return _obj



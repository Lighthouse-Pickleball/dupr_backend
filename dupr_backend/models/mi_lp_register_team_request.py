# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MiLPRegisterTeamRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'division_id': 'int',
        'event_id': 'int',
        'team_id': 'int'
    }

    attribute_map = {
        'division_id': 'divisionId',
        'event_id': 'eventId',
        'team_id': 'teamId'
    }

    def __init__(self, division_id=None, event_id=None, team_id=None):  # noqa: E501
        """MiLPRegisterTeamRequest - a model defined in Swagger"""  # noqa: E501
        self._division_id = None
        self._event_id = None
        self._team_id = None
        self.discriminator = None
        if division_id is not None:
            self.division_id = division_id
        if event_id is not None:
            self.event_id = event_id
        if team_id is not None:
            self.team_id = team_id

    @property
    def division_id(self):
        """Gets the division_id of this MiLPRegisterTeamRequest.  # noqa: E501


        :return: The division_id of this MiLPRegisterTeamRequest.  # noqa: E501
        :rtype: int
        """
        return self._division_id

    @division_id.setter
    def division_id(self, division_id):
        """Sets the division_id of this MiLPRegisterTeamRequest.


        :param division_id: The division_id of this MiLPRegisterTeamRequest.  # noqa: E501
        :type: int
        """

        self._division_id = division_id

    @property
    def event_id(self):
        """Gets the event_id of this MiLPRegisterTeamRequest.  # noqa: E501


        :return: The event_id of this MiLPRegisterTeamRequest.  # noqa: E501
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this MiLPRegisterTeamRequest.


        :param event_id: The event_id of this MiLPRegisterTeamRequest.  # noqa: E501
        :type: int
        """

        self._event_id = event_id

    @property
    def team_id(self):
        """Gets the team_id of this MiLPRegisterTeamRequest.  # noqa: E501


        :return: The team_id of this MiLPRegisterTeamRequest.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this MiLPRegisterTeamRequest.


        :param team_id: The team_id of this MiLPRegisterTeamRequest.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MiLPRegisterTeamRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MiLPRegisterTeamRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

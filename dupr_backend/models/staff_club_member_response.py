# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StaffClubMemberResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'directors': 'list[StaffClubMember]',
        'max_director_count': 'int',
        'max_organizer_count': 'int',
        'organizers': 'list[StaffClubMember]'
    }

    attribute_map = {
        'directors': 'directors',
        'max_director_count': 'maxDirectorCount',
        'max_organizer_count': 'maxOrganizerCount',
        'organizers': 'organizers'
    }

    def __init__(self, directors=None, max_director_count=None, max_organizer_count=None, organizers=None):  # noqa: E501
        """StaffClubMemberResponse - a model defined in Swagger"""  # noqa: E501
        self._directors = None
        self._max_director_count = None
        self._max_organizer_count = None
        self._organizers = None
        self.discriminator = None
        self.directors = directors
        self.max_director_count = max_director_count
        self.max_organizer_count = max_organizer_count
        self.organizers = organizers

    @property
    def directors(self):
        """Gets the directors of this StaffClubMemberResponse.  # noqa: E501


        :return: The directors of this StaffClubMemberResponse.  # noqa: E501
        :rtype: list[StaffClubMember]
        """
        return self._directors

    @directors.setter
    def directors(self, directors):
        """Sets the directors of this StaffClubMemberResponse.


        :param directors: The directors of this StaffClubMemberResponse.  # noqa: E501
        :type: list[StaffClubMember]
        """
        if directors is None:
            raise ValueError("Invalid value for `directors`, must not be `None`")  # noqa: E501

        self._directors = directors

    @property
    def max_director_count(self):
        """Gets the max_director_count of this StaffClubMemberResponse.  # noqa: E501


        :return: The max_director_count of this StaffClubMemberResponse.  # noqa: E501
        :rtype: int
        """
        return self._max_director_count

    @max_director_count.setter
    def max_director_count(self, max_director_count):
        """Sets the max_director_count of this StaffClubMemberResponse.


        :param max_director_count: The max_director_count of this StaffClubMemberResponse.  # noqa: E501
        :type: int
        """
        if max_director_count is None:
            raise ValueError("Invalid value for `max_director_count`, must not be `None`")  # noqa: E501

        self._max_director_count = max_director_count

    @property
    def max_organizer_count(self):
        """Gets the max_organizer_count of this StaffClubMemberResponse.  # noqa: E501


        :return: The max_organizer_count of this StaffClubMemberResponse.  # noqa: E501
        :rtype: int
        """
        return self._max_organizer_count

    @max_organizer_count.setter
    def max_organizer_count(self, max_organizer_count):
        """Sets the max_organizer_count of this StaffClubMemberResponse.


        :param max_organizer_count: The max_organizer_count of this StaffClubMemberResponse.  # noqa: E501
        :type: int
        """
        if max_organizer_count is None:
            raise ValueError("Invalid value for `max_organizer_count`, must not be `None`")  # noqa: E501

        self._max_organizer_count = max_organizer_count

    @property
    def organizers(self):
        """Gets the organizers of this StaffClubMemberResponse.  # noqa: E501


        :return: The organizers of this StaffClubMemberResponse.  # noqa: E501
        :rtype: list[StaffClubMember]
        """
        return self._organizers

    @organizers.setter
    def organizers(self, organizers):
        """Sets the organizers of this StaffClubMemberResponse.


        :param organizers: The organizers of this StaffClubMemberResponse.  # noqa: E501
        :type: list[StaffClubMember]
        """
        if organizers is None:
            raise ValueError("Invalid value for `organizers`, must not be `None`")  # noqa: E501

        self._organizers = organizers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StaffClubMemberResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StaffClubMemberResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

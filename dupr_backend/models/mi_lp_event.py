# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist, validator
from dupr_backend.models.description import Description
from dupr_backend.models.division import Division

class MiLPEvent(BaseModel):
    """
    MiLPEvent
    """
    address_str: StrictStr = Field(..., alias="addressStr")
    club_id: StrictInt = Field(..., alias="clubId")
    club_name: Optional[StrictStr] = Field(None, alias="clubName")
    creator_email: Optional[StrictStr] = Field(None, alias="creatorEmail")
    creator_id: StrictInt = Field(..., alias="creatorId")
    creator_name: Optional[StrictStr] = Field(None, alias="creatorName")
    default_entry_fee: Union[StrictFloat, StrictInt] = Field(..., alias="defaultEntryFee")
    default_max_teams: StrictInt = Field(..., alias="defaultMaxTeams")
    default_max_waitlist: StrictInt = Field(..., alias="defaultMaxWaitlist")
    description: Optional[Description] = None
    divisions: conlist(Division) = Field(...)
    duration: Optional[conlist(StrictStr)] = None
    event_id: StrictInt = Field(..., alias="eventId")
    event_name: StrictStr = Field(..., alias="eventName")
    event_type: StrictStr = Field(..., alias="eventType")
    status: StrictStr = Field(...)
    __properties = ["addressStr", "clubId", "clubName", "creatorEmail", "creatorId", "creatorName", "defaultEntryFee", "defaultMaxTeams", "defaultMaxWaitlist", "description", "divisions", "duration", "eventId", "eventName", "eventType", "status"]

    @validator('event_type')
    def event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('MARQUE', 'SHOWDOWN', 'STANDARD'):
            raise ValueError("must be one of enum values ('MARQUE', 'SHOWDOWN', 'STANDARD')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING'):
            raise ValueError("must be one of enum values ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MiLPEvent:
        """Create an instance of MiLPEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in divisions (list)
        _items = []
        if self.divisions:
            for _item in self.divisions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['divisions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MiLPEvent:
        """Create an instance of MiLPEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MiLPEvent.parse_obj(obj)

        _obj = MiLPEvent.parse_obj({
            "address_str": obj.get("addressStr"),
            "club_id": obj.get("clubId"),
            "club_name": obj.get("clubName"),
            "creator_email": obj.get("creatorEmail"),
            "creator_id": obj.get("creatorId"),
            "creator_name": obj.get("creatorName"),
            "default_entry_fee": obj.get("defaultEntryFee"),
            "default_max_teams": obj.get("defaultMaxTeams"),
            "default_max_waitlist": obj.get("defaultMaxWaitlist"),
            "description": Description.from_dict(obj.get("description")) if obj.get("description") is not None else None,
            "divisions": [Division.from_dict(_item) for _item in obj.get("divisions")] if obj.get("divisions") is not None else None,
            "duration": obj.get("duration"),
            "event_id": obj.get("eventId"),
            "event_name": obj.get("eventName"),
            "event_type": obj.get("eventType"),
            "status": obj.get("status")
        })
        return _obj



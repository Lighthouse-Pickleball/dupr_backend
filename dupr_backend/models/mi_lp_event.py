# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MiLPEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_str': 'str',
        'club_id': 'int',
        'club_name': 'str',
        'creator_email': 'str',
        'creator_id': 'int',
        'creator_name': 'str',
        'default_entry_fee': 'float',
        'default_max_teams': 'int',
        'default_max_waitlist': 'int',
        'description': 'Description',
        'divisions': 'list[Division]',
        'duration': 'list[str]',
        'event_id': 'int',
        'event_name': 'str',
        'event_type': 'str',
        'status': 'str'
    }

    attribute_map = {
        'address_str': 'addressStr',
        'club_id': 'clubId',
        'club_name': 'clubName',
        'creator_email': 'creatorEmail',
        'creator_id': 'creatorId',
        'creator_name': 'creatorName',
        'default_entry_fee': 'defaultEntryFee',
        'default_max_teams': 'defaultMaxTeams',
        'default_max_waitlist': 'defaultMaxWaitlist',
        'description': 'description',
        'divisions': 'divisions',
        'duration': 'duration',
        'event_id': 'eventId',
        'event_name': 'eventName',
        'event_type': 'eventType',
        'status': 'status'
    }

    def __init__(self, address_str=None, club_id=None, club_name=None, creator_email=None, creator_id=None, creator_name=None, default_entry_fee=None, default_max_teams=None, default_max_waitlist=None, description=None, divisions=None, duration=None, event_id=None, event_name=None, event_type=None, status=None):  # noqa: E501
        """MiLPEvent - a model defined in Swagger"""  # noqa: E501
        self._address_str = None
        self._club_id = None
        self._club_name = None
        self._creator_email = None
        self._creator_id = None
        self._creator_name = None
        self._default_entry_fee = None
        self._default_max_teams = None
        self._default_max_waitlist = None
        self._description = None
        self._divisions = None
        self._duration = None
        self._event_id = None
        self._event_name = None
        self._event_type = None
        self._status = None
        self.discriminator = None
        self.address_str = address_str
        self.club_id = club_id
        if club_name is not None:
            self.club_name = club_name
        if creator_email is not None:
            self.creator_email = creator_email
        self.creator_id = creator_id
        if creator_name is not None:
            self.creator_name = creator_name
        self.default_entry_fee = default_entry_fee
        self.default_max_teams = default_max_teams
        self.default_max_waitlist = default_max_waitlist
        if description is not None:
            self.description = description
        self.divisions = divisions
        if duration is not None:
            self.duration = duration
        self.event_id = event_id
        self.event_name = event_name
        self.event_type = event_type
        self.status = status

    @property
    def address_str(self):
        """Gets the address_str of this MiLPEvent.  # noqa: E501


        :return: The address_str of this MiLPEvent.  # noqa: E501
        :rtype: str
        """
        return self._address_str

    @address_str.setter
    def address_str(self, address_str):
        """Sets the address_str of this MiLPEvent.


        :param address_str: The address_str of this MiLPEvent.  # noqa: E501
        :type: str
        """
        if address_str is None:
            raise ValueError("Invalid value for `address_str`, must not be `None`")  # noqa: E501

        self._address_str = address_str

    @property
    def club_id(self):
        """Gets the club_id of this MiLPEvent.  # noqa: E501


        :return: The club_id of this MiLPEvent.  # noqa: E501
        :rtype: int
        """
        return self._club_id

    @club_id.setter
    def club_id(self, club_id):
        """Sets the club_id of this MiLPEvent.


        :param club_id: The club_id of this MiLPEvent.  # noqa: E501
        :type: int
        """
        if club_id is None:
            raise ValueError("Invalid value for `club_id`, must not be `None`")  # noqa: E501

        self._club_id = club_id

    @property
    def club_name(self):
        """Gets the club_name of this MiLPEvent.  # noqa: E501


        :return: The club_name of this MiLPEvent.  # noqa: E501
        :rtype: str
        """
        return self._club_name

    @club_name.setter
    def club_name(self, club_name):
        """Sets the club_name of this MiLPEvent.


        :param club_name: The club_name of this MiLPEvent.  # noqa: E501
        :type: str
        """

        self._club_name = club_name

    @property
    def creator_email(self):
        """Gets the creator_email of this MiLPEvent.  # noqa: E501


        :return: The creator_email of this MiLPEvent.  # noqa: E501
        :rtype: str
        """
        return self._creator_email

    @creator_email.setter
    def creator_email(self, creator_email):
        """Sets the creator_email of this MiLPEvent.


        :param creator_email: The creator_email of this MiLPEvent.  # noqa: E501
        :type: str
        """

        self._creator_email = creator_email

    @property
    def creator_id(self):
        """Gets the creator_id of this MiLPEvent.  # noqa: E501


        :return: The creator_id of this MiLPEvent.  # noqa: E501
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this MiLPEvent.


        :param creator_id: The creator_id of this MiLPEvent.  # noqa: E501
        :type: int
        """
        if creator_id is None:
            raise ValueError("Invalid value for `creator_id`, must not be `None`")  # noqa: E501

        self._creator_id = creator_id

    @property
    def creator_name(self):
        """Gets the creator_name of this MiLPEvent.  # noqa: E501


        :return: The creator_name of this MiLPEvent.  # noqa: E501
        :rtype: str
        """
        return self._creator_name

    @creator_name.setter
    def creator_name(self, creator_name):
        """Sets the creator_name of this MiLPEvent.


        :param creator_name: The creator_name of this MiLPEvent.  # noqa: E501
        :type: str
        """

        self._creator_name = creator_name

    @property
    def default_entry_fee(self):
        """Gets the default_entry_fee of this MiLPEvent.  # noqa: E501


        :return: The default_entry_fee of this MiLPEvent.  # noqa: E501
        :rtype: float
        """
        return self._default_entry_fee

    @default_entry_fee.setter
    def default_entry_fee(self, default_entry_fee):
        """Sets the default_entry_fee of this MiLPEvent.


        :param default_entry_fee: The default_entry_fee of this MiLPEvent.  # noqa: E501
        :type: float
        """
        if default_entry_fee is None:
            raise ValueError("Invalid value for `default_entry_fee`, must not be `None`")  # noqa: E501

        self._default_entry_fee = default_entry_fee

    @property
    def default_max_teams(self):
        """Gets the default_max_teams of this MiLPEvent.  # noqa: E501


        :return: The default_max_teams of this MiLPEvent.  # noqa: E501
        :rtype: int
        """
        return self._default_max_teams

    @default_max_teams.setter
    def default_max_teams(self, default_max_teams):
        """Sets the default_max_teams of this MiLPEvent.


        :param default_max_teams: The default_max_teams of this MiLPEvent.  # noqa: E501
        :type: int
        """
        if default_max_teams is None:
            raise ValueError("Invalid value for `default_max_teams`, must not be `None`")  # noqa: E501

        self._default_max_teams = default_max_teams

    @property
    def default_max_waitlist(self):
        """Gets the default_max_waitlist of this MiLPEvent.  # noqa: E501


        :return: The default_max_waitlist of this MiLPEvent.  # noqa: E501
        :rtype: int
        """
        return self._default_max_waitlist

    @default_max_waitlist.setter
    def default_max_waitlist(self, default_max_waitlist):
        """Sets the default_max_waitlist of this MiLPEvent.


        :param default_max_waitlist: The default_max_waitlist of this MiLPEvent.  # noqa: E501
        :type: int
        """
        if default_max_waitlist is None:
            raise ValueError("Invalid value for `default_max_waitlist`, must not be `None`")  # noqa: E501

        self._default_max_waitlist = default_max_waitlist

    @property
    def description(self):
        """Gets the description of this MiLPEvent.  # noqa: E501


        :return: The description of this MiLPEvent.  # noqa: E501
        :rtype: Description
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MiLPEvent.


        :param description: The description of this MiLPEvent.  # noqa: E501
        :type: Description
        """

        self._description = description

    @property
    def divisions(self):
        """Gets the divisions of this MiLPEvent.  # noqa: E501


        :return: The divisions of this MiLPEvent.  # noqa: E501
        :rtype: list[Division]
        """
        return self._divisions

    @divisions.setter
    def divisions(self, divisions):
        """Sets the divisions of this MiLPEvent.


        :param divisions: The divisions of this MiLPEvent.  # noqa: E501
        :type: list[Division]
        """
        if divisions is None:
            raise ValueError("Invalid value for `divisions`, must not be `None`")  # noqa: E501

        self._divisions = divisions

    @property
    def duration(self):
        """Gets the duration of this MiLPEvent.  # noqa: E501


        :return: The duration of this MiLPEvent.  # noqa: E501
        :rtype: list[str]
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this MiLPEvent.


        :param duration: The duration of this MiLPEvent.  # noqa: E501
        :type: list[str]
        """

        self._duration = duration

    @property
    def event_id(self):
        """Gets the event_id of this MiLPEvent.  # noqa: E501


        :return: The event_id of this MiLPEvent.  # noqa: E501
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this MiLPEvent.


        :param event_id: The event_id of this MiLPEvent.  # noqa: E501
        :type: int
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")  # noqa: E501

        self._event_id = event_id

    @property
    def event_name(self):
        """Gets the event_name of this MiLPEvent.  # noqa: E501


        :return: The event_name of this MiLPEvent.  # noqa: E501
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this MiLPEvent.


        :param event_name: The event_name of this MiLPEvent.  # noqa: E501
        :type: str
        """
        if event_name is None:
            raise ValueError("Invalid value for `event_name`, must not be `None`")  # noqa: E501

        self._event_name = event_name

    @property
    def event_type(self):
        """Gets the event_type of this MiLPEvent.  # noqa: E501


        :return: The event_type of this MiLPEvent.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this MiLPEvent.


        :param event_type: The event_type of this MiLPEvent.  # noqa: E501
        :type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")  # noqa: E501
        allowed_values = ["MARQUE", "SHOWDOWN", "STANDARD"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def status(self):
        """Gets the status of this MiLPEvent.  # noqa: E501


        :return: The status of this MiLPEvent.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MiLPEvent.


        :param status: The status of this MiLPEvent.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MiLPEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MiLPEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

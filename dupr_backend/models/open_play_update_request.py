# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OpenPlayUpdateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_id': 'int',
        'description': 'str',
        'event_date': 'date',
        'name': 'str',
        'rating': 'RatingRangeReq',
        'status': 'str',
        'time': 'TimeRangeReq'
    }

    attribute_map = {
        'address_id': 'addressId',
        'description': 'description',
        'event_date': 'eventDate',
        'name': 'name',
        'rating': 'rating',
        'status': 'status',
        'time': 'time'
    }

    def __init__(self, address_id=None, description=None, event_date=None, name=None, rating=None, status=None, time=None):  # noqa: E501
        """OpenPlayUpdateRequest - a model defined in Swagger"""  # noqa: E501
        self._address_id = None
        self._description = None
        self._event_date = None
        self._name = None
        self._rating = None
        self._status = None
        self._time = None
        self.discriminator = None
        self.address_id = address_id
        if description is not None:
            self.description = description
        self.event_date = event_date
        self.name = name
        self.rating = rating
        self.status = status
        self.time = time

    @property
    def address_id(self):
        """Gets the address_id of this OpenPlayUpdateRequest.  # noqa: E501


        :return: The address_id of this OpenPlayUpdateRequest.  # noqa: E501
        :rtype: int
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """Sets the address_id of this OpenPlayUpdateRequest.


        :param address_id: The address_id of this OpenPlayUpdateRequest.  # noqa: E501
        :type: int
        """
        if address_id is None:
            raise ValueError("Invalid value for `address_id`, must not be `None`")  # noqa: E501

        self._address_id = address_id

    @property
    def description(self):
        """Gets the description of this OpenPlayUpdateRequest.  # noqa: E501


        :return: The description of this OpenPlayUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OpenPlayUpdateRequest.


        :param description: The description of this OpenPlayUpdateRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def event_date(self):
        """Gets the event_date of this OpenPlayUpdateRequest.  # noqa: E501


        :return: The event_date of this OpenPlayUpdateRequest.  # noqa: E501
        :rtype: date
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this OpenPlayUpdateRequest.


        :param event_date: The event_date of this OpenPlayUpdateRequest.  # noqa: E501
        :type: date
        """
        if event_date is None:
            raise ValueError("Invalid value for `event_date`, must not be `None`")  # noqa: E501

        self._event_date = event_date

    @property
    def name(self):
        """Gets the name of this OpenPlayUpdateRequest.  # noqa: E501


        :return: The name of this OpenPlayUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OpenPlayUpdateRequest.


        :param name: The name of this OpenPlayUpdateRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def rating(self):
        """Gets the rating of this OpenPlayUpdateRequest.  # noqa: E501


        :return: The rating of this OpenPlayUpdateRequest.  # noqa: E501
        :rtype: RatingRangeReq
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this OpenPlayUpdateRequest.


        :param rating: The rating of this OpenPlayUpdateRequest.  # noqa: E501
        :type: RatingRangeReq
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")  # noqa: E501

        self._rating = rating

    @property
    def status(self):
        """Gets the status of this OpenPlayUpdateRequest.  # noqa: E501


        :return: The status of this OpenPlayUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OpenPlayUpdateRequest.


        :param status: The status of this OpenPlayUpdateRequest.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def time(self):
        """Gets the time of this OpenPlayUpdateRequest.  # noqa: E501


        :return: The time of this OpenPlayUpdateRequest.  # noqa: E501
        :rtype: TimeRangeReq
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this OpenPlayUpdateRequest.


        :param time: The time of this OpenPlayUpdateRequest.  # noqa: E501
        :type: TimeRangeReq
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenPlayUpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenPlayUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Backend APIs

    Internal RESTful APIs to access DUPR ratings, users and provide matches.

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AddressComponent(BaseModel):
    """
    AddressComponent
    """ # noqa: E501
    long_name: Optional[StrictStr] = Field(default=None, alias="longName")
    short_name: Optional[StrictStr] = Field(default=None, alias="shortName")
    types: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["longName", "shortName", "types"]

    @field_validator('types')
    def types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['street_address', 'route', 'intersection', 'continent', 'political', 'country', 'administrative_area_level_1', 'administrative_area_level_2', 'administrative_area_level_3', 'administrative_area_level_4', 'administrative_area_level_5', 'colloquial_area', 'locality', 'ward', 'sublocality', 'sublocality_level_1', 'sublocality_level_2', 'sublocality_level_3', 'sublocality_level_4', 'sublocality_level_5', 'neighborhood', 'premise', 'subpremise', 'postal_code', 'postal_code_prefix', 'postal_code_suffix', 'natural_feature', 'airport', 'park', 'point_of_interest', 'floor', 'establishment', 'parking', 'post_box', 'postal_town', 'room', 'street_number', 'bus_station', 'train_station', 'subway_station', 'transit_station', 'light_rail_station', 'general_contractor', 'food', 'real_estate_agency', 'car_rental', 'travel_agency', 'electronics_store', 'home_goods_store', 'school', 'store', 'shopping_mall', 'lodging', 'art_gallery', 'lawyer', 'restaurant', 'bar', 'meal_takeaway', 'clothing_store', 'local_government_office', 'finance', 'moving_company', 'storage', 'cafe', 'car_repair', 'health', 'insurance_agency', 'painter', 'archipelago', 'museum', 'campground', 'rv_park', 'meal_delivery', 'primary_school', 'secondary_school', 'town_square', 'tourist_attraction', 'plus_code', 'drugstore', 'unknown']):
                raise ValueError("each list item must be one of ('street_address', 'route', 'intersection', 'continent', 'political', 'country', 'administrative_area_level_1', 'administrative_area_level_2', 'administrative_area_level_3', 'administrative_area_level_4', 'administrative_area_level_5', 'colloquial_area', 'locality', 'ward', 'sublocality', 'sublocality_level_1', 'sublocality_level_2', 'sublocality_level_3', 'sublocality_level_4', 'sublocality_level_5', 'neighborhood', 'premise', 'subpremise', 'postal_code', 'postal_code_prefix', 'postal_code_suffix', 'natural_feature', 'airport', 'park', 'point_of_interest', 'floor', 'establishment', 'parking', 'post_box', 'postal_town', 'room', 'street_number', 'bus_station', 'train_station', 'subway_station', 'transit_station', 'light_rail_station', 'general_contractor', 'food', 'real_estate_agency', 'car_rental', 'travel_agency', 'electronics_store', 'home_goods_store', 'school', 'store', 'shopping_mall', 'lodging', 'art_gallery', 'lawyer', 'restaurant', 'bar', 'meal_takeaway', 'clothing_store', 'local_government_office', 'finance', 'moving_company', 'storage', 'cafe', 'car_repair', 'health', 'insurance_agency', 'painter', 'archipelago', 'museum', 'campground', 'rv_park', 'meal_delivery', 'primary_school', 'secondary_school', 'town_square', 'tourist_attraction', 'plus_code', 'drugstore', 'unknown')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddressComponent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddressComponent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "longName": obj.get("longName"),
            "shortName": obj.get("shortName"),
            "types": obj.get("types")
        })
        return _obj



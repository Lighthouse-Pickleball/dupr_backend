# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddressComponent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'long_name': 'str',
        'short_name': 'str',
        'types': 'list[str]'
    }

    attribute_map = {
        'long_name': 'longName',
        'short_name': 'shortName',
        'types': 'types'
    }

    def __init__(self, long_name=None, short_name=None, types=None):  # noqa: E501
        """AddressComponent - a model defined in Swagger"""  # noqa: E501
        self._long_name = None
        self._short_name = None
        self._types = None
        self.discriminator = None
        if long_name is not None:
            self.long_name = long_name
        if short_name is not None:
            self.short_name = short_name
        if types is not None:
            self.types = types

    @property
    def long_name(self):
        """Gets the long_name of this AddressComponent.  # noqa: E501


        :return: The long_name of this AddressComponent.  # noqa: E501
        :rtype: str
        """
        return self._long_name

    @long_name.setter
    def long_name(self, long_name):
        """Sets the long_name of this AddressComponent.


        :param long_name: The long_name of this AddressComponent.  # noqa: E501
        :type: str
        """

        self._long_name = long_name

    @property
    def short_name(self):
        """Gets the short_name of this AddressComponent.  # noqa: E501


        :return: The short_name of this AddressComponent.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this AddressComponent.


        :param short_name: The short_name of this AddressComponent.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def types(self):
        """Gets the types of this AddressComponent.  # noqa: E501


        :return: The types of this AddressComponent.  # noqa: E501
        :rtype: list[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this AddressComponent.


        :param types: The types of this AddressComponent.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ADMINISTRATIVE_AREA_LEVEL_1", "ADMINISTRATIVE_AREA_LEVEL_2", "ADMINISTRATIVE_AREA_LEVEL_3", "ADMINISTRATIVE_AREA_LEVEL_4", "ADMINISTRATIVE_AREA_LEVEL_5", "AIRPORT", "ARCHIPELAGO", "ART_GALLERY", "BAR", "BUS_STATION", "CAFE", "CAMPGROUND", "CAR_RENTAL", "CAR_REPAIR", "CLOTHING_STORE", "COLLOQUIAL_AREA", "CONTINENT", "COUNTRY", "DRUGSTORE", "ELECTRONICS_STORE", "ESTABLISHMENT", "FINANCE", "FLOOR", "FOOD", "GENERAL_CONTRACTOR", "HEALTH", "HOME_GOODS_STORE", "INSURANCE_AGENCY", "INTERSECTION", "LAWYER", "LIGHT_RAIL_STATION", "LOCALITY", "LOCAL_GOVERNMENT_OFFICE", "LODGING", "MEAL_DELIVERY", "MEAL_TAKEAWAY", "MOVING_COMPANY", "MUSEUM", "NATURAL_FEATURE", "NEIGHBORHOOD", "PAINTER", "PARK", "PARKING", "PLUS_CODE", "POINT_OF_INTEREST", "POLITICAL", "POSTAL_CODE", "POSTAL_CODE_PREFIX", "POSTAL_CODE_SUFFIX", "POSTAL_TOWN", "POST_BOX", "PREMISE", "PRIMARY_SCHOOL", "REAL_ESTATE_AGENCY", "RESTAURANT", "ROOM", "ROUTE", "RV_PARK", "SCHOOL", "SECONDARY_SCHOOL", "SHOPPING_MALL", "STORAGE", "STORE", "STREET_ADDRESS", "STREET_NUMBER", "SUBLOCALITY", "SUBLOCALITY_LEVEL_1", "SUBLOCALITY_LEVEL_2", "SUBLOCALITY_LEVEL_3", "SUBLOCALITY_LEVEL_4", "SUBLOCALITY_LEVEL_5", "SUBPREMISE", "SUBWAY_STATION", "TOURIST_ATTRACTION", "TOWN_SQUARE", "TRAIN_STATION", "TRANSIT_STATION", "TRAVEL_AGENCY", "UNKNOWN", "WARD"]  # noqa: E501
        if not set(types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._types = types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddressComponent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddressComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

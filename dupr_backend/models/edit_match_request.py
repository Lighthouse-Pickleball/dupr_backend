# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt
from dupr_backend.models.edit_score_request import EditScoreRequest

class EditMatchRequest(BaseModel):
    """
    EditMatchRequest
    """
    bracket_id: Optional[StrictInt] = Field(None, alias="bracketId")
    is_forfeited: Optional[StrictBool] = Field(None, alias="isForfeited")
    league_match_id: Optional[StrictInt] = Field(None, alias="leagueMatchId")
    match_date: date = Field(..., alias="matchDate")
    match_id: StrictInt = Field(..., alias="matchId")
    team1_score: EditScoreRequest = Field(..., alias="team1Score")
    team2_score: EditScoreRequest = Field(..., alias="team2Score")
    __properties = ["bracketId", "isForfeited", "leagueMatchId", "matchDate", "matchId", "team1Score", "team2Score"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EditMatchRequest:
        """Create an instance of EditMatchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of team1_score
        if self.team1_score:
            _dict['team1Score'] = self.team1_score.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team2_score
        if self.team2_score:
            _dict['team2Score'] = self.team2_score.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EditMatchRequest:
        """Create an instance of EditMatchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EditMatchRequest.parse_obj(obj)

        _obj = EditMatchRequest.parse_obj({
            "bracket_id": obj.get("bracketId"),
            "is_forfeited": obj.get("isForfeited"),
            "league_match_id": obj.get("leagueMatchId"),
            "match_date": obj.get("matchDate"),
            "match_id": obj.get("matchId"),
            "team1_score": EditScoreRequest.from_dict(obj.get("team1Score")) if obj.get("team1Score") is not None else None,
            "team2_score": EditScoreRequest.from_dict(obj.get("team2Score")) if obj.get("team2Score") is not None else None
        })
        return _obj



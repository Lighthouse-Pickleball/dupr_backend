# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class VerifiedMatchRequest(BaseModel):
    """
    VerifiedMatchRequest
    """
    club_id: Optional[StrictInt] = Field(None, alias="clubId")
    event_date: Optional[StrictStr] = Field(None, alias="eventDate")
    event_name: Optional[StrictStr] = Field(None, alias="eventName")
    location: Optional[StrictStr] = None
    team_a_player1: Optional[StrictStr] = Field(None, alias="teamAPlayer1")
    team_a_player1_id: Optional[StrictStr] = Field(None, alias="teamAPlayer1ID")
    team_a_player2: Optional[StrictStr] = Field(None, alias="teamAPlayer2")
    team_a_player2_id: Optional[StrictStr] = Field(None, alias="teamAPlayer2ID")
    team_a_points_game1: Optional[StrictInt] = Field(None, alias="teamAPointsGame1")
    team_a_points_game2: Optional[StrictInt] = Field(None, alias="teamAPointsGame2")
    team_a_points_game3: Optional[StrictInt] = Field(None, alias="teamAPointsGame3")
    team_a_points_game4: Optional[StrictInt] = Field(None, alias="teamAPointsGame4")
    team_a_points_game5: Optional[StrictInt] = Field(None, alias="teamAPointsGame5")
    team_b_player1: Optional[StrictStr] = Field(None, alias="teamBPlayer1")
    team_b_player1_id: Optional[StrictStr] = Field(None, alias="teamBPlayer1ID")
    team_b_player2: Optional[StrictStr] = Field(None, alias="teamBPlayer2")
    team_b_player2_id: Optional[StrictStr] = Field(None, alias="teamBPlayer2ID")
    team_b_points_game1: Optional[StrictInt] = Field(None, alias="teamBPointsGame1")
    team_b_points_game2: Optional[StrictInt] = Field(None, alias="teamBPointsGame2")
    team_b_points_game3: Optional[StrictInt] = Field(None, alias="teamBPointsGame3")
    team_b_points_game4: Optional[StrictInt] = Field(None, alias="teamBPointsGame4")
    team_b_points_game5: Optional[StrictInt] = Field(None, alias="teamBPointsGame5")
    tournament_name: Optional[StrictStr] = Field(None, alias="tournamentName")
    venue: Optional[StrictStr] = None
    winning_team: Optional[StrictStr] = Field(None, alias="winningTeam")
    __properties = ["clubId", "eventDate", "eventName", "location", "teamAPlayer1", "teamAPlayer1ID", "teamAPlayer2", "teamAPlayer2ID", "teamAPointsGame1", "teamAPointsGame2", "teamAPointsGame3", "teamAPointsGame4", "teamAPointsGame5", "teamBPlayer1", "teamBPlayer1ID", "teamBPlayer2", "teamBPlayer2ID", "teamBPointsGame1", "teamBPointsGame2", "teamBPointsGame3", "teamBPointsGame4", "teamBPointsGame5", "tournamentName", "venue", "winningTeam"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VerifiedMatchRequest:
        """Create an instance of VerifiedMatchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VerifiedMatchRequest:
        """Create an instance of VerifiedMatchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VerifiedMatchRequest.parse_obj(obj)

        _obj = VerifiedMatchRequest.parse_obj({
            "club_id": obj.get("clubId"),
            "event_date": obj.get("eventDate"),
            "event_name": obj.get("eventName"),
            "location": obj.get("location"),
            "team_a_player1": obj.get("teamAPlayer1"),
            "team_a_player1_id": obj.get("teamAPlayer1ID"),
            "team_a_player2": obj.get("teamAPlayer2"),
            "team_a_player2_id": obj.get("teamAPlayer2ID"),
            "team_a_points_game1": obj.get("teamAPointsGame1"),
            "team_a_points_game2": obj.get("teamAPointsGame2"),
            "team_a_points_game3": obj.get("teamAPointsGame3"),
            "team_a_points_game4": obj.get("teamAPointsGame4"),
            "team_a_points_game5": obj.get("teamAPointsGame5"),
            "team_b_player1": obj.get("teamBPlayer1"),
            "team_b_player1_id": obj.get("teamBPlayer1ID"),
            "team_b_player2": obj.get("teamBPlayer2"),
            "team_b_player2_id": obj.get("teamBPlayer2ID"),
            "team_b_points_game1": obj.get("teamBPointsGame1"),
            "team_b_points_game2": obj.get("teamBPointsGame2"),
            "team_b_points_game3": obj.get("teamBPointsGame3"),
            "team_b_points_game4": obj.get("teamBPointsGame4"),
            "team_b_points_game5": obj.get("teamBPointsGame5"),
            "tournament_name": obj.get("tournamentName"),
            "venue": obj.get("venue"),
            "winning_team": obj.get("winningTeam")
        })
        return _obj



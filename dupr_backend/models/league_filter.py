# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LeagueFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'city': 'list[str]',
        'duration_status': 'list[str]',
        'elimination': 'list[str]',
        'event_format': 'list[str]',
        'player_group': 'list[str]',
        'registration_status': 'list[str]',
        'skill_level': 'SkillLevelFilter',
        'status': 'list[str]'
    }

    attribute_map = {
        'city': 'city',
        'duration_status': 'durationStatus',
        'elimination': 'elimination',
        'event_format': 'eventFormat',
        'player_group': 'playerGroup',
        'registration_status': 'registrationStatus',
        'skill_level': 'skillLevel',
        'status': 'status'
    }

    def __init__(self, city=None, duration_status=None, elimination=None, event_format=None, player_group=None, registration_status=None, skill_level=None, status=None):  # noqa: E501
        """LeagueFilter - a model defined in Swagger"""  # noqa: E501
        self._city = None
        self._duration_status = None
        self._elimination = None
        self._event_format = None
        self._player_group = None
        self._registration_status = None
        self._skill_level = None
        self._status = None
        self.discriminator = None
        if city is not None:
            self.city = city
        if duration_status is not None:
            self.duration_status = duration_status
        if elimination is not None:
            self.elimination = elimination
        if event_format is not None:
            self.event_format = event_format
        if player_group is not None:
            self.player_group = player_group
        if registration_status is not None:
            self.registration_status = registration_status
        if skill_level is not None:
            self.skill_level = skill_level
        if status is not None:
            self.status = status

    @property
    def city(self):
        """Gets the city of this LeagueFilter.  # noqa: E501


        :return: The city of this LeagueFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this LeagueFilter.


        :param city: The city of this LeagueFilter.  # noqa: E501
        :type: list[str]
        """

        self._city = city

    @property
    def duration_status(self):
        """Gets the duration_status of this LeagueFilter.  # noqa: E501


        :return: The duration_status of this LeagueFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._duration_status

    @duration_status.setter
    def duration_status(self, duration_status):
        """Sets the duration_status of this LeagueFilter.


        :param duration_status: The duration_status of this LeagueFilter.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if not set(duration_status).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `duration_status` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(duration_status) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._duration_status = duration_status

    @property
    def elimination(self):
        """Gets the elimination of this LeagueFilter.  # noqa: E501


        :return: The elimination of this LeagueFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._elimination

    @elimination.setter
    def elimination(self, elimination):
        """Sets the elimination of this LeagueFilter.


        :param elimination: The elimination of this LeagueFilter.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["COMPASS", "DOUBLE", "DOUBLE_PREVENTED", "FLEX", "ROUND_ROBIN", "SINGLE"]  # noqa: E501
        if not set(elimination).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `elimination` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(elimination) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._elimination = elimination

    @property
    def event_format(self):
        """Gets the event_format of this LeagueFilter.  # noqa: E501


        :return: The event_format of this LeagueFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._event_format

    @event_format.setter
    def event_format(self, event_format):
        """Sets the event_format of this LeagueFilter.


        :param event_format: The event_format of this LeagueFilter.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["DOUBLES", "SINGLES"]  # noqa: E501
        if not set(event_format).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `event_format` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(event_format) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._event_format = event_format

    @property
    def player_group(self):
        """Gets the player_group of this LeagueFilter.  # noqa: E501


        :return: The player_group of this LeagueFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._player_group

    @player_group.setter
    def player_group(self, player_group):
        """Sets the player_group of this LeagueFilter.


        :param player_group: The player_group of this LeagueFilter.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["COED", "MEN", "MIXED", "OPEN", "WOMEN"]  # noqa: E501
        if not set(player_group).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `player_group` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(player_group) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._player_group = player_group

    @property
    def registration_status(self):
        """Gets the registration_status of this LeagueFilter.  # noqa: E501


        :return: The registration_status of this LeagueFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._registration_status

    @registration_status.setter
    def registration_status(self, registration_status):
        """Sets the registration_status of this LeagueFilter.


        :param registration_status: The registration_status of this LeagueFilter.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["CLOSED", "NOT_STARTED", "OPEN"]  # noqa: E501
        if not set(registration_status).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `registration_status` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(registration_status) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._registration_status = registration_status

    @property
    def skill_level(self):
        """Gets the skill_level of this LeagueFilter.  # noqa: E501


        :return: The skill_level of this LeagueFilter.  # noqa: E501
        :rtype: SkillLevelFilter
        """
        return self._skill_level

    @skill_level.setter
    def skill_level(self, skill_level):
        """Sets the skill_level of this LeagueFilter.


        :param skill_level: The skill_level of this LeagueFilter.  # noqa: E501
        :type: SkillLevelFilter
        """

        self._skill_level = skill_level

    @property
    def status(self):
        """Gets the status of this LeagueFilter.  # noqa: E501


        :return: The status of this LeagueFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LeagueFilter.


        :param status: The status of this LeagueFilter.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if not set(status).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `status` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(status) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LeagueFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LeagueFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

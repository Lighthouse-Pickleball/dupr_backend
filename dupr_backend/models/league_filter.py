# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from dupr_backend.models.skill_level_filter import SkillLevelFilter

class LeagueFilter(BaseModel):
    """
    LeagueFilter
    """
    city: Optional[conlist(StrictStr)] = None
    duration_status: Optional[conlist(StrictStr)] = Field(None, alias="durationStatus")
    elimination: Optional[conlist(StrictStr)] = None
    event_format: Optional[conlist(StrictStr)] = Field(None, alias="eventFormat")
    player_group: Optional[conlist(StrictStr)] = Field(None, alias="playerGroup")
    registration_status: Optional[conlist(StrictStr)] = Field(None, alias="registrationStatus")
    skill_level: Optional[SkillLevelFilter] = Field(None, alias="skillLevel")
    status: Optional[conlist(StrictStr)] = None
    __properties = ["city", "durationStatus", "elimination", "eventFormat", "playerGroup", "registrationStatus", "skillLevel", "status"]

    @validator('duration_status')
    def duration_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING'):
                raise ValueError("each list item must be one of ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING')")
        return value

    @validator('elimination')
    def elimination_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('COMPASS', 'DOUBLE', 'DOUBLE_PREVENTED', 'FLEX', 'ROUND_ROBIN', 'SINGLE'):
                raise ValueError("each list item must be one of ('COMPASS', 'DOUBLE', 'DOUBLE_PREVENTED', 'FLEX', 'ROUND_ROBIN', 'SINGLE')")
        return value

    @validator('event_format')
    def event_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('DOUBLES', 'SINGLES'):
                raise ValueError("each list item must be one of ('DOUBLES', 'SINGLES')")
        return value

    @validator('player_group')
    def player_group_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('COED', 'MEN', 'MIXED', 'OPEN', 'WOMEN'):
                raise ValueError("each list item must be one of ('COED', 'MEN', 'MIXED', 'OPEN', 'WOMEN')")
        return value

    @validator('registration_status')
    def registration_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('CLOSED', 'NOT_STARTED', 'OPEN'):
                raise ValueError("each list item must be one of ('CLOSED', 'NOT_STARTED', 'OPEN')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING'):
                raise ValueError("each list item must be one of ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LeagueFilter:
        """Create an instance of LeagueFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of skill_level
        if self.skill_level:
            _dict['skillLevel'] = self.skill_level.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LeagueFilter:
        """Create an instance of LeagueFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LeagueFilter.parse_obj(obj)

        _obj = LeagueFilter.parse_obj({
            "city": obj.get("city"),
            "duration_status": obj.get("durationStatus"),
            "elimination": obj.get("elimination"),
            "event_format": obj.get("eventFormat"),
            "player_group": obj.get("playerGroup"),
            "registration_status": obj.get("registrationStatus"),
            "skill_level": SkillLevelFilter.from_dict(obj.get("skillLevel")) if obj.get("skillLevel") is not None else None,
            "status": obj.get("status")
        })
        return _obj



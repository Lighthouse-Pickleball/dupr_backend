# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from dupr_backend.models.bracket_refund_request import BracketRefundRequest

class EventRefundRequest(BaseModel):
    """
    EventRefundRequest
    """
    brackets: Optional[conlist(BracketRefundRequest)] = None
    club_id: StrictInt = Field(..., alias="clubId")
    event_id: StrictInt = Field(..., alias="eventId")
    event_name: StrictStr = Field(..., alias="eventName")
    player_id: StrictInt = Field(..., alias="playerId")
    process_refund: StrictBool = Field(..., alias="processRefund")
    refund_amount: Union[StrictFloat, StrictInt] = Field(..., alias="refundAmount")
    __properties = ["brackets", "clubId", "eventId", "eventName", "playerId", "processRefund", "refundAmount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EventRefundRequest:
        """Create an instance of EventRefundRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in brackets (list)
        _items = []
        if self.brackets:
            for _item in self.brackets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['brackets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EventRefundRequest:
        """Create an instance of EventRefundRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EventRefundRequest.parse_obj(obj)

        _obj = EventRefundRequest.parse_obj({
            "brackets": [BracketRefundRequest.from_dict(_item) for _item in obj.get("brackets")] if obj.get("brackets") is not None else None,
            "club_id": obj.get("clubId"),
            "event_id": obj.get("eventId"),
            "event_name": obj.get("eventName"),
            "player_id": obj.get("playerId"),
            "process_refund": obj.get("processRefund"),
            "refund_amount": obj.get("refundAmount")
        })
        return _obj



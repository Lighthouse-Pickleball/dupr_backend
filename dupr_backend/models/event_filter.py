# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'distance': 'Distance',
        'division': 'str',
        'geo_point': 'GeoPoint',
        'name': 'str',
        'place_id': 'str',
        'statuses': 'list[str]',
        'type': 'str'
    }

    attribute_map = {
        'distance': 'distance',
        'division': 'division',
        'geo_point': 'geoPoint',
        'name': 'name',
        'place_id': 'placeId',
        'statuses': 'statuses',
        'type': 'type'
    }

    def __init__(self, distance=None, division=None, geo_point=None, name=None, place_id=None, statuses=None, type=None):  # noqa: E501
        """EventFilter - a model defined in Swagger"""  # noqa: E501
        self._distance = None
        self._division = None
        self._geo_point = None
        self._name = None
        self._place_id = None
        self._statuses = None
        self._type = None
        self.discriminator = None
        if distance is not None:
            self.distance = distance
        if division is not None:
            self.division = division
        if geo_point is not None:
            self.geo_point = geo_point
        if name is not None:
            self.name = name
        if place_id is not None:
            self.place_id = place_id
        if statuses is not None:
            self.statuses = statuses
        if type is not None:
            self.type = type

    @property
    def distance(self):
        """Gets the distance of this EventFilter.  # noqa: E501


        :return: The distance of this EventFilter.  # noqa: E501
        :rtype: Distance
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this EventFilter.


        :param distance: The distance of this EventFilter.  # noqa: E501
        :type: Distance
        """

        self._distance = distance

    @property
    def division(self):
        """Gets the division of this EventFilter.  # noqa: E501


        :return: The division of this EventFilter.  # noqa: E501
        :rtype: str
        """
        return self._division

    @division.setter
    def division(self, division):
        """Sets the division of this EventFilter.


        :param division: The division of this EventFilter.  # noqa: E501
        :type: str
        """
        allowed_values = ["DUPR12", "DUPR14", "DUPR16", "DUPR18", "DUPR20", "DUPR22", "DUPR_OPEN"]  # noqa: E501
        if division not in allowed_values:
            raise ValueError(
                "Invalid value for `division` ({0}), must be one of {1}"  # noqa: E501
                .format(division, allowed_values)
            )

        self._division = division

    @property
    def geo_point(self):
        """Gets the geo_point of this EventFilter.  # noqa: E501


        :return: The geo_point of this EventFilter.  # noqa: E501
        :rtype: GeoPoint
        """
        return self._geo_point

    @geo_point.setter
    def geo_point(self, geo_point):
        """Sets the geo_point of this EventFilter.


        :param geo_point: The geo_point of this EventFilter.  # noqa: E501
        :type: GeoPoint
        """

        self._geo_point = geo_point

    @property
    def name(self):
        """Gets the name of this EventFilter.  # noqa: E501


        :return: The name of this EventFilter.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventFilter.


        :param name: The name of this EventFilter.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def place_id(self):
        """Gets the place_id of this EventFilter.  # noqa: E501


        :return: The place_id of this EventFilter.  # noqa: E501
        :rtype: str
        """
        return self._place_id

    @place_id.setter
    def place_id(self, place_id):
        """Sets the place_id of this EventFilter.


        :param place_id: The place_id of this EventFilter.  # noqa: E501
        :type: str
        """

        self._place_id = place_id

    @property
    def statuses(self):
        """Gets the statuses of this EventFilter.  # noqa: E501


        :return: The statuses of this EventFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this EventFilter.


        :param statuses: The statuses of this EventFilter.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if not set(statuses).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `statuses` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(statuses) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._statuses = statuses

    @property
    def type(self):
        """Gets the type of this EventFilter.  # noqa: E501


        :return: The type of this EventFilter.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventFilter.


        :param type: The type of this EventFilter.  # noqa: E501
        :type: str
        """
        allowed_values = ["MARQUE", "SHOWDOWN", "STANDARD"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

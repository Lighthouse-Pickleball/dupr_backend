# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from dupr_backend.models.distance import Distance
from dupr_backend.models.geo_point import GeoPoint

class EventFilter(BaseModel):
    """
    EventFilter
    """
    distance: Optional[Distance] = None
    division: Optional[StrictStr] = None
    geo_point: Optional[GeoPoint] = Field(None, alias="geoPoint")
    name: Optional[StrictStr] = None
    place_id: Optional[StrictStr] = Field(None, alias="placeId")
    statuses: Optional[conlist(StrictStr)] = None
    type: Optional[StrictStr] = None
    __properties = ["distance", "division", "geoPoint", "name", "placeId", "statuses", "type"]

    @validator('division')
    def division_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('DUPR12', 'DUPR14', 'DUPR16', 'DUPR18', 'DUPR20', 'DUPR22', 'DUPR_OPEN'):
            raise ValueError("must be one of enum values ('DUPR12', 'DUPR14', 'DUPR16', 'DUPR18', 'DUPR20', 'DUPR22', 'DUPR_OPEN')")
        return value

    @validator('statuses')
    def statuses_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING'):
                raise ValueError("each list item must be one of ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING')")
        return value

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('MARQUE', 'SHOWDOWN', 'STANDARD'):
            raise ValueError("must be one of enum values ('MARQUE', 'SHOWDOWN', 'STANDARD')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EventFilter:
        """Create an instance of EventFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of distance
        if self.distance:
            _dict['distance'] = self.distance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geo_point
        if self.geo_point:
            _dict['geoPoint'] = self.geo_point.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EventFilter:
        """Create an instance of EventFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EventFilter.parse_obj(obj)

        _obj = EventFilter.parse_obj({
            "distance": Distance.from_dict(obj.get("distance")) if obj.get("distance") is not None else None,
            "division": obj.get("division"),
            "geo_point": GeoPoint.from_dict(obj.get("geoPoint")) if obj.get("geoPoint") is not None else None,
            "name": obj.get("name"),
            "place_id": obj.get("placeId"),
            "statuses": obj.get("statuses"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist

class ClubMemberManyResponse(BaseModel):
    """
    ClubMemberManyResponse
    """
    add_members_action_s3_url: Optional[StrictStr] = Field(None, alias="addMembersActionS3Url")
    in_valid_email: Optional[conlist(StrictStr)] = Field(None, alias="inValidEmail")
    invalid_email: StrictInt = Field(..., alias="invalidEmail")
    players_added: StrictInt = Field(..., alias="playersAdded")
    players_invited: StrictInt = Field(..., alias="playersInvited")
    valid_email: Optional[conlist(StrictStr)] = Field(None, alias="validEmail")
    __properties = ["addMembersActionS3Url", "inValidEmail", "invalidEmail", "playersAdded", "playersInvited", "validEmail"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClubMemberManyResponse:
        """Create an instance of ClubMemberManyResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClubMemberManyResponse:
        """Create an instance of ClubMemberManyResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClubMemberManyResponse.parse_obj(obj)

        _obj = ClubMemberManyResponse.parse_obj({
            "add_members_action_s3_url": obj.get("addMembersActionS3Url"),
            "in_valid_email": obj.get("inValidEmail"),
            "invalid_email": obj.get("invalidEmail"),
            "players_added": obj.get("playersAdded"),
            "players_invited": obj.get("playersInvited"),
            "valid_email": obj.get("validEmail")
        })
        return _obj



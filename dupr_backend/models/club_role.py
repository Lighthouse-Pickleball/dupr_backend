# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator

class ClubRole(BaseModel):
    """
    ClubRole
    """
    approval_status: StrictStr = Field(..., alias="approvalStatus")
    club_id: StrictInt = Field(..., alias="clubId")
    created: Optional[StrictStr] = None
    join_type: Optional[StrictStr] = Field(None, alias="joinType")
    request_by: Optional[StrictInt] = Field(None, alias="requestBy")
    role: StrictStr = Field(...)
    role_id: StrictInt = Field(..., alias="roleId")
    __properties = ["approvalStatus", "clubId", "created", "joinType", "requestBy", "role", "roleId"]

    @validator('approval_status')
    def approval_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('APPROVED', 'IN_REVIEW', 'PENDING', 'REJECTED'):
            raise ValueError("must be one of enum values ('APPROVED', 'IN_REVIEW', 'PENDING', 'REJECTED')")
        return value

    @validator('join_type')
    def join_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('INVITATION', 'INVITATION_CSV', 'PARTNER_INVITE', 'REQUEST'):
            raise ValueError("must be one of enum values ('INVITATION', 'INVITATION_CSV', 'PARTNER_INVITE', 'REQUEST')")
        return value

    @validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ADMIN', 'CAPTAIN', 'DIRECTOR', 'MANAGER', 'MARKETING_EXECUTIVE', 'ORGANIZER', 'PENDING_PLAYER', 'PLAYER', 'SUPPORT_EXECUTIVE'):
            raise ValueError("must be one of enum values ('ADMIN', 'CAPTAIN', 'DIRECTOR', 'MANAGER', 'MARKETING_EXECUTIVE', 'ORGANIZER', 'PENDING_PLAYER', 'PLAYER', 'SUPPORT_EXECUTIVE')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClubRole:
        """Create an instance of ClubRole from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClubRole:
        """Create an instance of ClubRole from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClubRole.parse_obj(obj)

        _obj = ClubRole.parse_obj({
            "approval_status": obj.get("approvalStatus"),
            "club_id": obj.get("clubId"),
            "created": obj.get("created"),
            "join_type": obj.get("joinType"),
            "request_by": obj.get("requestBy"),
            "role": obj.get("role"),
            "role_id": obj.get("roleId")
        })
        return _obj



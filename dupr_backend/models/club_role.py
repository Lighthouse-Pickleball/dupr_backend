# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClubRole(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'approval_status': 'str',
        'club_id': 'int',
        'created': 'str',
        'join_type': 'str',
        'request_by': 'int',
        'role': 'str',
        'role_id': 'int'
    }

    attribute_map = {
        'approval_status': 'approvalStatus',
        'club_id': 'clubId',
        'created': 'created',
        'join_type': 'joinType',
        'request_by': 'requestBy',
        'role': 'role',
        'role_id': 'roleId'
    }

    def __init__(self, approval_status=None, club_id=None, created=None, join_type=None, request_by=None, role=None, role_id=None):  # noqa: E501
        """ClubRole - a model defined in Swagger"""  # noqa: E501
        self._approval_status = None
        self._club_id = None
        self._created = None
        self._join_type = None
        self._request_by = None
        self._role = None
        self._role_id = None
        self.discriminator = None
        self.approval_status = approval_status
        self.club_id = club_id
        if created is not None:
            self.created = created
        if join_type is not None:
            self.join_type = join_type
        if request_by is not None:
            self.request_by = request_by
        self.role = role
        self.role_id = role_id

    @property
    def approval_status(self):
        """Gets the approval_status of this ClubRole.  # noqa: E501


        :return: The approval_status of this ClubRole.  # noqa: E501
        :rtype: str
        """
        return self._approval_status

    @approval_status.setter
    def approval_status(self, approval_status):
        """Sets the approval_status of this ClubRole.


        :param approval_status: The approval_status of this ClubRole.  # noqa: E501
        :type: str
        """
        if approval_status is None:
            raise ValueError("Invalid value for `approval_status`, must not be `None`")  # noqa: E501
        allowed_values = ["APPROVED", "IN_REVIEW", "PENDING", "REJECTED"]  # noqa: E501
        if approval_status not in allowed_values:
            raise ValueError(
                "Invalid value for `approval_status` ({0}), must be one of {1}"  # noqa: E501
                .format(approval_status, allowed_values)
            )

        self._approval_status = approval_status

    @property
    def club_id(self):
        """Gets the club_id of this ClubRole.  # noqa: E501


        :return: The club_id of this ClubRole.  # noqa: E501
        :rtype: int
        """
        return self._club_id

    @club_id.setter
    def club_id(self, club_id):
        """Sets the club_id of this ClubRole.


        :param club_id: The club_id of this ClubRole.  # noqa: E501
        :type: int
        """
        if club_id is None:
            raise ValueError("Invalid value for `club_id`, must not be `None`")  # noqa: E501

        self._club_id = club_id

    @property
    def created(self):
        """Gets the created of this ClubRole.  # noqa: E501


        :return: The created of this ClubRole.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ClubRole.


        :param created: The created of this ClubRole.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def join_type(self):
        """Gets the join_type of this ClubRole.  # noqa: E501


        :return: The join_type of this ClubRole.  # noqa: E501
        :rtype: str
        """
        return self._join_type

    @join_type.setter
    def join_type(self, join_type):
        """Sets the join_type of this ClubRole.


        :param join_type: The join_type of this ClubRole.  # noqa: E501
        :type: str
        """
        allowed_values = ["INVITATION", "INVITATION_CSV", "PARTNER_INVITE", "REQUEST"]  # noqa: E501
        if join_type not in allowed_values:
            raise ValueError(
                "Invalid value for `join_type` ({0}), must be one of {1}"  # noqa: E501
                .format(join_type, allowed_values)
            )

        self._join_type = join_type

    @property
    def request_by(self):
        """Gets the request_by of this ClubRole.  # noqa: E501


        :return: The request_by of this ClubRole.  # noqa: E501
        :rtype: int
        """
        return self._request_by

    @request_by.setter
    def request_by(self, request_by):
        """Sets the request_by of this ClubRole.


        :param request_by: The request_by of this ClubRole.  # noqa: E501
        :type: int
        """

        self._request_by = request_by

    @property
    def role(self):
        """Gets the role of this ClubRole.  # noqa: E501


        :return: The role of this ClubRole.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ClubRole.


        :param role: The role of this ClubRole.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501
        allowed_values = ["ADMIN", "CAPTAIN", "DIRECTOR", "MANAGER", "MARKETING_EXECUTIVE", "ORGANIZER", "PENDING_PLAYER", "PLAYER", "SUPPORT_EXECUTIVE"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def role_id(self):
        """Gets the role_id of this ClubRole.  # noqa: E501


        :return: The role_id of this ClubRole.  # noqa: E501
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this ClubRole.


        :param role_id: The role_id of this ClubRole.  # noqa: E501
        :type: int
        """
        if role_id is None:
            raise ValueError("Invalid value for `role_id`, must not be `None`")  # noqa: E501

        self._role_id = role_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClubRole, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClubRole):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

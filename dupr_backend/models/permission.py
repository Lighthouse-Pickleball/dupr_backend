# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator

class Permission(BaseModel):
    """
    Permission
    """
    operations: Optional[conlist(StrictStr)] = None
    resource: StrictStr = Field(...)
    __properties = ["operations", "resource"]

    @validator('operations')
    def operations_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('ADD', 'ALL', 'BULK_ADD', 'DELETE', 'DETAIL', 'DOWNLOAD', 'INVITE', 'MERGE', 'MODIFY', 'NONE', 'REACTIVATE', 'REASSIGN', 'REPLACE', 'SEARCH', 'VERIFY', 'VIEW'):
                raise ValueError("each list item must be one of ('ADD', 'ALL', 'BULK_ADD', 'DELETE', 'DETAIL', 'DOWNLOAD', 'INVITE', 'MERGE', 'MODIFY', 'NONE', 'REACTIVATE', 'REASSIGN', 'REPLACE', 'SEARCH', 'VERIFY', 'VIEW')")
        return value

    @validator('resource')
    def resource_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('BRACKET', 'CLUB', 'CLUB_ASSISTANT_DIRECTOR', 'CLUB_CONTACT_INFO', 'CLUB_DIRECTOR_CONTACT_INFO', 'CLUB_LOGO', 'CLUB_MATCH', 'CLUB_MEMBERS', 'CLUB_MEMBER_INFO', 'CLUB_NAME', 'CLUB_ORGANIZER', 'CLUB_ORGANIZER_CONTACT_INFO', 'EVENT', 'INFORMATIVE_BANNER', 'MATCH', 'NONE', 'RATING', 'SUPER', 'USER', 'USER_ACCOUNT', 'USER_EMAIL', 'USER_ROLE', 'VERIFIED_MATCH'):
            raise ValueError("must be one of enum values ('BRACKET', 'CLUB', 'CLUB_ASSISTANT_DIRECTOR', 'CLUB_CONTACT_INFO', 'CLUB_DIRECTOR_CONTACT_INFO', 'CLUB_LOGO', 'CLUB_MATCH', 'CLUB_MEMBERS', 'CLUB_MEMBER_INFO', 'CLUB_NAME', 'CLUB_ORGANIZER', 'CLUB_ORGANIZER_CONTACT_INFO', 'EVENT', 'INFORMATIVE_BANNER', 'MATCH', 'NONE', 'RATING', 'SUPER', 'USER', 'USER_ACCOUNT', 'USER_EMAIL', 'USER_ROLE', 'VERIFIED_MATCH')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Permission:
        """Create an instance of Permission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Permission:
        """Create an instance of Permission from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Permission.parse_obj(obj)

        _obj = Permission.parse_obj({
            "operations": obj.get("operations"),
            "resource": obj.get("resource")
        })
        return _obj



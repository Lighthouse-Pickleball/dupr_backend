# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Permission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operations': 'list[str]',
        'resource': 'str'
    }

    attribute_map = {
        'operations': 'operations',
        'resource': 'resource'
    }

    def __init__(self, operations=None, resource=None):  # noqa: E501
        """Permission - a model defined in Swagger"""  # noqa: E501
        self._operations = None
        self._resource = None
        self.discriminator = None
        if operations is not None:
            self.operations = operations
        self.resource = resource

    @property
    def operations(self):
        """Gets the operations of this Permission.  # noqa: E501


        :return: The operations of this Permission.  # noqa: E501
        :rtype: list[str]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this Permission.


        :param operations: The operations of this Permission.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ADD", "ALL", "BULK_ADD", "DELETE", "DETAIL", "DOWNLOAD", "INVITE", "MERGE", "MODIFY", "NONE", "REACTIVATE", "REASSIGN", "REPLACE", "SEARCH", "VERIFY", "VIEW"]  # noqa: E501
        if not set(operations).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `operations` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(operations) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._operations = operations

    @property
    def resource(self):
        """Gets the resource of this Permission.  # noqa: E501


        :return: The resource of this Permission.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this Permission.


        :param resource: The resource of this Permission.  # noqa: E501
        :type: str
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")  # noqa: E501
        allowed_values = ["BRACKET", "CLUB", "CLUB_ASSISTANT_DIRECTOR", "CLUB_CONTACT_INFO", "CLUB_DIRECTOR_CONTACT_INFO", "CLUB_LOGO", "CLUB_MATCH", "CLUB_MEMBERS", "CLUB_MEMBER_INFO", "CLUB_NAME", "CLUB_ORGANIZER", "CLUB_ORGANIZER_CONTACT_INFO", "EVENT", "INFORMATIVE_BANNER", "MATCH", "NONE", "RATING", "SUPER", "USER", "USER_ACCOUNT", "USER_EMAIL", "USER_ROLE", "VERIFIED_MATCH"]  # noqa: E501
        if resource not in allowed_values:
            raise ValueError(
                "Invalid value for `resource` ({0}), must be one of {1}"  # noqa: E501
                .format(resource, allowed_values)
            )

        self._resource = resource

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Permission, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Permission):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

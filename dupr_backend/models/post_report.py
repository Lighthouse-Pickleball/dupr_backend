# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PostReport(BaseModel):
    """
    PostReport
    """ # noqa: E501
    count_report: StrictInt = Field(alias="countReport")
    created_at: StrictInt = Field(alias="createdAt")
    id: StrictStr
    note: Optional[StrictStr] = None
    report_reason: StrictStr = Field(alias="reportReason")
    report_type: StrictStr = Field(alias="reportType")
    reported_id: StrictStr = Field(alias="reportedId")
    reporter_id: StrictInt = Field(alias="reporterId")
    status: StrictStr
    updated_at: StrictInt = Field(alias="updatedAt")
    __properties: ClassVar[List[str]] = ["countReport", "createdAt", "id", "note", "reportReason", "reportType", "reportedId", "reporterId", "status", "updatedAt"]

    @field_validator('report_type')
    def report_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['COMMENT', 'POST']):
            raise ValueError("must be one of enum values ('COMMENT', 'POST')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['APPROVED', 'IN_REVIEW', 'PENDING', 'REJECTED']):
            raise ValueError("must be one of enum values ('APPROVED', 'IN_REVIEW', 'PENDING', 'REJECTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "countReport": obj.get("countReport"),
            "createdAt": obj.get("createdAt"),
            "id": obj.get("id"),
            "note": obj.get("note"),
            "reportReason": obj.get("reportReason"),
            "reportType": obj.get("reportType"),
            "reportedId": obj.get("reportedId"),
            "reporterId": obj.get("reporterId"),
            "status": obj.get("status"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj



# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator

class PostReport(BaseModel):
    """
    PostReport
    """
    count_report: StrictInt = Field(..., alias="countReport")
    created_at: StrictInt = Field(..., alias="createdAt")
    id: StrictStr = Field(...)
    note: Optional[StrictStr] = None
    report_reason: StrictStr = Field(..., alias="reportReason")
    report_type: StrictStr = Field(..., alias="reportType")
    reported_id: StrictStr = Field(..., alias="reportedId")
    reporter_id: StrictInt = Field(..., alias="reporterId")
    status: StrictStr = Field(...)
    updated_at: StrictInt = Field(..., alias="updatedAt")
    __properties = ["countReport", "createdAt", "id", "note", "reportReason", "reportType", "reportedId", "reporterId", "status", "updatedAt"]

    @validator('report_type')
    def report_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('COMMENT', 'POST'):
            raise ValueError("must be one of enum values ('COMMENT', 'POST')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('APPROVED', 'IN_REVIEW', 'PENDING', 'REJECTED'):
            raise ValueError("must be one of enum values ('APPROVED', 'IN_REVIEW', 'PENDING', 'REJECTED')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PostReport:
        """Create an instance of PostReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PostReport:
        """Create an instance of PostReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PostReport.parse_obj(obj)

        _obj = PostReport.parse_obj({
            "count_report": obj.get("countReport"),
            "created_at": obj.get("createdAt"),
            "id": obj.get("id"),
            "note": obj.get("note"),
            "report_reason": obj.get("reportReason"),
            "report_type": obj.get("reportType"),
            "reported_id": obj.get("reportedId"),
            "reporter_id": obj.get("reporterId"),
            "status": obj.get("status"),
            "updated_at": obj.get("updatedAt")
        })
        return _obj



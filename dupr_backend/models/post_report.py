# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count_report': 'int',
        'created_at': 'int',
        'id': 'str',
        'note': 'str',
        'report_reason': 'str',
        'report_type': 'str',
        'reported_id': 'str',
        'reporter_id': 'int',
        'status': 'str',
        'updated_at': 'int'
    }

    attribute_map = {
        'count_report': 'countReport',
        'created_at': 'createdAt',
        'id': 'id',
        'note': 'note',
        'report_reason': 'reportReason',
        'report_type': 'reportType',
        'reported_id': 'reportedId',
        'reporter_id': 'reporterId',
        'status': 'status',
        'updated_at': 'updatedAt'
    }

    def __init__(self, count_report=None, created_at=None, id=None, note=None, report_reason=None, report_type=None, reported_id=None, reporter_id=None, status=None, updated_at=None):  # noqa: E501
        """PostReport - a model defined in Swagger"""  # noqa: E501
        self._count_report = None
        self._created_at = None
        self._id = None
        self._note = None
        self._report_reason = None
        self._report_type = None
        self._reported_id = None
        self._reporter_id = None
        self._status = None
        self._updated_at = None
        self.discriminator = None
        self.count_report = count_report
        self.created_at = created_at
        self.id = id
        if note is not None:
            self.note = note
        self.report_reason = report_reason
        self.report_type = report_type
        self.reported_id = reported_id
        self.reporter_id = reporter_id
        self.status = status
        self.updated_at = updated_at

    @property
    def count_report(self):
        """Gets the count_report of this PostReport.  # noqa: E501


        :return: The count_report of this PostReport.  # noqa: E501
        :rtype: int
        """
        return self._count_report

    @count_report.setter
    def count_report(self, count_report):
        """Sets the count_report of this PostReport.


        :param count_report: The count_report of this PostReport.  # noqa: E501
        :type: int
        """
        if count_report is None:
            raise ValueError("Invalid value for `count_report`, must not be `None`")  # noqa: E501

        self._count_report = count_report

    @property
    def created_at(self):
        """Gets the created_at of this PostReport.  # noqa: E501


        :return: The created_at of this PostReport.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PostReport.


        :param created_at: The created_at of this PostReport.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this PostReport.  # noqa: E501


        :return: The id of this PostReport.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PostReport.


        :param id: The id of this PostReport.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def note(self):
        """Gets the note of this PostReport.  # noqa: E501


        :return: The note of this PostReport.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this PostReport.


        :param note: The note of this PostReport.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def report_reason(self):
        """Gets the report_reason of this PostReport.  # noqa: E501


        :return: The report_reason of this PostReport.  # noqa: E501
        :rtype: str
        """
        return self._report_reason

    @report_reason.setter
    def report_reason(self, report_reason):
        """Sets the report_reason of this PostReport.


        :param report_reason: The report_reason of this PostReport.  # noqa: E501
        :type: str
        """
        if report_reason is None:
            raise ValueError("Invalid value for `report_reason`, must not be `None`")  # noqa: E501

        self._report_reason = report_reason

    @property
    def report_type(self):
        """Gets the report_type of this PostReport.  # noqa: E501


        :return: The report_type of this PostReport.  # noqa: E501
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this PostReport.


        :param report_type: The report_type of this PostReport.  # noqa: E501
        :type: str
        """
        if report_type is None:
            raise ValueError("Invalid value for `report_type`, must not be `None`")  # noqa: E501
        allowed_values = ["COMMENT", "POST"]  # noqa: E501
        if report_type not in allowed_values:
            raise ValueError(
                "Invalid value for `report_type` ({0}), must be one of {1}"  # noqa: E501
                .format(report_type, allowed_values)
            )

        self._report_type = report_type

    @property
    def reported_id(self):
        """Gets the reported_id of this PostReport.  # noqa: E501


        :return: The reported_id of this PostReport.  # noqa: E501
        :rtype: str
        """
        return self._reported_id

    @reported_id.setter
    def reported_id(self, reported_id):
        """Sets the reported_id of this PostReport.


        :param reported_id: The reported_id of this PostReport.  # noqa: E501
        :type: str
        """
        if reported_id is None:
            raise ValueError("Invalid value for `reported_id`, must not be `None`")  # noqa: E501

        self._reported_id = reported_id

    @property
    def reporter_id(self):
        """Gets the reporter_id of this PostReport.  # noqa: E501


        :return: The reporter_id of this PostReport.  # noqa: E501
        :rtype: int
        """
        return self._reporter_id

    @reporter_id.setter
    def reporter_id(self, reporter_id):
        """Sets the reporter_id of this PostReport.


        :param reporter_id: The reporter_id of this PostReport.  # noqa: E501
        :type: int
        """
        if reporter_id is None:
            raise ValueError("Invalid value for `reporter_id`, must not be `None`")  # noqa: E501

        self._reporter_id = reporter_id

    @property
    def status(self):
        """Gets the status of this PostReport.  # noqa: E501


        :return: The status of this PostReport.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PostReport.


        :param status: The status of this PostReport.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["APPROVED", "IN_REVIEW", "PENDING", "REJECTED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this PostReport.  # noqa: E501


        :return: The updated_at of this PostReport.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PostReport.


        :param updated_at: The updated_at of this PostReport.  # noqa: E501
        :type: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt
from dupr_backend.models.participant import Participant

class RegistrationResponse(BaseModel):
    """
    RegistrationResponse
    """
    event_refunded_amount: Union[StrictFloat, StrictInt] = Field(..., alias="eventRefundedAmount")
    is_participant1: StrictBool = Field(..., alias="isParticipant1")
    is_wait_listed: StrictBool = Field(..., alias="isWaitListed")
    player1: Optional[Participant] = None
    player2: Optional[Participant] = None
    registration_id: StrictInt = Field(..., alias="registrationId")
    __properties = ["eventRefundedAmount", "isParticipant1", "isWaitListed", "player1", "player2", "registrationId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RegistrationResponse:
        """Create an instance of RegistrationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of player1
        if self.player1:
            _dict['player1'] = self.player1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of player2
        if self.player2:
            _dict['player2'] = self.player2.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RegistrationResponse:
        """Create an instance of RegistrationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RegistrationResponse.parse_obj(obj)

        _obj = RegistrationResponse.parse_obj({
            "event_refunded_amount": obj.get("eventRefundedAmount"),
            "is_participant1": obj.get("isParticipant1"),
            "is_wait_listed": obj.get("isWaitListed"),
            "player1": Participant.from_dict(obj.get("player1")) if obj.get("player1") is not None else None,
            "player2": Participant.from_dict(obj.get("player2")) if obj.get("player2") is not None else None,
            "registration_id": obj.get("registrationId")
        })
        return _obj



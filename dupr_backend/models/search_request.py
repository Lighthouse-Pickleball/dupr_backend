# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conint, conlist, validator
from dupr_backend.models.exclude_club_members import ExcludeClubMembers
from dupr_backend.models.search_filter import SearchFilter

class SearchRequest(BaseModel):
    """
    SearchRequest
    """
    bracket_id: Optional[StrictInt] = Field(None, alias="bracketId")
    exclude: Optional[conlist(StrictInt)] = None
    exclude_club_members: Optional[ExcludeClubMembers] = Field(None, alias="excludeClubMembers")
    filter: SearchFilter = Field(...)
    include_unclaimed_players: Optional[StrictBool] = Field(None, alias="includeUnclaimedPlayers")
    limit: conint(strict=True, le=25) = Field(...)
    offset: StrictInt = Field(...)
    page_source: Optional[StrictStr] = Field(None, alias="pageSource")
    query: StrictStr = Field(...)
    verified_email: Optional[StrictBool] = Field(None, alias="verifiedEmail")
    __properties = ["bracketId", "exclude", "excludeClubMembers", "filter", "includeUnclaimedPlayers", "limit", "offset", "pageSource", "query", "verifiedEmail"]

    @validator('page_source')
    def page_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('LD_ADD_PARTICIPANT'):
            raise ValueError("must be one of enum values ('LD_ADD_PARTICIPANT')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SearchRequest:
        """Create an instance of SearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of exclude_club_members
        if self.exclude_club_members:
            _dict['excludeClubMembers'] = self.exclude_club_members.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SearchRequest:
        """Create an instance of SearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SearchRequest.parse_obj(obj)

        _obj = SearchRequest.parse_obj({
            "bracket_id": obj.get("bracketId"),
            "exclude": obj.get("exclude"),
            "exclude_club_members": ExcludeClubMembers.from_dict(obj.get("excludeClubMembers")) if obj.get("excludeClubMembers") is not None else None,
            "filter": SearchFilter.from_dict(obj.get("filter")) if obj.get("filter") is not None else None,
            "include_unclaimed_players": obj.get("includeUnclaimedPlayers"),
            "limit": obj.get("limit"),
            "offset": obj.get("offset"),
            "page_source": obj.get("pageSource"),
            "query": obj.get("query"),
            "verified_email": obj.get("verifiedEmail")
        })
        return _obj



# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt
from dupr_backend.models.league_teams_res import LeagueTeamsRes

class SeedMatchRes(BaseModel):
    """
    SeedMatchRes
    """
    bye: Optional[StrictBool] = None
    match_serial: Optional[StrictInt] = Field(None, alias="matchSerial")
    serial: StrictInt = Field(...)
    team1: Optional[LeagueTeamsRes] = None
    team2: Optional[LeagueTeamsRes] = None
    __properties = ["bye", "matchSerial", "serial", "team1", "team2"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SeedMatchRes:
        """Create an instance of SeedMatchRes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of team1
        if self.team1:
            _dict['team1'] = self.team1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team2
        if self.team2:
            _dict['team2'] = self.team2.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SeedMatchRes:
        """Create an instance of SeedMatchRes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SeedMatchRes.parse_obj(obj)

        _obj = SeedMatchRes.parse_obj({
            "bye": obj.get("bye"),
            "match_serial": obj.get("matchSerial"),
            "serial": obj.get("serial"),
            "team1": LeagueTeamsRes.from_dict(obj.get("team1")) if obj.get("team1") is not None else None,
            "team2": LeagueTeamsRes.from_dict(obj.get("team2")) if obj.get("team2") is not None else None
        })
        return _obj



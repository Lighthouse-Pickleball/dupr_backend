# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AdjustRatingRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'doubles': 'float',
        'doubles_verified': 'float',
        'dupr_id': 'str',
        'email': 'str',
        'reason': 'str',
        'singles': 'float',
        'singles_verified': 'float',
        'user_id': 'int'
    }

    attribute_map = {
        'doubles': 'doubles',
        'doubles_verified': 'doublesVerified',
        'dupr_id': 'duprId',
        'email': 'email',
        'reason': 'reason',
        'singles': 'singles',
        'singles_verified': 'singlesVerified',
        'user_id': 'userId'
    }

    def __init__(self, doubles=None, doubles_verified=None, dupr_id=None, email=None, reason=None, singles=None, singles_verified=None, user_id=None):  # noqa: E501
        """AdjustRatingRequest - a model defined in Swagger"""  # noqa: E501
        self._doubles = None
        self._doubles_verified = None
        self._dupr_id = None
        self._email = None
        self._reason = None
        self._singles = None
        self._singles_verified = None
        self._user_id = None
        self.discriminator = None
        if doubles is not None:
            self.doubles = doubles
        if doubles_verified is not None:
            self.doubles_verified = doubles_verified
        if dupr_id is not None:
            self.dupr_id = dupr_id
        if email is not None:
            self.email = email
        self.reason = reason
        if singles is not None:
            self.singles = singles
        if singles_verified is not None:
            self.singles_verified = singles_verified
        if user_id is not None:
            self.user_id = user_id

    @property
    def doubles(self):
        """Gets the doubles of this AdjustRatingRequest.  # noqa: E501


        :return: The doubles of this AdjustRatingRequest.  # noqa: E501
        :rtype: float
        """
        return self._doubles

    @doubles.setter
    def doubles(self, doubles):
        """Sets the doubles of this AdjustRatingRequest.


        :param doubles: The doubles of this AdjustRatingRequest.  # noqa: E501
        :type: float
        """

        self._doubles = doubles

    @property
    def doubles_verified(self):
        """Gets the doubles_verified of this AdjustRatingRequest.  # noqa: E501


        :return: The doubles_verified of this AdjustRatingRequest.  # noqa: E501
        :rtype: float
        """
        return self._doubles_verified

    @doubles_verified.setter
    def doubles_verified(self, doubles_verified):
        """Sets the doubles_verified of this AdjustRatingRequest.


        :param doubles_verified: The doubles_verified of this AdjustRatingRequest.  # noqa: E501
        :type: float
        """

        self._doubles_verified = doubles_verified

    @property
    def dupr_id(self):
        """Gets the dupr_id of this AdjustRatingRequest.  # noqa: E501


        :return: The dupr_id of this AdjustRatingRequest.  # noqa: E501
        :rtype: str
        """
        return self._dupr_id

    @dupr_id.setter
    def dupr_id(self, dupr_id):
        """Sets the dupr_id of this AdjustRatingRequest.


        :param dupr_id: The dupr_id of this AdjustRatingRequest.  # noqa: E501
        :type: str
        """

        self._dupr_id = dupr_id

    @property
    def email(self):
        """Gets the email of this AdjustRatingRequest.  # noqa: E501


        :return: The email of this AdjustRatingRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AdjustRatingRequest.


        :param email: The email of this AdjustRatingRequest.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def reason(self):
        """Gets the reason of this AdjustRatingRequest.  # noqa: E501


        :return: The reason of this AdjustRatingRequest.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this AdjustRatingRequest.


        :param reason: The reason of this AdjustRatingRequest.  # noqa: E501
        :type: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")  # noqa: E501

        self._reason = reason

    @property
    def singles(self):
        """Gets the singles of this AdjustRatingRequest.  # noqa: E501


        :return: The singles of this AdjustRatingRequest.  # noqa: E501
        :rtype: float
        """
        return self._singles

    @singles.setter
    def singles(self, singles):
        """Sets the singles of this AdjustRatingRequest.


        :param singles: The singles of this AdjustRatingRequest.  # noqa: E501
        :type: float
        """

        self._singles = singles

    @property
    def singles_verified(self):
        """Gets the singles_verified of this AdjustRatingRequest.  # noqa: E501


        :return: The singles_verified of this AdjustRatingRequest.  # noqa: E501
        :rtype: float
        """
        return self._singles_verified

    @singles_verified.setter
    def singles_verified(self, singles_verified):
        """Sets the singles_verified of this AdjustRatingRequest.


        :param singles_verified: The singles_verified of this AdjustRatingRequest.  # noqa: E501
        :type: float
        """

        self._singles_verified = singles_verified

    @property
    def user_id(self):
        """Gets the user_id of this AdjustRatingRequest.  # noqa: E501


        :return: The user_id of this AdjustRatingRequest.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AdjustRatingRequest.


        :param user_id: The user_id of this AdjustRatingRequest.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdjustRatingRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdjustRatingRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

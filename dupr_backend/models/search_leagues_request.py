# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchLeaguesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filters': 'LeagueFilter',
        'is_near_me': 'bool',
        'lat': 'float',
        'limit': 'int',
        'lng': 'float',
        'offset': 'int',
        'query': 'str',
        'radius_in_meters': 'float'
    }

    attribute_map = {
        'filters': 'filters',
        'is_near_me': 'isNearMe',
        'lat': 'lat',
        'limit': 'limit',
        'lng': 'lng',
        'offset': 'offset',
        'query': 'query',
        'radius_in_meters': 'radiusInMeters'
    }

    def __init__(self, filters=None, is_near_me=None, lat=None, limit=None, lng=None, offset=None, query=None, radius_in_meters=None):  # noqa: E501
        """SearchLeaguesRequest - a model defined in Swagger"""  # noqa: E501
        self._filters = None
        self._is_near_me = None
        self._lat = None
        self._limit = None
        self._lng = None
        self._offset = None
        self._query = None
        self._radius_in_meters = None
        self.discriminator = None
        if filters is not None:
            self.filters = filters
        if is_near_me is not None:
            self.is_near_me = is_near_me
        if lat is not None:
            self.lat = lat
        self.limit = limit
        if lng is not None:
            self.lng = lng
        self.offset = offset
        self.query = query
        if radius_in_meters is not None:
            self.radius_in_meters = radius_in_meters

    @property
    def filters(self):
        """Gets the filters of this SearchLeaguesRequest.  # noqa: E501


        :return: The filters of this SearchLeaguesRequest.  # noqa: E501
        :rtype: LeagueFilter
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this SearchLeaguesRequest.


        :param filters: The filters of this SearchLeaguesRequest.  # noqa: E501
        :type: LeagueFilter
        """

        self._filters = filters

    @property
    def is_near_me(self):
        """Gets the is_near_me of this SearchLeaguesRequest.  # noqa: E501


        :return: The is_near_me of this SearchLeaguesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_near_me

    @is_near_me.setter
    def is_near_me(self, is_near_me):
        """Sets the is_near_me of this SearchLeaguesRequest.


        :param is_near_me: The is_near_me of this SearchLeaguesRequest.  # noqa: E501
        :type: bool
        """

        self._is_near_me = is_near_me

    @property
    def lat(self):
        """Gets the lat of this SearchLeaguesRequest.  # noqa: E501


        :return: The lat of this SearchLeaguesRequest.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this SearchLeaguesRequest.


        :param lat: The lat of this SearchLeaguesRequest.  # noqa: E501
        :type: float
        """

        self._lat = lat

    @property
    def limit(self):
        """Gets the limit of this SearchLeaguesRequest.  # noqa: E501


        :return: The limit of this SearchLeaguesRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SearchLeaguesRequest.


        :param limit: The limit of this SearchLeaguesRequest.  # noqa: E501
        :type: int
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")  # noqa: E501

        self._limit = limit

    @property
    def lng(self):
        """Gets the lng of this SearchLeaguesRequest.  # noqa: E501


        :return: The lng of this SearchLeaguesRequest.  # noqa: E501
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this SearchLeaguesRequest.


        :param lng: The lng of this SearchLeaguesRequest.  # noqa: E501
        :type: float
        """

        self._lng = lng

    @property
    def offset(self):
        """Gets the offset of this SearchLeaguesRequest.  # noqa: E501


        :return: The offset of this SearchLeaguesRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this SearchLeaguesRequest.


        :param offset: The offset of this SearchLeaguesRequest.  # noqa: E501
        :type: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")  # noqa: E501

        self._offset = offset

    @property
    def query(self):
        """Gets the query of this SearchLeaguesRequest.  # noqa: E501


        :return: The query of this SearchLeaguesRequest.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SearchLeaguesRequest.


        :param query: The query of this SearchLeaguesRequest.  # noqa: E501
        :type: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")  # noqa: E501

        self._query = query

    @property
    def radius_in_meters(self):
        """Gets the radius_in_meters of this SearchLeaguesRequest.  # noqa: E501


        :return: The radius_in_meters of this SearchLeaguesRequest.  # noqa: E501
        :rtype: float
        """
        return self._radius_in_meters

    @radius_in_meters.setter
    def radius_in_meters(self, radius_in_meters):
        """Sets the radius_in_meters of this SearchLeaguesRequest.


        :param radius_in_meters: The radius_in_meters of this SearchLeaguesRequest.  # noqa: E501
        :type: float
        """

        self._radius_in_meters = radius_in_meters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchLeaguesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchLeaguesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PlayerProfileRequest(BaseModel):
    """
    PlayerProfileRequest
    """ # noqa: E501
    address_id: Optional[StrictInt] = Field(default=None, alias="addressId")
    apparel_brand: Optional[StrictStr] = Field(default=None, alias="apparelBrand")
    birthdate: Optional[date] = None
    default_rating: Optional[StrictStr] = Field(default=None, alias="defaultRating")
    display_username: Optional[StrictBool] = Field(default=None, alias="displayUsername")
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    full_name: StrictStr = Field(alias="fullName")
    gender: Optional[StrictStr] = None
    hand: Optional[StrictStr] = None
    is_valid_phone: Optional[StrictBool] = Field(default=None, alias="isValidPhone")
    iso_code: Optional[StrictStr] = Field(default=None, alias="isoCode")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    media_id: Optional[StrictInt] = Field(default=None, alias="mediaId")
    paddle_brand: Optional[StrictStr] = Field(default=None, alias="paddleBrand")
    phone: Optional[StrictStr] = None
    place_id: Optional[StrictStr] = Field(default=None, alias="placeId")
    preferred_ball: Optional[StrictStr] = Field(default=None, alias="preferredBall")
    preferred_side: Optional[StrictStr] = Field(default=None, alias="preferredSide")
    shoe_brand: Optional[StrictStr] = Field(default=None, alias="shoeBrand")
    username: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["addressId", "apparelBrand", "birthdate", "defaultRating", "displayUsername", "firstName", "fullName", "gender", "hand", "isValidPhone", "isoCode", "lastName", "mediaId", "paddleBrand", "phone", "placeId", "preferredBall", "preferredSide", "shoeBrand", "username"]

    @field_validator('default_rating')
    def default_rating_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DOUBLES', 'SINGLES']):
            raise ValueError("must be one of enum values ('DOUBLES', 'SINGLES')")
        return value

    @field_validator('gender')
    def gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FEMALE', 'MALE']):
            raise ValueError("must be one of enum values ('FEMALE', 'MALE')")
        return value

    @field_validator('hand')
    def hand_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BOTH', 'LEFT', 'NONE', 'RIGHT']):
            raise ValueError("must be one of enum values ('BOTH', 'LEFT', 'NONE', 'RIGHT')")
        return value

    @field_validator('preferred_side')
    def preferred_side_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EITHER', 'LEFT', 'RIGHT']):
            raise ValueError("must be one of enum values ('EITHER', 'LEFT', 'RIGHT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlayerProfileRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlayerProfileRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addressId": obj.get("addressId"),
            "apparelBrand": obj.get("apparelBrand"),
            "birthdate": obj.get("birthdate"),
            "defaultRating": obj.get("defaultRating"),
            "displayUsername": obj.get("displayUsername"),
            "firstName": obj.get("firstName"),
            "fullName": obj.get("fullName"),
            "gender": obj.get("gender"),
            "hand": obj.get("hand"),
            "isValidPhone": obj.get("isValidPhone"),
            "isoCode": obj.get("isoCode"),
            "lastName": obj.get("lastName"),
            "mediaId": obj.get("mediaId"),
            "paddleBrand": obj.get("paddleBrand"),
            "phone": obj.get("phone"),
            "placeId": obj.get("placeId"),
            "preferredBall": obj.get("preferredBall"),
            "preferredSide": obj.get("preferredSide"),
            "shoeBrand": obj.get("shoeBrand"),
            "username": obj.get("username")
        })
        return _obj



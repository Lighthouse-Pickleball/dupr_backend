# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlayerInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'initial_rating': 'float',
        'player_no': 'int',
        'rating_change': 'float',
        'simulated_rating': 'float'
    }

    attribute_map = {
        'id': 'id',
        'initial_rating': 'initialRating',
        'player_no': 'playerNo',
        'rating_change': 'ratingChange',
        'simulated_rating': 'simulatedRating'
    }

    def __init__(self, id=None, initial_rating=None, player_no=None, rating_change=None, simulated_rating=None):  # noqa: E501
        """PlayerInfo - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._initial_rating = None
        self._player_no = None
        self._rating_change = None
        self._simulated_rating = None
        self.discriminator = None
        self.id = id
        if initial_rating is not None:
            self.initial_rating = initial_rating
        self.player_no = player_no
        if rating_change is not None:
            self.rating_change = rating_change
        if simulated_rating is not None:
            self.simulated_rating = simulated_rating

    @property
    def id(self):
        """Gets the id of this PlayerInfo.  # noqa: E501


        :return: The id of this PlayerInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlayerInfo.


        :param id: The id of this PlayerInfo.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def initial_rating(self):
        """Gets the initial_rating of this PlayerInfo.  # noqa: E501


        :return: The initial_rating of this PlayerInfo.  # noqa: E501
        :rtype: float
        """
        return self._initial_rating

    @initial_rating.setter
    def initial_rating(self, initial_rating):
        """Sets the initial_rating of this PlayerInfo.


        :param initial_rating: The initial_rating of this PlayerInfo.  # noqa: E501
        :type: float
        """

        self._initial_rating = initial_rating

    @property
    def player_no(self):
        """Gets the player_no of this PlayerInfo.  # noqa: E501


        :return: The player_no of this PlayerInfo.  # noqa: E501
        :rtype: int
        """
        return self._player_no

    @player_no.setter
    def player_no(self, player_no):
        """Sets the player_no of this PlayerInfo.


        :param player_no: The player_no of this PlayerInfo.  # noqa: E501
        :type: int
        """
        if player_no is None:
            raise ValueError("Invalid value for `player_no`, must not be `None`")  # noqa: E501

        self._player_no = player_no

    @property
    def rating_change(self):
        """Gets the rating_change of this PlayerInfo.  # noqa: E501


        :return: The rating_change of this PlayerInfo.  # noqa: E501
        :rtype: float
        """
        return self._rating_change

    @rating_change.setter
    def rating_change(self, rating_change):
        """Sets the rating_change of this PlayerInfo.


        :param rating_change: The rating_change of this PlayerInfo.  # noqa: E501
        :type: float
        """

        self._rating_change = rating_change

    @property
    def simulated_rating(self):
        """Gets the simulated_rating of this PlayerInfo.  # noqa: E501


        :return: The simulated_rating of this PlayerInfo.  # noqa: E501
        :rtype: float
        """
        return self._simulated_rating

    @simulated_rating.setter
    def simulated_rating(self, simulated_rating):
        """Sets the simulated_rating of this PlayerInfo.


        :param simulated_rating: The simulated_rating of this PlayerInfo.  # noqa: E501
        :type: float
        """

        self._simulated_rating = simulated_rating

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlayerInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlayerInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

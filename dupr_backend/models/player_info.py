# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class PlayerInfo(BaseModel):
    """
    PlayerInfo
    """
    id: StrictInt = Field(...)
    initial_rating: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="initialRating")
    player_no: StrictInt = Field(..., alias="playerNo")
    rating_change: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="ratingChange")
    simulated_rating: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="simulatedRating")
    __properties = ["id", "initialRating", "playerNo", "ratingChange", "simulatedRating"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlayerInfo:
        """Create an instance of PlayerInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlayerInfo:
        """Create an instance of PlayerInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlayerInfo.parse_obj(obj)

        _obj = PlayerInfo.parse_obj({
            "id": obj.get("id"),
            "initial_rating": obj.get("initialRating"),
            "player_no": obj.get("playerNo"),
            "rating_change": obj.get("ratingChange"),
            "simulated_rating": obj.get("simulatedRating")
        })
        return _obj



# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateBannerRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'banner_id': 'int',
        'content_id': 'int',
        'description': 'BannerContent',
        'end_date_time': 'datetime',
        'start_date_time': 'datetime',
        'status': 'str',
        'title': 'str'
    }

    attribute_map = {
        'banner_id': 'bannerId',
        'content_id': 'contentId',
        'description': 'description',
        'end_date_time': 'endDateTime',
        'start_date_time': 'startDateTime',
        'status': 'status',
        'title': 'title'
    }

    def __init__(self, banner_id=None, content_id=None, description=None, end_date_time=None, start_date_time=None, status=None, title=None):  # noqa: E501
        """CreateBannerRequest - a model defined in Swagger"""  # noqa: E501
        self._banner_id = None
        self._content_id = None
        self._description = None
        self._end_date_time = None
        self._start_date_time = None
        self._status = None
        self._title = None
        self.discriminator = None
        self.banner_id = banner_id
        self.content_id = content_id
        self.description = description
        if end_date_time is not None:
            self.end_date_time = end_date_time
        if start_date_time is not None:
            self.start_date_time = start_date_time
        self.status = status
        self.title = title

    @property
    def banner_id(self):
        """Gets the banner_id of this CreateBannerRequest.  # noqa: E501


        :return: The banner_id of this CreateBannerRequest.  # noqa: E501
        :rtype: int
        """
        return self._banner_id

    @banner_id.setter
    def banner_id(self, banner_id):
        """Sets the banner_id of this CreateBannerRequest.


        :param banner_id: The banner_id of this CreateBannerRequest.  # noqa: E501
        :type: int
        """
        if banner_id is None:
            raise ValueError("Invalid value for `banner_id`, must not be `None`")  # noqa: E501

        self._banner_id = banner_id

    @property
    def content_id(self):
        """Gets the content_id of this CreateBannerRequest.  # noqa: E501


        :return: The content_id of this CreateBannerRequest.  # noqa: E501
        :rtype: int
        """
        return self._content_id

    @content_id.setter
    def content_id(self, content_id):
        """Sets the content_id of this CreateBannerRequest.


        :param content_id: The content_id of this CreateBannerRequest.  # noqa: E501
        :type: int
        """
        if content_id is None:
            raise ValueError("Invalid value for `content_id`, must not be `None`")  # noqa: E501

        self._content_id = content_id

    @property
    def description(self):
        """Gets the description of this CreateBannerRequest.  # noqa: E501


        :return: The description of this CreateBannerRequest.  # noqa: E501
        :rtype: BannerContent
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateBannerRequest.


        :param description: The description of this CreateBannerRequest.  # noqa: E501
        :type: BannerContent
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def end_date_time(self):
        """Gets the end_date_time of this CreateBannerRequest.  # noqa: E501


        :return: The end_date_time of this CreateBannerRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this CreateBannerRequest.


        :param end_date_time: The end_date_time of this CreateBannerRequest.  # noqa: E501
        :type: datetime
        """

        self._end_date_time = end_date_time

    @property
    def start_date_time(self):
        """Gets the start_date_time of this CreateBannerRequest.  # noqa: E501


        :return: The start_date_time of this CreateBannerRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this CreateBannerRequest.


        :param start_date_time: The start_date_time of this CreateBannerRequest.  # noqa: E501
        :type: datetime
        """

        self._start_date_time = start_date_time

    @property
    def status(self):
        """Gets the status of this CreateBannerRequest.  # noqa: E501


        :return: The status of this CreateBannerRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateBannerRequest.


        :param status: The status of this CreateBannerRequest.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def title(self):
        """Gets the title of this CreateBannerRequest.  # noqa: E501


        :return: The title of this CreateBannerRequest.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CreateBannerRequest.


        :param title: The title of this CreateBannerRequest.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateBannerRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateBannerRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conint, validator

class UserSearchRequest(BaseModel):
    """
    UserSearchRequest
    """
    limit: conint(strict=True, le=25) = Field(...)
    offset: StrictInt = Field(...)
    query: StrictStr = Field(...)
    search_field: Optional[StrictStr] = Field(None, alias="searchField")
    __properties = ["limit", "offset", "query", "searchField"]

    @validator('search_field')
    def search_field_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('DUPR_ID', 'EMAIL', 'FULLNAME', 'PHONE'):
            raise ValueError("must be one of enum values ('DUPR_ID', 'EMAIL', 'FULLNAME', 'PHONE')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserSearchRequest:
        """Create an instance of UserSearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserSearchRequest:
        """Create an instance of UserSearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserSearchRequest.parse_obj(obj)

        _obj = UserSearchRequest.parse_obj({
            "limit": obj.get("limit"),
            "offset": obj.get("offset"),
            "query": obj.get("query"),
            "search_field": obj.get("searchField")
        })
        return _obj



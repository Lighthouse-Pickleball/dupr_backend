# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, conlist, validator
from dupr_backend.models.check_in_location import CheckInLocation
from dupr_backend.models.feed import Feed

class PostRequest(BaseModel):
    """
    PostRequest
    """
    actor: Optional[StrictInt] = None
    checkin: Optional[CheckInLocation] = None
    content: Optional[StrictStr] = None
    feed: Optional[Feed] = None
    hashtags: Optional[conlist(StrictStr)] = None
    images: Optional[conlist(StrictStr)] = None
    matches: Optional[conlist(StrictInt)] = None
    tags: Optional[conlist(StrictInt)] = None
    verb: Optional[StrictStr] = None
    __properties = ["actor", "checkin", "content", "feed", "hashtags", "images", "matches", "tags", "verb"]

    @validator('verb')
    def verb_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('MATCH', 'POST'):
            raise ValueError("must be one of enum values ('MATCH', 'POST')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PostRequest:
        """Create an instance of PostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of checkin
        if self.checkin:
            _dict['checkin'] = self.checkin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of feed
        if self.feed:
            _dict['feed'] = self.feed.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PostRequest:
        """Create an instance of PostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PostRequest.parse_obj(obj)

        _obj = PostRequest.parse_obj({
            "actor": obj.get("actor"),
            "checkin": CheckInLocation.from_dict(obj.get("checkin")) if obj.get("checkin") is not None else None,
            "content": obj.get("content"),
            "feed": Feed.from_dict(obj.get("feed")) if obj.get("feed") is not None else None,
            "hashtags": obj.get("hashtags"),
            "images": obj.get("images"),
            "matches": obj.get("matches"),
            "tags": obj.get("tags"),
            "verb": obj.get("verb")
        })
        return _obj



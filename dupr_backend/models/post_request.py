# coding: utf-8

"""
    DUPR Backend APIs

    Internal RESTful APIs to access DUPR ratings, users and provide matches.

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from dupr_backend.models.check_in_location import CheckInLocation
from dupr_backend.models.feed import Feed
from typing import Optional, Set
from typing_extensions import Self

class PostRequest(BaseModel):
    """
    PostRequest
    """ # noqa: E501
    actor: StrictInt
    feed: Feed
    verb: StrictStr
    content: StrictStr
    tags: List[StrictInt]
    hashtags: List[StrictStr]
    images: List[StrictStr]
    matches: List[StrictInt]
    checkin: CheckInLocation
    __properties: ClassVar[List[str]] = ["actor", "feed", "verb", "content", "tags", "hashtags", "images", "matches", "checkin"]

    @field_validator('verb')
    def verb_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['POST', 'MATCH']):
            raise ValueError("must be one of enum values ('POST', 'MATCH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of feed
        if self.feed:
            _dict['feed'] = self.feed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of checkin
        if self.checkin:
            _dict['checkin'] = self.checkin.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actor": obj.get("actor"),
            "feed": Feed.from_dict(obj["feed"]) if obj.get("feed") is not None else None,
            "verb": obj.get("verb"),
            "content": obj.get("content"),
            "tags": obj.get("tags"),
            "hashtags": obj.get("hashtags"),
            "images": obj.get("images"),
            "matches": obj.get("matches"),
            "checkin": CheckInLocation.from_dict(obj["checkin"]) if obj.get("checkin") is not None else None
        })
        return _obj



# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actor': 'int',
        'checkin': 'CheckInLocation',
        'content': 'str',
        'feed': 'Feed',
        'hashtags': 'list[str]',
        'images': 'list[str]',
        'matches': 'list[int]',
        'tags': 'list[int]',
        'verb': 'str'
    }

    attribute_map = {
        'actor': 'actor',
        'checkin': 'checkin',
        'content': 'content',
        'feed': 'feed',
        'hashtags': 'hashtags',
        'images': 'images',
        'matches': 'matches',
        'tags': 'tags',
        'verb': 'verb'
    }

    def __init__(self, actor=None, checkin=None, content=None, feed=None, hashtags=None, images=None, matches=None, tags=None, verb=None):  # noqa: E501
        """PostRequest - a model defined in Swagger"""  # noqa: E501
        self._actor = None
        self._checkin = None
        self._content = None
        self._feed = None
        self._hashtags = None
        self._images = None
        self._matches = None
        self._tags = None
        self._verb = None
        self.discriminator = None
        if actor is not None:
            self.actor = actor
        if checkin is not None:
            self.checkin = checkin
        if content is not None:
            self.content = content
        if feed is not None:
            self.feed = feed
        if hashtags is not None:
            self.hashtags = hashtags
        if images is not None:
            self.images = images
        if matches is not None:
            self.matches = matches
        if tags is not None:
            self.tags = tags
        if verb is not None:
            self.verb = verb

    @property
    def actor(self):
        """Gets the actor of this PostRequest.  # noqa: E501


        :return: The actor of this PostRequest.  # noqa: E501
        :rtype: int
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this PostRequest.


        :param actor: The actor of this PostRequest.  # noqa: E501
        :type: int
        """

        self._actor = actor

    @property
    def checkin(self):
        """Gets the checkin of this PostRequest.  # noqa: E501


        :return: The checkin of this PostRequest.  # noqa: E501
        :rtype: CheckInLocation
        """
        return self._checkin

    @checkin.setter
    def checkin(self, checkin):
        """Sets the checkin of this PostRequest.


        :param checkin: The checkin of this PostRequest.  # noqa: E501
        :type: CheckInLocation
        """

        self._checkin = checkin

    @property
    def content(self):
        """Gets the content of this PostRequest.  # noqa: E501


        :return: The content of this PostRequest.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this PostRequest.


        :param content: The content of this PostRequest.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def feed(self):
        """Gets the feed of this PostRequest.  # noqa: E501


        :return: The feed of this PostRequest.  # noqa: E501
        :rtype: Feed
        """
        return self._feed

    @feed.setter
    def feed(self, feed):
        """Sets the feed of this PostRequest.


        :param feed: The feed of this PostRequest.  # noqa: E501
        :type: Feed
        """

        self._feed = feed

    @property
    def hashtags(self):
        """Gets the hashtags of this PostRequest.  # noqa: E501


        :return: The hashtags of this PostRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._hashtags

    @hashtags.setter
    def hashtags(self, hashtags):
        """Sets the hashtags of this PostRequest.


        :param hashtags: The hashtags of this PostRequest.  # noqa: E501
        :type: list[str]
        """

        self._hashtags = hashtags

    @property
    def images(self):
        """Gets the images of this PostRequest.  # noqa: E501


        :return: The images of this PostRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this PostRequest.


        :param images: The images of this PostRequest.  # noqa: E501
        :type: list[str]
        """

        self._images = images

    @property
    def matches(self):
        """Gets the matches of this PostRequest.  # noqa: E501


        :return: The matches of this PostRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._matches

    @matches.setter
    def matches(self, matches):
        """Sets the matches of this PostRequest.


        :param matches: The matches of this PostRequest.  # noqa: E501
        :type: list[int]
        """

        self._matches = matches

    @property
    def tags(self):
        """Gets the tags of this PostRequest.  # noqa: E501


        :return: The tags of this PostRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PostRequest.


        :param tags: The tags of this PostRequest.  # noqa: E501
        :type: list[int]
        """

        self._tags = tags

    @property
    def verb(self):
        """Gets the verb of this PostRequest.  # noqa: E501


        :return: The verb of this PostRequest.  # noqa: E501
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """Sets the verb of this PostRequest.


        :param verb: The verb of this PostRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["MATCH", "POST"]  # noqa: E501
        if verb not in allowed_values:
            raise ValueError(
                "Invalid value for `verb` ({0}), must be one of {1}"  # noqa: E501
                .format(verb, allowed_values)
            )

        self._verb = verb

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

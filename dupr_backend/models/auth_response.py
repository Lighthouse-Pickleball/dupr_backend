# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr
from dupr_backend.models.user_response import UserResponse

class AuthResponse(BaseModel):
    """
    AuthResponse
    """
    access_token: StrictStr = Field(..., alias="accessToken")
    refresh_token: StrictStr = Field(..., alias="refreshToken")
    user: UserResponse = Field(...)
    __properties = ["accessToken", "refreshToken", "user"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AuthResponse:
        """Create an instance of AuthResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AuthResponse:
        """Create an instance of AuthResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AuthResponse.parse_obj(obj)

        _obj = AuthResponse.parse_obj({
            "access_token": obj.get("accessToken"),
            "refresh_token": obj.get("refreshToken"),
            "user": UserResponse.from_dict(obj.get("user")) if obj.get("user") is not None else None
        })
        return _obj



# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserSubscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'billing_period': 'str',
        'cost': 'float',
        'dupr_id': 'str',
        'is_active': 'bool',
        'renewal_date': 'str',
        'start_date': 'str',
        'user_id': 'int'
    }

    attribute_map = {
        'billing_period': 'billingPeriod',
        'cost': 'cost',
        'dupr_id': 'duprId',
        'is_active': 'isActive',
        'renewal_date': 'renewalDate',
        'start_date': 'startDate',
        'user_id': 'userId'
    }

    def __init__(self, billing_period=None, cost=None, dupr_id=None, is_active=None, renewal_date=None, start_date=None, user_id=None):  # noqa: E501
        """UserSubscription - a model defined in Swagger"""  # noqa: E501
        self._billing_period = None
        self._cost = None
        self._dupr_id = None
        self._is_active = None
        self._renewal_date = None
        self._start_date = None
        self._user_id = None
        self.discriminator = None
        self.billing_period = billing_period
        self.cost = cost
        self.dupr_id = dupr_id
        self.is_active = is_active
        self.renewal_date = renewal_date
        self.start_date = start_date
        self.user_id = user_id

    @property
    def billing_period(self):
        """Gets the billing_period of this UserSubscription.  # noqa: E501


        :return: The billing_period of this UserSubscription.  # noqa: E501
        :rtype: str
        """
        return self._billing_period

    @billing_period.setter
    def billing_period(self, billing_period):
        """Sets the billing_period of this UserSubscription.


        :param billing_period: The billing_period of this UserSubscription.  # noqa: E501
        :type: str
        """
        if billing_period is None:
            raise ValueError("Invalid value for `billing_period`, must not be `None`")  # noqa: E501

        self._billing_period = billing_period

    @property
    def cost(self):
        """Gets the cost of this UserSubscription.  # noqa: E501


        :return: The cost of this UserSubscription.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this UserSubscription.


        :param cost: The cost of this UserSubscription.  # noqa: E501
        :type: float
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")  # noqa: E501

        self._cost = cost

    @property
    def dupr_id(self):
        """Gets the dupr_id of this UserSubscription.  # noqa: E501


        :return: The dupr_id of this UserSubscription.  # noqa: E501
        :rtype: str
        """
        return self._dupr_id

    @dupr_id.setter
    def dupr_id(self, dupr_id):
        """Sets the dupr_id of this UserSubscription.


        :param dupr_id: The dupr_id of this UserSubscription.  # noqa: E501
        :type: str
        """
        if dupr_id is None:
            raise ValueError("Invalid value for `dupr_id`, must not be `None`")  # noqa: E501

        self._dupr_id = dupr_id

    @property
    def is_active(self):
        """Gets the is_active of this UserSubscription.  # noqa: E501


        :return: The is_active of this UserSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this UserSubscription.


        :param is_active: The is_active of this UserSubscription.  # noqa: E501
        :type: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    @property
    def renewal_date(self):
        """Gets the renewal_date of this UserSubscription.  # noqa: E501


        :return: The renewal_date of this UserSubscription.  # noqa: E501
        :rtype: str
        """
        return self._renewal_date

    @renewal_date.setter
    def renewal_date(self, renewal_date):
        """Sets the renewal_date of this UserSubscription.


        :param renewal_date: The renewal_date of this UserSubscription.  # noqa: E501
        :type: str
        """
        if renewal_date is None:
            raise ValueError("Invalid value for `renewal_date`, must not be `None`")  # noqa: E501

        self._renewal_date = renewal_date

    @property
    def start_date(self):
        """Gets the start_date of this UserSubscription.  # noqa: E501


        :return: The start_date of this UserSubscription.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this UserSubscription.


        :param start_date: The start_date of this UserSubscription.  # noqa: E501
        :type: str
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def user_id(self):
        """Gets the user_id of this UserSubscription.  # noqa: E501


        :return: The user_id of this UserSubscription.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserSubscription.


        :param user_id: The user_id of this UserSubscription.  # noqa: E501
        :type: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserSubscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSubscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddressResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_line': 'str',
        'create': 'str',
        'formatted_address': 'str',
        'id': 'int',
        'latitude': 'float',
        'longitude': 'float',
        'place_id': 'str',
        'precision': 'str',
        'short_address': 'str',
        'status': 'str',
        'types': 'str'
    }

    attribute_map = {
        'address_line': 'addressLine',
        'create': 'create',
        'formatted_address': 'formattedAddress',
        'id': 'id',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'place_id': 'placeId',
        'precision': 'precision',
        'short_address': 'shortAddress',
        'status': 'status',
        'types': 'types'
    }

    def __init__(self, address_line=None, create=None, formatted_address=None, id=None, latitude=None, longitude=None, place_id=None, precision=None, short_address=None, status=None, types=None):  # noqa: E501
        """AddressResponse - a model defined in Swagger"""  # noqa: E501
        self._address_line = None
        self._create = None
        self._formatted_address = None
        self._id = None
        self._latitude = None
        self._longitude = None
        self._place_id = None
        self._precision = None
        self._short_address = None
        self._status = None
        self._types = None
        self.discriminator = None
        if address_line is not None:
            self.address_line = address_line
        self.create = create
        self.formatted_address = formatted_address
        if id is not None:
            self.id = id
        self.latitude = latitude
        self.longitude = longitude
        if place_id is not None:
            self.place_id = place_id
        if precision is not None:
            self.precision = precision
        self.short_address = short_address
        if status is not None:
            self.status = status
        if types is not None:
            self.types = types

    @property
    def address_line(self):
        """Gets the address_line of this AddressResponse.  # noqa: E501


        :return: The address_line of this AddressResponse.  # noqa: E501
        :rtype: str
        """
        return self._address_line

    @address_line.setter
    def address_line(self, address_line):
        """Sets the address_line of this AddressResponse.


        :param address_line: The address_line of this AddressResponse.  # noqa: E501
        :type: str
        """

        self._address_line = address_line

    @property
    def create(self):
        """Gets the create of this AddressResponse.  # noqa: E501


        :return: The create of this AddressResponse.  # noqa: E501
        :rtype: str
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this AddressResponse.


        :param create: The create of this AddressResponse.  # noqa: E501
        :type: str
        """
        if create is None:
            raise ValueError("Invalid value for `create`, must not be `None`")  # noqa: E501

        self._create = create

    @property
    def formatted_address(self):
        """Gets the formatted_address of this AddressResponse.  # noqa: E501


        :return: The formatted_address of this AddressResponse.  # noqa: E501
        :rtype: str
        """
        return self._formatted_address

    @formatted_address.setter
    def formatted_address(self, formatted_address):
        """Sets the formatted_address of this AddressResponse.


        :param formatted_address: The formatted_address of this AddressResponse.  # noqa: E501
        :type: str
        """
        if formatted_address is None:
            raise ValueError("Invalid value for `formatted_address`, must not be `None`")  # noqa: E501

        self._formatted_address = formatted_address

    @property
    def id(self):
        """Gets the id of this AddressResponse.  # noqa: E501


        :return: The id of this AddressResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AddressResponse.


        :param id: The id of this AddressResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def latitude(self):
        """Gets the latitude of this AddressResponse.  # noqa: E501


        :return: The latitude of this AddressResponse.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this AddressResponse.


        :param latitude: The latitude of this AddressResponse.  # noqa: E501
        :type: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")  # noqa: E501

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this AddressResponse.  # noqa: E501


        :return: The longitude of this AddressResponse.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this AddressResponse.


        :param longitude: The longitude of this AddressResponse.  # noqa: E501
        :type: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")  # noqa: E501

        self._longitude = longitude

    @property
    def place_id(self):
        """Gets the place_id of this AddressResponse.  # noqa: E501


        :return: The place_id of this AddressResponse.  # noqa: E501
        :rtype: str
        """
        return self._place_id

    @place_id.setter
    def place_id(self, place_id):
        """Sets the place_id of this AddressResponse.


        :param place_id: The place_id of this AddressResponse.  # noqa: E501
        :type: str
        """

        self._place_id = place_id

    @property
    def precision(self):
        """Gets the precision of this AddressResponse.  # noqa: E501


        :return: The precision of this AddressResponse.  # noqa: E501
        :rtype: str
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this AddressResponse.


        :param precision: The precision of this AddressResponse.  # noqa: E501
        :type: str
        """

        self._precision = precision

    @property
    def short_address(self):
        """Gets the short_address of this AddressResponse.  # noqa: E501


        :return: The short_address of this AddressResponse.  # noqa: E501
        :rtype: str
        """
        return self._short_address

    @short_address.setter
    def short_address(self, short_address):
        """Sets the short_address of this AddressResponse.


        :param short_address: The short_address of this AddressResponse.  # noqa: E501
        :type: str
        """
        if short_address is None:
            raise ValueError("Invalid value for `short_address`, must not be `None`")  # noqa: E501

        self._short_address = short_address

    @property
    def status(self):
        """Gets the status of this AddressResponse.  # noqa: E501


        :return: The status of this AddressResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AddressResponse.


        :param status: The status of this AddressResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def types(self):
        """Gets the types of this AddressResponse.  # noqa: E501


        :return: The types of this AddressResponse.  # noqa: E501
        :rtype: str
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this AddressResponse.


        :param types: The types of this AddressResponse.  # noqa: E501
        :type: str
        """

        self._types = types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddressResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddressResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

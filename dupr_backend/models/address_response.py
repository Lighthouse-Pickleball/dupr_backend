# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class AddressResponse(BaseModel):
    """
    AddressResponse
    """
    address_line: Optional[StrictStr] = Field(None, alias="addressLine")
    create: StrictStr = Field(...)
    formatted_address: StrictStr = Field(..., alias="formattedAddress")
    id: Optional[StrictInt] = None
    latitude: Union[StrictFloat, StrictInt] = Field(...)
    longitude: Union[StrictFloat, StrictInt] = Field(...)
    place_id: Optional[StrictStr] = Field(None, alias="placeId")
    precision: Optional[StrictStr] = None
    short_address: StrictStr = Field(..., alias="shortAddress")
    status: Optional[StrictStr] = None
    types: Optional[StrictStr] = None
    __properties = ["addressLine", "create", "formattedAddress", "id", "latitude", "longitude", "placeId", "precision", "shortAddress", "status", "types"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AddressResponse:
        """Create an instance of AddressResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AddressResponse:
        """Create an instance of AddressResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AddressResponse.parse_obj(obj)

        _obj = AddressResponse.parse_obj({
            "address_line": obj.get("addressLine"),
            "create": obj.get("create"),
            "formatted_address": obj.get("formattedAddress"),
            "id": obj.get("id"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "place_id": obj.get("placeId"),
            "precision": obj.get("precision"),
            "short_address": obj.get("shortAddress"),
            "status": obj.get("status"),
            "types": obj.get("types")
        })
        return _obj



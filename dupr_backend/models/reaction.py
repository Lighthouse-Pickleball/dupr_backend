# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Reaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activity_id': 'str',
        'id': 'str',
        'kind': 'str',
        'parent': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'activity_id': 'activity_id',
        'id': 'id',
        'kind': 'kind',
        'parent': 'parent',
        'user_id': 'user_id'
    }

    def __init__(self, activity_id=None, id=None, kind=None, parent=None, user_id=None):  # noqa: E501
        """Reaction - a model defined in Swagger"""  # noqa: E501
        self._activity_id = None
        self._id = None
        self._kind = None
        self._parent = None
        self._user_id = None
        self.discriminator = None
        if activity_id is not None:
            self.activity_id = activity_id
        if id is not None:
            self.id = id
        if kind is not None:
            self.kind = kind
        if parent is not None:
            self.parent = parent
        if user_id is not None:
            self.user_id = user_id

    @property
    def activity_id(self):
        """Gets the activity_id of this Reaction.  # noqa: E501


        :return: The activity_id of this Reaction.  # noqa: E501
        :rtype: str
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this Reaction.


        :param activity_id: The activity_id of this Reaction.  # noqa: E501
        :type: str
        """

        self._activity_id = activity_id

    @property
    def id(self):
        """Gets the id of this Reaction.  # noqa: E501


        :return: The id of this Reaction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Reaction.


        :param id: The id of this Reaction.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Reaction.  # noqa: E501


        :return: The kind of this Reaction.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Reaction.


        :param kind: The kind of this Reaction.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def parent(self):
        """Gets the parent of this Reaction.  # noqa: E501


        :return: The parent of this Reaction.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Reaction.


        :param parent: The parent of this Reaction.  # noqa: E501
        :type: str
        """

        self._parent = parent

    @property
    def user_id(self):
        """Gets the user_id of this Reaction.  # noqa: E501


        :return: The user_id of this Reaction.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Reaction.


        :param user_id: The user_id of this Reaction.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Reaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Reaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, conlist
from dupr_backend.models.register_user_request import RegisterUserRequest

class RegisterToBracketRequest(BaseModel):
    """
    RegisterToBracketRequest
    """
    bracket_id: StrictInt = Field(..., alias="bracketId")
    club_id: StrictInt = Field(..., alias="clubId")
    users: Optional[conlist(RegisterUserRequest)] = None
    __properties = ["bracketId", "clubId", "users"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RegisterToBracketRequest:
        """Create an instance of RegisterToBracketRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in users (list)
        _items = []
        if self.users:
            for _item in self.users:
                if _item:
                    _items.append(_item.to_dict())
            _dict['users'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RegisterToBracketRequest:
        """Create an instance of RegisterToBracketRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RegisterToBracketRequest.parse_obj(obj)

        _obj = RegisterToBracketRequest.parse_obj({
            "bracket_id": obj.get("bracketId"),
            "club_id": obj.get("clubId"),
            "users": [RegisterUserRequest.from_dict(_item) for _item in obj.get("users")] if obj.get("users") is not None else None
        })
        return _obj



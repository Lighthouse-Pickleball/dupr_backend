# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BracketRefundRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bracket_id': 'int',
        'bracket_name': 'str',
        'process_refund': 'bool',
        'refund_amount': 'float',
        'registration_id': 'int',
        'withdraw_player': 'bool'
    }

    attribute_map = {
        'bracket_id': 'bracketId',
        'bracket_name': 'bracketName',
        'process_refund': 'processRefund',
        'refund_amount': 'refundAmount',
        'registration_id': 'registrationId',
        'withdraw_player': 'withdrawPlayer'
    }

    def __init__(self, bracket_id=None, bracket_name=None, process_refund=None, refund_amount=None, registration_id=None, withdraw_player=None):  # noqa: E501
        """BracketRefundRequest - a model defined in Swagger"""  # noqa: E501
        self._bracket_id = None
        self._bracket_name = None
        self._process_refund = None
        self._refund_amount = None
        self._registration_id = None
        self._withdraw_player = None
        self.discriminator = None
        self.bracket_id = bracket_id
        self.bracket_name = bracket_name
        self.process_refund = process_refund
        self.refund_amount = refund_amount
        self.registration_id = registration_id
        self.withdraw_player = withdraw_player

    @property
    def bracket_id(self):
        """Gets the bracket_id of this BracketRefundRequest.  # noqa: E501


        :return: The bracket_id of this BracketRefundRequest.  # noqa: E501
        :rtype: int
        """
        return self._bracket_id

    @bracket_id.setter
    def bracket_id(self, bracket_id):
        """Sets the bracket_id of this BracketRefundRequest.


        :param bracket_id: The bracket_id of this BracketRefundRequest.  # noqa: E501
        :type: int
        """
        if bracket_id is None:
            raise ValueError("Invalid value for `bracket_id`, must not be `None`")  # noqa: E501

        self._bracket_id = bracket_id

    @property
    def bracket_name(self):
        """Gets the bracket_name of this BracketRefundRequest.  # noqa: E501


        :return: The bracket_name of this BracketRefundRequest.  # noqa: E501
        :rtype: str
        """
        return self._bracket_name

    @bracket_name.setter
    def bracket_name(self, bracket_name):
        """Sets the bracket_name of this BracketRefundRequest.


        :param bracket_name: The bracket_name of this BracketRefundRequest.  # noqa: E501
        :type: str
        """
        if bracket_name is None:
            raise ValueError("Invalid value for `bracket_name`, must not be `None`")  # noqa: E501

        self._bracket_name = bracket_name

    @property
    def process_refund(self):
        """Gets the process_refund of this BracketRefundRequest.  # noqa: E501


        :return: The process_refund of this BracketRefundRequest.  # noqa: E501
        :rtype: bool
        """
        return self._process_refund

    @process_refund.setter
    def process_refund(self, process_refund):
        """Sets the process_refund of this BracketRefundRequest.


        :param process_refund: The process_refund of this BracketRefundRequest.  # noqa: E501
        :type: bool
        """
        if process_refund is None:
            raise ValueError("Invalid value for `process_refund`, must not be `None`")  # noqa: E501

        self._process_refund = process_refund

    @property
    def refund_amount(self):
        """Gets the refund_amount of this BracketRefundRequest.  # noqa: E501


        :return: The refund_amount of this BracketRefundRequest.  # noqa: E501
        :rtype: float
        """
        return self._refund_amount

    @refund_amount.setter
    def refund_amount(self, refund_amount):
        """Sets the refund_amount of this BracketRefundRequest.


        :param refund_amount: The refund_amount of this BracketRefundRequest.  # noqa: E501
        :type: float
        """
        if refund_amount is None:
            raise ValueError("Invalid value for `refund_amount`, must not be `None`")  # noqa: E501

        self._refund_amount = refund_amount

    @property
    def registration_id(self):
        """Gets the registration_id of this BracketRefundRequest.  # noqa: E501


        :return: The registration_id of this BracketRefundRequest.  # noqa: E501
        :rtype: int
        """
        return self._registration_id

    @registration_id.setter
    def registration_id(self, registration_id):
        """Sets the registration_id of this BracketRefundRequest.


        :param registration_id: The registration_id of this BracketRefundRequest.  # noqa: E501
        :type: int
        """
        if registration_id is None:
            raise ValueError("Invalid value for `registration_id`, must not be `None`")  # noqa: E501

        self._registration_id = registration_id

    @property
    def withdraw_player(self):
        """Gets the withdraw_player of this BracketRefundRequest.  # noqa: E501


        :return: The withdraw_player of this BracketRefundRequest.  # noqa: E501
        :rtype: bool
        """
        return self._withdraw_player

    @withdraw_player.setter
    def withdraw_player(self, withdraw_player):
        """Sets the withdraw_player of this BracketRefundRequest.


        :param withdraw_player: The withdraw_player of this BracketRefundRequest.  # noqa: E501
        :type: bool
        """
        if withdraw_player is None:
            raise ValueError("Invalid value for `withdraw_player`, must not be `None`")  # noqa: E501

        self._withdraw_player = withdraw_player

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BracketRefundRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BracketRefundRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

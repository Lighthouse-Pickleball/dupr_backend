# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MatchUpdateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bracket_id': 'int',
        'confirmed': 'bool',
        'created': 'str',
        'event_date': 'str',
        'event_name': 'str',
        'league': 'str',
        'league_id': 'int',
        'league_match_id': 'int',
        'location': 'str',
        'match_id': 'int',
        'match_source': 'str',
        'reason': 'str',
        'requested_by': 'str',
        'teams': 'list[TeamUpdateRequest]',
        'venue': 'str'
    }

    attribute_map = {
        'bracket_id': 'bracketId',
        'confirmed': 'confirmed',
        'created': 'created',
        'event_date': 'eventDate',
        'event_name': 'eventName',
        'league': 'league',
        'league_id': 'leagueId',
        'league_match_id': 'leagueMatchId',
        'location': 'location',
        'match_id': 'matchId',
        'match_source': 'matchSource',
        'reason': 'reason',
        'requested_by': 'requestedBy',
        'teams': 'teams',
        'venue': 'venue'
    }

    def __init__(self, bracket_id=None, confirmed=None, created=None, event_date=None, event_name=None, league=None, league_id=None, league_match_id=None, location=None, match_id=None, match_source=None, reason=None, requested_by=None, teams=None, venue=None):  # noqa: E501
        """MatchUpdateRequest - a model defined in Swagger"""  # noqa: E501
        self._bracket_id = None
        self._confirmed = None
        self._created = None
        self._event_date = None
        self._event_name = None
        self._league = None
        self._league_id = None
        self._league_match_id = None
        self._location = None
        self._match_id = None
        self._match_source = None
        self._reason = None
        self._requested_by = None
        self._teams = None
        self._venue = None
        self.discriminator = None
        if bracket_id is not None:
            self.bracket_id = bracket_id
        if confirmed is not None:
            self.confirmed = confirmed
        if created is not None:
            self.created = created
        if event_date is not None:
            self.event_date = event_date
        if event_name is not None:
            self.event_name = event_name
        if league is not None:
            self.league = league
        if league_id is not None:
            self.league_id = league_id
        if league_match_id is not None:
            self.league_match_id = league_match_id
        if location is not None:
            self.location = location
        if match_id is not None:
            self.match_id = match_id
        if match_source is not None:
            self.match_source = match_source
        if reason is not None:
            self.reason = reason
        if requested_by is not None:
            self.requested_by = requested_by
        self.teams = teams
        if venue is not None:
            self.venue = venue

    @property
    def bracket_id(self):
        """Gets the bracket_id of this MatchUpdateRequest.  # noqa: E501


        :return: The bracket_id of this MatchUpdateRequest.  # noqa: E501
        :rtype: int
        """
        return self._bracket_id

    @bracket_id.setter
    def bracket_id(self, bracket_id):
        """Sets the bracket_id of this MatchUpdateRequest.


        :param bracket_id: The bracket_id of this MatchUpdateRequest.  # noqa: E501
        :type: int
        """

        self._bracket_id = bracket_id

    @property
    def confirmed(self):
        """Gets the confirmed of this MatchUpdateRequest.  # noqa: E501


        :return: The confirmed of this MatchUpdateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._confirmed

    @confirmed.setter
    def confirmed(self, confirmed):
        """Sets the confirmed of this MatchUpdateRequest.


        :param confirmed: The confirmed of this MatchUpdateRequest.  # noqa: E501
        :type: bool
        """

        self._confirmed = confirmed

    @property
    def created(self):
        """Gets the created of this MatchUpdateRequest.  # noqa: E501


        :return: The created of this MatchUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this MatchUpdateRequest.


        :param created: The created of this MatchUpdateRequest.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def event_date(self):
        """Gets the event_date of this MatchUpdateRequest.  # noqa: E501


        :return: The event_date of this MatchUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this MatchUpdateRequest.


        :param event_date: The event_date of this MatchUpdateRequest.  # noqa: E501
        :type: str
        """

        self._event_date = event_date

    @property
    def event_name(self):
        """Gets the event_name of this MatchUpdateRequest.  # noqa: E501


        :return: The event_name of this MatchUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this MatchUpdateRequest.


        :param event_name: The event_name of this MatchUpdateRequest.  # noqa: E501
        :type: str
        """

        self._event_name = event_name

    @property
    def league(self):
        """Gets the league of this MatchUpdateRequest.  # noqa: E501


        :return: The league of this MatchUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._league

    @league.setter
    def league(self, league):
        """Sets the league of this MatchUpdateRequest.


        :param league: The league of this MatchUpdateRequest.  # noqa: E501
        :type: str
        """

        self._league = league

    @property
    def league_id(self):
        """Gets the league_id of this MatchUpdateRequest.  # noqa: E501


        :return: The league_id of this MatchUpdateRequest.  # noqa: E501
        :rtype: int
        """
        return self._league_id

    @league_id.setter
    def league_id(self, league_id):
        """Sets the league_id of this MatchUpdateRequest.


        :param league_id: The league_id of this MatchUpdateRequest.  # noqa: E501
        :type: int
        """

        self._league_id = league_id

    @property
    def league_match_id(self):
        """Gets the league_match_id of this MatchUpdateRequest.  # noqa: E501


        :return: The league_match_id of this MatchUpdateRequest.  # noqa: E501
        :rtype: int
        """
        return self._league_match_id

    @league_match_id.setter
    def league_match_id(self, league_match_id):
        """Sets the league_match_id of this MatchUpdateRequest.


        :param league_match_id: The league_match_id of this MatchUpdateRequest.  # noqa: E501
        :type: int
        """

        self._league_match_id = league_match_id

    @property
    def location(self):
        """Gets the location of this MatchUpdateRequest.  # noqa: E501


        :return: The location of this MatchUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this MatchUpdateRequest.


        :param location: The location of this MatchUpdateRequest.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def match_id(self):
        """Gets the match_id of this MatchUpdateRequest.  # noqa: E501


        :return: The match_id of this MatchUpdateRequest.  # noqa: E501
        :rtype: int
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id):
        """Sets the match_id of this MatchUpdateRequest.


        :param match_id: The match_id of this MatchUpdateRequest.  # noqa: E501
        :type: int
        """

        self._match_id = match_id

    @property
    def match_source(self):
        """Gets the match_source of this MatchUpdateRequest.  # noqa: E501


        :return: The match_source of this MatchUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._match_source

    @match_source.setter
    def match_source(self, match_source):
        """Sets the match_source of this MatchUpdateRequest.


        :param match_source: The match_source of this MatchUpdateRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["CLUB", "DUPR", "EXTERNAL", "LEAGUE", "MANUAL", "PARTNER", "TOURNAMENT"]  # noqa: E501
        if match_source not in allowed_values:
            raise ValueError(
                "Invalid value for `match_source` ({0}), must be one of {1}"  # noqa: E501
                .format(match_source, allowed_values)
            )

        self._match_source = match_source

    @property
    def reason(self):
        """Gets the reason of this MatchUpdateRequest.  # noqa: E501


        :return: The reason of this MatchUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this MatchUpdateRequest.


        :param reason: The reason of this MatchUpdateRequest.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def requested_by(self):
        """Gets the requested_by of this MatchUpdateRequest.  # noqa: E501


        :return: The requested_by of this MatchUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._requested_by

    @requested_by.setter
    def requested_by(self, requested_by):
        """Sets the requested_by of this MatchUpdateRequest.


        :param requested_by: The requested_by of this MatchUpdateRequest.  # noqa: E501
        :type: str
        """

        self._requested_by = requested_by

    @property
    def teams(self):
        """Gets the teams of this MatchUpdateRequest.  # noqa: E501


        :return: The teams of this MatchUpdateRequest.  # noqa: E501
        :rtype: list[TeamUpdateRequest]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this MatchUpdateRequest.


        :param teams: The teams of this MatchUpdateRequest.  # noqa: E501
        :type: list[TeamUpdateRequest]
        """
        if teams is None:
            raise ValueError("Invalid value for `teams`, must not be `None`")  # noqa: E501

        self._teams = teams

    @property
    def venue(self):
        """Gets the venue of this MatchUpdateRequest.  # noqa: E501


        :return: The venue of this MatchUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this MatchUpdateRequest.


        :param venue: The venue of this MatchUpdateRequest.  # noqa: E501
        :type: str
        """

        self._venue = venue

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MatchUpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountStatusResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'details_submitted': 'bool',
        'errors': 'list[object]',
        'pending_requirement': 'bool'
    }

    attribute_map = {
        'account_id': 'accountId',
        'details_submitted': 'detailsSubmitted',
        'errors': 'errors',
        'pending_requirement': 'pendingRequirement'
    }

    def __init__(self, account_id=None, details_submitted=None, errors=None, pending_requirement=None):  # noqa: E501
        """AccountStatusResponse - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._details_submitted = None
        self._errors = None
        self._pending_requirement = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        self.details_submitted = details_submitted
        self.errors = errors
        self.pending_requirement = pending_requirement

    @property
    def account_id(self):
        """Gets the account_id of this AccountStatusResponse.  # noqa: E501


        :return: The account_id of this AccountStatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountStatusResponse.


        :param account_id: The account_id of this AccountStatusResponse.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def details_submitted(self):
        """Gets the details_submitted of this AccountStatusResponse.  # noqa: E501


        :return: The details_submitted of this AccountStatusResponse.  # noqa: E501
        :rtype: bool
        """
        return self._details_submitted

    @details_submitted.setter
    def details_submitted(self, details_submitted):
        """Sets the details_submitted of this AccountStatusResponse.


        :param details_submitted: The details_submitted of this AccountStatusResponse.  # noqa: E501
        :type: bool
        """
        if details_submitted is None:
            raise ValueError("Invalid value for `details_submitted`, must not be `None`")  # noqa: E501

        self._details_submitted = details_submitted

    @property
    def errors(self):
        """Gets the errors of this AccountStatusResponse.  # noqa: E501


        :return: The errors of this AccountStatusResponse.  # noqa: E501
        :rtype: list[object]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this AccountStatusResponse.


        :param errors: The errors of this AccountStatusResponse.  # noqa: E501
        :type: list[object]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")  # noqa: E501

        self._errors = errors

    @property
    def pending_requirement(self):
        """Gets the pending_requirement of this AccountStatusResponse.  # noqa: E501


        :return: The pending_requirement of this AccountStatusResponse.  # noqa: E501
        :rtype: bool
        """
        return self._pending_requirement

    @pending_requirement.setter
    def pending_requirement(self, pending_requirement):
        """Sets the pending_requirement of this AccountStatusResponse.


        :param pending_requirement: The pending_requirement of this AccountStatusResponse.  # noqa: E501
        :type: bool
        """
        if pending_requirement is None:
            raise ValueError("Invalid value for `pending_requirement`, must not be `None`")  # noqa: E501

        self._pending_requirement = pending_requirement

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountStatusResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountStatusResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

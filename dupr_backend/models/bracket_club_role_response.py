# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BracketClubRoleResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_club_member': 'bool',
        'role_id': 'int',
        'role_name': 'str'
    }

    attribute_map = {
        'is_club_member': 'isClubMember',
        'role_id': 'roleId',
        'role_name': 'roleName'
    }

    def __init__(self, is_club_member=None, role_id=None, role_name=None):  # noqa: E501
        """BracketClubRoleResponse - a model defined in Swagger"""  # noqa: E501
        self._is_club_member = None
        self._role_id = None
        self._role_name = None
        self.discriminator = None
        self.is_club_member = is_club_member
        self.role_id = role_id
        if role_name is not None:
            self.role_name = role_name

    @property
    def is_club_member(self):
        """Gets the is_club_member of this BracketClubRoleResponse.  # noqa: E501


        :return: The is_club_member of this BracketClubRoleResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_club_member

    @is_club_member.setter
    def is_club_member(self, is_club_member):
        """Sets the is_club_member of this BracketClubRoleResponse.


        :param is_club_member: The is_club_member of this BracketClubRoleResponse.  # noqa: E501
        :type: bool
        """
        if is_club_member is None:
            raise ValueError("Invalid value for `is_club_member`, must not be `None`")  # noqa: E501

        self._is_club_member = is_club_member

    @property
    def role_id(self):
        """Gets the role_id of this BracketClubRoleResponse.  # noqa: E501


        :return: The role_id of this BracketClubRoleResponse.  # noqa: E501
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this BracketClubRoleResponse.


        :param role_id: The role_id of this BracketClubRoleResponse.  # noqa: E501
        :type: int
        """
        if role_id is None:
            raise ValueError("Invalid value for `role_id`, must not be `None`")  # noqa: E501

        self._role_id = role_id

    @property
    def role_name(self):
        """Gets the role_name of this BracketClubRoleResponse.  # noqa: E501


        :return: The role_name of this BracketClubRoleResponse.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this BracketClubRoleResponse.


        :param role_name: The role_name of this BracketClubRoleResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["ADMIN", "CAPTAIN", "DIRECTOR", "MANAGER", "MARKETING_EXECUTIVE", "ORGANIZER", "PENDING_PLAYER", "PLAYER", "SUPPORT_EXECUTIVE"]  # noqa: E501
        if role_name not in allowed_values:
            raise ValueError(
                "Invalid value for `role_name` ({0}), must be one of {1}"  # noqa: E501
                .format(role_name, allowed_values)
            )

        self._role_name = role_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BracketClubRoleResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BracketClubRoleResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

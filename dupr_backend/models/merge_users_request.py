# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, validator

class MergeUsersRequest(BaseModel):
    """
    MergeUsersRequest
    """
    source: StrictStr = Field(...)
    source_type: StrictStr = Field(..., alias="sourceType")
    target: StrictStr = Field(...)
    target_type: StrictStr = Field(..., alias="targetType")
    __properties = ["source", "sourceType", "target", "targetType"]

    @validator('source_type')
    def source_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('DUPR_ID', 'EMAIL', 'OBFUSCATED_USER_ID'):
            raise ValueError("must be one of enum values ('DUPR_ID', 'EMAIL', 'OBFUSCATED_USER_ID')")
        return value

    @validator('target_type')
    def target_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('DUPR_ID', 'EMAIL', 'OBFUSCATED_USER_ID'):
            raise ValueError("must be one of enum values ('DUPR_ID', 'EMAIL', 'OBFUSCATED_USER_ID')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MergeUsersRequest:
        """Create an instance of MergeUsersRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MergeUsersRequest:
        """Create an instance of MergeUsersRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MergeUsersRequest.parse_obj(obj)

        _obj = MergeUsersRequest.parse_obj({
            "source": obj.get("source"),
            "source_type": obj.get("sourceType"),
            "target": obj.get("target"),
            "target_type": obj.get("targetType")
        })
        return _obj



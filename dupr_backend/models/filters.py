# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator

class Filters(BaseModel):
    """
    Filters
    """
    is_registered: Optional[StrictBool] = Field(None, alias="isRegistered")
    is_wait_listed: Optional[StrictBool] = Field(None, alias="isWaitListed")
    partner_status: Optional[StrictStr] = Field(None, alias="partnerStatus")
    payment_status: Optional[StrictStr] = Field(None, alias="paymentStatus")
    registration_status: Optional[StrictStr] = Field(None, alias="registrationStatus")
    __properties = ["isRegistered", "isWaitListed", "partnerStatus", "paymentStatus", "registrationStatus"]

    @validator('partner_status')
    def partner_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('NO_PARTNER', 'PENDING', 'REGISTERED'):
            raise ValueError("must be one of enum values ('NO_PARTNER', 'PENDING', 'REGISTERED')")
        return value

    @validator('payment_status')
    def payment_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING'):
            raise ValueError("must be one of enum values ('ACTIVE', 'CANCELLED', 'COMPLETE', 'CONFIRMED', 'DELETED', 'FORFEITED', 'INACTIVE', 'INVITED', 'IN_PROGRESS', 'MATCH_BYE', 'NOT_CONFIRMED', 'ONGOING', 'PENDING', 'SUSPENDED_TOS_13', 'UPCOMING')")
        return value

    @validator('registration_status')
    def registration_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('CLOSED', 'NOT_STARTED', 'OPEN'):
            raise ValueError("must be one of enum values ('CLOSED', 'NOT_STARTED', 'OPEN')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Filters:
        """Create an instance of Filters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Filters:
        """Create an instance of Filters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Filters.parse_obj(obj)

        _obj = Filters.parse_obj({
            "is_registered": obj.get("isRegistered"),
            "is_wait_listed": obj.get("isWaitListed"),
            "partner_status": obj.get("partnerStatus"),
            "payment_status": obj.get("paymentStatus"),
            "registration_status": obj.get("registrationStatus")
        })
        return _obj



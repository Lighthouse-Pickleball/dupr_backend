# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from dupr_backend.models.club_role_response import ClubRoleResponse

class ClubListingResponse(BaseModel):
    """
    ClubListingResponse
    """
    club_id: StrictInt = Field(..., alias="clubId")
    club_member_count: Optional[StrictInt] = Field(None, alias="clubMemberCount")
    club_name: StrictStr = Field(..., alias="clubName")
    created: Optional[StrictStr] = None
    media_url: Optional[StrictStr] = Field(None, alias="mediaUrl")
    role: Optional[ClubRoleResponse] = None
    short_address: Optional[StrictStr] = Field(None, alias="shortAddress")
    __properties = ["clubId", "clubMemberCount", "clubName", "created", "mediaUrl", "role", "shortAddress"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClubListingResponse:
        """Create an instance of ClubListingResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of role
        if self.role:
            _dict['role'] = self.role.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClubListingResponse:
        """Create an instance of ClubListingResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClubListingResponse.parse_obj(obj)

        _obj = ClubListingResponse.parse_obj({
            "club_id": obj.get("clubId"),
            "club_member_count": obj.get("clubMemberCount"),
            "club_name": obj.get("clubName"),
            "created": obj.get("created"),
            "media_url": obj.get("mediaUrl"),
            "role": ClubRoleResponse.from_dict(obj.get("role")) if obj.get("role") is not None else None,
            "short_address": obj.get("shortAddress")
        })
        return _obj



# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeleteMatchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'match_id': 'str',
        'match_id_type': 'str',
        'notify': 'bool',
        'reason': 'str',
        'requested_by_dupr_id': 'str'
    }

    attribute_map = {
        'match_id': 'matchId',
        'match_id_type': 'matchIdType',
        'notify': 'notify',
        'reason': 'reason',
        'requested_by_dupr_id': 'requestedByDuprId'
    }

    def __init__(self, match_id=None, match_id_type=None, notify=None, reason=None, requested_by_dupr_id=None):  # noqa: E501
        """DeleteMatchRequest - a model defined in Swagger"""  # noqa: E501
        self._match_id = None
        self._match_id_type = None
        self._notify = None
        self._reason = None
        self._requested_by_dupr_id = None
        self.discriminator = None
        self.match_id = match_id
        self.match_id_type = match_id_type
        if notify is not None:
            self.notify = notify
        if reason is not None:
            self.reason = reason
        self.requested_by_dupr_id = requested_by_dupr_id

    @property
    def match_id(self):
        """Gets the match_id of this DeleteMatchRequest.  # noqa: E501


        :return: The match_id of this DeleteMatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id):
        """Sets the match_id of this DeleteMatchRequest.


        :param match_id: The match_id of this DeleteMatchRequest.  # noqa: E501
        :type: str
        """
        if match_id is None:
            raise ValueError("Invalid value for `match_id`, must not be `None`")  # noqa: E501

        self._match_id = match_id

    @property
    def match_id_type(self):
        """Gets the match_id_type of this DeleteMatchRequest.  # noqa: E501


        :return: The match_id_type of this DeleteMatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._match_id_type

    @match_id_type.setter
    def match_id_type(self, match_id_type):
        """Sets the match_id_type of this DeleteMatchRequest.


        :param match_id_type: The match_id_type of this DeleteMatchRequest.  # noqa: E501
        :type: str
        """
        if match_id_type is None:
            raise ValueError("Invalid value for `match_id_type`, must not be `None`")  # noqa: E501
        allowed_values = ["MATCH_CODE", "MATCH_ID", "OBFUSCATED_MATCH_ID"]  # noqa: E501
        if match_id_type not in allowed_values:
            raise ValueError(
                "Invalid value for `match_id_type` ({0}), must be one of {1}"  # noqa: E501
                .format(match_id_type, allowed_values)
            )

        self._match_id_type = match_id_type

    @property
    def notify(self):
        """Gets the notify of this DeleteMatchRequest.  # noqa: E501


        :return: The notify of this DeleteMatchRequest.  # noqa: E501
        :rtype: bool
        """
        return self._notify

    @notify.setter
    def notify(self, notify):
        """Sets the notify of this DeleteMatchRequest.


        :param notify: The notify of this DeleteMatchRequest.  # noqa: E501
        :type: bool
        """

        self._notify = notify

    @property
    def reason(self):
        """Gets the reason of this DeleteMatchRequest.  # noqa: E501


        :return: The reason of this DeleteMatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this DeleteMatchRequest.


        :param reason: The reason of this DeleteMatchRequest.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def requested_by_dupr_id(self):
        """Gets the requested_by_dupr_id of this DeleteMatchRequest.  # noqa: E501


        :return: The requested_by_dupr_id of this DeleteMatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._requested_by_dupr_id

    @requested_by_dupr_id.setter
    def requested_by_dupr_id(self, requested_by_dupr_id):
        """Sets the requested_by_dupr_id of this DeleteMatchRequest.


        :param requested_by_dupr_id: The requested_by_dupr_id of this DeleteMatchRequest.  # noqa: E501
        :type: str
        """
        if requested_by_dupr_id is None:
            raise ValueError("Invalid value for `requested_by_dupr_id`, must not be `None`")  # noqa: E501

        self._requested_by_dupr_id = requested_by_dupr_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeleteMatchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeleteMatchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator

class DeleteMatchRequest(BaseModel):
    """
    DeleteMatchRequest
    """
    match_id: StrictStr = Field(..., alias="matchId")
    match_id_type: StrictStr = Field(..., alias="matchIdType")
    notify: Optional[StrictBool] = None
    reason: Optional[StrictStr] = None
    requested_by_dupr_id: StrictStr = Field(..., alias="requestedByDuprId")
    __properties = ["matchId", "matchIdType", "notify", "reason", "requestedByDuprId"]

    @validator('match_id_type')
    def match_id_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('MATCH_CODE', 'MATCH_ID', 'OBFUSCATED_MATCH_ID'):
            raise ValueError("must be one of enum values ('MATCH_CODE', 'MATCH_ID', 'OBFUSCATED_MATCH_ID')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DeleteMatchRequest:
        """Create an instance of DeleteMatchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeleteMatchRequest:
        """Create an instance of DeleteMatchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DeleteMatchRequest.parse_obj(obj)

        _obj = DeleteMatchRequest.parse_obj({
            "match_id": obj.get("matchId"),
            "match_id_type": obj.get("matchIdType"),
            "notify": obj.get("notify"),
            "reason": obj.get("reason"),
            "requested_by_dupr_id": obj.get("requestedByDuprId")
        })
        return _obj



# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from dupr_backend.models.ratings_unclaimed_player_response import RatingsUnclaimedPlayerResponse
from dupr_backend.models.sponsor_logo_response import SponsorLogoResponse
from typing import Optional, Set
from typing_extensions import Self

class UnclaimedPlayerResponse(BaseModel):
    """
    UnclaimedPlayerResponse
    """ # noqa: E501
    age: Optional[StrictInt] = None
    claimed: StrictBool
    fullname: StrictStr
    gender: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    image_url: Optional[StrictStr] = Field(default=None, alias="imageUrl")
    ratings: RatingsUnclaimedPlayerResponse
    referral_code: Optional[StrictStr] = Field(default=None, alias="referralCode")
    short_address: Optional[StrictStr] = Field(default=None, alias="shortAddress")
    sponsor: Optional[SponsorLogoResponse] = None
    __properties: ClassVar[List[str]] = ["age", "claimed", "fullname", "gender", "id", "imageUrl", "ratings", "referralCode", "shortAddress", "sponsor"]

    @field_validator('gender')
    def gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FEMALE', 'MALE']):
            raise ValueError("must be one of enum values ('FEMALE', 'MALE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnclaimedPlayerResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ratings
        if self.ratings:
            _dict['ratings'] = self.ratings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sponsor
        if self.sponsor:
            _dict['sponsor'] = self.sponsor.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnclaimedPlayerResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "age": obj.get("age"),
            "claimed": obj.get("claimed"),
            "fullname": obj.get("fullname"),
            "gender": obj.get("gender"),
            "id": obj.get("id"),
            "imageUrl": obj.get("imageUrl"),
            "ratings": RatingsUnclaimedPlayerResponse.from_dict(obj["ratings"]) if obj.get("ratings") is not None else None,
            "referralCode": obj.get("referralCode"),
            "shortAddress": obj.get("shortAddress"),
            "sponsor": SponsorLogoResponse.from_dict(obj["sponsor"]) if obj.get("sponsor") is not None else None
        })
        return _obj



# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, validator
from dupr_backend.models.ratings_unclaimed_player_response import RatingsUnclaimedPlayerResponse
from dupr_backend.models.sponsor_logo_response import SponsorLogoResponse

class UnclaimedPlayerResponse(BaseModel):
    """
    UnclaimedPlayerResponse
    """
    age: Optional[StrictInt] = None
    claimed: StrictBool = Field(...)
    fullname: StrictStr = Field(...)
    gender: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    image_url: Optional[StrictStr] = Field(None, alias="imageUrl")
    ratings: RatingsUnclaimedPlayerResponse = Field(...)
    referral_code: Optional[StrictStr] = Field(None, alias="referralCode")
    short_address: Optional[StrictStr] = Field(None, alias="shortAddress")
    sponsor: Optional[SponsorLogoResponse] = None
    __properties = ["age", "claimed", "fullname", "gender", "id", "imageUrl", "ratings", "referralCode", "shortAddress", "sponsor"]

    @validator('gender')
    def gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('FEMALE', 'MALE'):
            raise ValueError("must be one of enum values ('FEMALE', 'MALE')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UnclaimedPlayerResponse:
        """Create an instance of UnclaimedPlayerResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of ratings
        if self.ratings:
            _dict['ratings'] = self.ratings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sponsor
        if self.sponsor:
            _dict['sponsor'] = self.sponsor.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UnclaimedPlayerResponse:
        """Create an instance of UnclaimedPlayerResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UnclaimedPlayerResponse.parse_obj(obj)

        _obj = UnclaimedPlayerResponse.parse_obj({
            "age": obj.get("age"),
            "claimed": obj.get("claimed"),
            "fullname": obj.get("fullname"),
            "gender": obj.get("gender"),
            "id": obj.get("id"),
            "image_url": obj.get("imageUrl"),
            "ratings": RatingsUnclaimedPlayerResponse.from_dict(obj.get("ratings")) if obj.get("ratings") is not None else None,
            "referral_code": obj.get("referralCode"),
            "short_address": obj.get("shortAddress"),
            "sponsor": SponsorLogoResponse.from_dict(obj.get("sponsor")) if obj.get("sponsor") is not None else None
        })
        return _obj



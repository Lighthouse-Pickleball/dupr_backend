# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UnclaimedPlayerResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'age': 'int',
        'claimed': 'bool',
        'fullname': 'str',
        'gender': 'str',
        'id': 'int',
        'image_url': 'str',
        'ratings': 'RatingsUnclaimedPlayerResponse',
        'referral_code': 'str',
        'short_address': 'str',
        'sponsor': 'SponsorLogoResponse'
    }

    attribute_map = {
        'age': 'age',
        'claimed': 'claimed',
        'fullname': 'fullname',
        'gender': 'gender',
        'id': 'id',
        'image_url': 'imageUrl',
        'ratings': 'ratings',
        'referral_code': 'referralCode',
        'short_address': 'shortAddress',
        'sponsor': 'sponsor'
    }

    def __init__(self, age=None, claimed=None, fullname=None, gender=None, id=None, image_url=None, ratings=None, referral_code=None, short_address=None, sponsor=None):  # noqa: E501
        """UnclaimedPlayerResponse - a model defined in Swagger"""  # noqa: E501
        self._age = None
        self._claimed = None
        self._fullname = None
        self._gender = None
        self._id = None
        self._image_url = None
        self._ratings = None
        self._referral_code = None
        self._short_address = None
        self._sponsor = None
        self.discriminator = None
        if age is not None:
            self.age = age
        self.claimed = claimed
        self.fullname = fullname
        if gender is not None:
            self.gender = gender
        if id is not None:
            self.id = id
        if image_url is not None:
            self.image_url = image_url
        self.ratings = ratings
        if referral_code is not None:
            self.referral_code = referral_code
        if short_address is not None:
            self.short_address = short_address
        if sponsor is not None:
            self.sponsor = sponsor

    @property
    def age(self):
        """Gets the age of this UnclaimedPlayerResponse.  # noqa: E501


        :return: The age of this UnclaimedPlayerResponse.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this UnclaimedPlayerResponse.


        :param age: The age of this UnclaimedPlayerResponse.  # noqa: E501
        :type: int
        """

        self._age = age

    @property
    def claimed(self):
        """Gets the claimed of this UnclaimedPlayerResponse.  # noqa: E501


        :return: The claimed of this UnclaimedPlayerResponse.  # noqa: E501
        :rtype: bool
        """
        return self._claimed

    @claimed.setter
    def claimed(self, claimed):
        """Sets the claimed of this UnclaimedPlayerResponse.


        :param claimed: The claimed of this UnclaimedPlayerResponse.  # noqa: E501
        :type: bool
        """
        if claimed is None:
            raise ValueError("Invalid value for `claimed`, must not be `None`")  # noqa: E501

        self._claimed = claimed

    @property
    def fullname(self):
        """Gets the fullname of this UnclaimedPlayerResponse.  # noqa: E501


        :return: The fullname of this UnclaimedPlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._fullname

    @fullname.setter
    def fullname(self, fullname):
        """Sets the fullname of this UnclaimedPlayerResponse.


        :param fullname: The fullname of this UnclaimedPlayerResponse.  # noqa: E501
        :type: str
        """
        if fullname is None:
            raise ValueError("Invalid value for `fullname`, must not be `None`")  # noqa: E501

        self._fullname = fullname

    @property
    def gender(self):
        """Gets the gender of this UnclaimedPlayerResponse.  # noqa: E501


        :return: The gender of this UnclaimedPlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this UnclaimedPlayerResponse.


        :param gender: The gender of this UnclaimedPlayerResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["FEMALE", "MALE"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def id(self):
        """Gets the id of this UnclaimedPlayerResponse.  # noqa: E501


        :return: The id of this UnclaimedPlayerResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UnclaimedPlayerResponse.


        :param id: The id of this UnclaimedPlayerResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this UnclaimedPlayerResponse.  # noqa: E501


        :return: The image_url of this UnclaimedPlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this UnclaimedPlayerResponse.


        :param image_url: The image_url of this UnclaimedPlayerResponse.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def ratings(self):
        """Gets the ratings of this UnclaimedPlayerResponse.  # noqa: E501


        :return: The ratings of this UnclaimedPlayerResponse.  # noqa: E501
        :rtype: RatingsUnclaimedPlayerResponse
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """Sets the ratings of this UnclaimedPlayerResponse.


        :param ratings: The ratings of this UnclaimedPlayerResponse.  # noqa: E501
        :type: RatingsUnclaimedPlayerResponse
        """
        if ratings is None:
            raise ValueError("Invalid value for `ratings`, must not be `None`")  # noqa: E501

        self._ratings = ratings

    @property
    def referral_code(self):
        """Gets the referral_code of this UnclaimedPlayerResponse.  # noqa: E501


        :return: The referral_code of this UnclaimedPlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._referral_code

    @referral_code.setter
    def referral_code(self, referral_code):
        """Sets the referral_code of this UnclaimedPlayerResponse.


        :param referral_code: The referral_code of this UnclaimedPlayerResponse.  # noqa: E501
        :type: str
        """

        self._referral_code = referral_code

    @property
    def short_address(self):
        """Gets the short_address of this UnclaimedPlayerResponse.  # noqa: E501


        :return: The short_address of this UnclaimedPlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._short_address

    @short_address.setter
    def short_address(self, short_address):
        """Sets the short_address of this UnclaimedPlayerResponse.


        :param short_address: The short_address of this UnclaimedPlayerResponse.  # noqa: E501
        :type: str
        """

        self._short_address = short_address

    @property
    def sponsor(self):
        """Gets the sponsor of this UnclaimedPlayerResponse.  # noqa: E501


        :return: The sponsor of this UnclaimedPlayerResponse.  # noqa: E501
        :rtype: SponsorLogoResponse
        """
        return self._sponsor

    @sponsor.setter
    def sponsor(self, sponsor):
        """Sets the sponsor of this UnclaimedPlayerResponse.


        :param sponsor: The sponsor of this UnclaimedPlayerResponse.  # noqa: E501
        :type: SponsorLogoResponse
        """

        self._sponsor = sponsor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UnclaimedPlayerResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnclaimedPlayerResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

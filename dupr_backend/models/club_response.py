# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClubResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_status': 'AccountStatusResponse',
        'address': 'AddressResponse',
        'attributes': 'JsonNode',
        'club_id': 'int',
        'club_join_type': 'str',
        'club_member_count': 'int',
        'club_name': 'str',
        'club_type': 'ClubTypeResponse',
        'created': 'str',
        'currency_details': 'CurrencyDetailsResponse',
        'distance_in_miles': 'float',
        'is_payment_setup': 'bool',
        'long_description': 'ContentResponse',
        'manifest': 'ContentResponse',
        'media_url': 'str',
        'model_type': 'str',
        'model_value': 'float',
        'pending_request_list': 'list[int]',
        'requested_by': 'int',
        'role': 'ClubRoleResponse',
        'short_address': 'str',
        'short_description': 'ContentResponse'
    }

    attribute_map = {
        'account_status': 'accountStatus',
        'address': 'address',
        'attributes': 'attributes',
        'club_id': 'clubId',
        'club_join_type': 'clubJoinType',
        'club_member_count': 'clubMemberCount',
        'club_name': 'clubName',
        'club_type': 'clubType',
        'created': 'created',
        'currency_details': 'currencyDetails',
        'distance_in_miles': 'distanceInMiles',
        'is_payment_setup': 'isPaymentSetup',
        'long_description': 'longDescription',
        'manifest': 'manifest',
        'media_url': 'mediaUrl',
        'model_type': 'modelType',
        'model_value': 'modelValue',
        'pending_request_list': 'pendingRequestList',
        'requested_by': 'requestedBy',
        'role': 'role',
        'short_address': 'shortAddress',
        'short_description': 'shortDescription'
    }

    def __init__(self, account_status=None, address=None, attributes=None, club_id=None, club_join_type=None, club_member_count=None, club_name=None, club_type=None, created=None, currency_details=None, distance_in_miles=None, is_payment_setup=None, long_description=None, manifest=None, media_url=None, model_type=None, model_value=None, pending_request_list=None, requested_by=None, role=None, short_address=None, short_description=None):  # noqa: E501
        """ClubResponse - a model defined in Swagger"""  # noqa: E501
        self._account_status = None
        self._address = None
        self._attributes = None
        self._club_id = None
        self._club_join_type = None
        self._club_member_count = None
        self._club_name = None
        self._club_type = None
        self._created = None
        self._currency_details = None
        self._distance_in_miles = None
        self._is_payment_setup = None
        self._long_description = None
        self._manifest = None
        self._media_url = None
        self._model_type = None
        self._model_value = None
        self._pending_request_list = None
        self._requested_by = None
        self._role = None
        self._short_address = None
        self._short_description = None
        self.discriminator = None
        if account_status is not None:
            self.account_status = account_status
        if address is not None:
            self.address = address
        if attributes is not None:
            self.attributes = attributes
        self.club_id = club_id
        if club_join_type is not None:
            self.club_join_type = club_join_type
        if club_member_count is not None:
            self.club_member_count = club_member_count
        self.club_name = club_name
        self.club_type = club_type
        if created is not None:
            self.created = created
        if currency_details is not None:
            self.currency_details = currency_details
        if distance_in_miles is not None:
            self.distance_in_miles = distance_in_miles
        if is_payment_setup is not None:
            self.is_payment_setup = is_payment_setup
        if long_description is not None:
            self.long_description = long_description
        if manifest is not None:
            self.manifest = manifest
        if media_url is not None:
            self.media_url = media_url
        if model_type is not None:
            self.model_type = model_type
        if model_value is not None:
            self.model_value = model_value
        if pending_request_list is not None:
            self.pending_request_list = pending_request_list
        if requested_by is not None:
            self.requested_by = requested_by
        if role is not None:
            self.role = role
        if short_address is not None:
            self.short_address = short_address
        if short_description is not None:
            self.short_description = short_description

    @property
    def account_status(self):
        """Gets the account_status of this ClubResponse.  # noqa: E501


        :return: The account_status of this ClubResponse.  # noqa: E501
        :rtype: AccountStatusResponse
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status):
        """Sets the account_status of this ClubResponse.


        :param account_status: The account_status of this ClubResponse.  # noqa: E501
        :type: AccountStatusResponse
        """

        self._account_status = account_status

    @property
    def address(self):
        """Gets the address of this ClubResponse.  # noqa: E501


        :return: The address of this ClubResponse.  # noqa: E501
        :rtype: AddressResponse
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ClubResponse.


        :param address: The address of this ClubResponse.  # noqa: E501
        :type: AddressResponse
        """

        self._address = address

    @property
    def attributes(self):
        """Gets the attributes of this ClubResponse.  # noqa: E501


        :return: The attributes of this ClubResponse.  # noqa: E501
        :rtype: JsonNode
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ClubResponse.


        :param attributes: The attributes of this ClubResponse.  # noqa: E501
        :type: JsonNode
        """

        self._attributes = attributes

    @property
    def club_id(self):
        """Gets the club_id of this ClubResponse.  # noqa: E501


        :return: The club_id of this ClubResponse.  # noqa: E501
        :rtype: int
        """
        return self._club_id

    @club_id.setter
    def club_id(self, club_id):
        """Sets the club_id of this ClubResponse.


        :param club_id: The club_id of this ClubResponse.  # noqa: E501
        :type: int
        """
        if club_id is None:
            raise ValueError("Invalid value for `club_id`, must not be `None`")  # noqa: E501

        self._club_id = club_id

    @property
    def club_join_type(self):
        """Gets the club_join_type of this ClubResponse.  # noqa: E501


        :return: The club_join_type of this ClubResponse.  # noqa: E501
        :rtype: str
        """
        return self._club_join_type

    @club_join_type.setter
    def club_join_type(self, club_join_type):
        """Sets the club_join_type of this ClubResponse.


        :param club_join_type: The club_join_type of this ClubResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["INVITATION", "INVITATION_CSV", "PARTNER_INVITE", "REQUEST"]  # noqa: E501
        if club_join_type not in allowed_values:
            raise ValueError(
                "Invalid value for `club_join_type` ({0}), must be one of {1}"  # noqa: E501
                .format(club_join_type, allowed_values)
            )

        self._club_join_type = club_join_type

    @property
    def club_member_count(self):
        """Gets the club_member_count of this ClubResponse.  # noqa: E501


        :return: The club_member_count of this ClubResponse.  # noqa: E501
        :rtype: int
        """
        return self._club_member_count

    @club_member_count.setter
    def club_member_count(self, club_member_count):
        """Sets the club_member_count of this ClubResponse.


        :param club_member_count: The club_member_count of this ClubResponse.  # noqa: E501
        :type: int
        """

        self._club_member_count = club_member_count

    @property
    def club_name(self):
        """Gets the club_name of this ClubResponse.  # noqa: E501


        :return: The club_name of this ClubResponse.  # noqa: E501
        :rtype: str
        """
        return self._club_name

    @club_name.setter
    def club_name(self, club_name):
        """Sets the club_name of this ClubResponse.


        :param club_name: The club_name of this ClubResponse.  # noqa: E501
        :type: str
        """
        if club_name is None:
            raise ValueError("Invalid value for `club_name`, must not be `None`")  # noqa: E501

        self._club_name = club_name

    @property
    def club_type(self):
        """Gets the club_type of this ClubResponse.  # noqa: E501


        :return: The club_type of this ClubResponse.  # noqa: E501
        :rtype: ClubTypeResponse
        """
        return self._club_type

    @club_type.setter
    def club_type(self, club_type):
        """Sets the club_type of this ClubResponse.


        :param club_type: The club_type of this ClubResponse.  # noqa: E501
        :type: ClubTypeResponse
        """
        if club_type is None:
            raise ValueError("Invalid value for `club_type`, must not be `None`")  # noqa: E501

        self._club_type = club_type

    @property
    def created(self):
        """Gets the created of this ClubResponse.  # noqa: E501


        :return: The created of this ClubResponse.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ClubResponse.


        :param created: The created of this ClubResponse.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def currency_details(self):
        """Gets the currency_details of this ClubResponse.  # noqa: E501


        :return: The currency_details of this ClubResponse.  # noqa: E501
        :rtype: CurrencyDetailsResponse
        """
        return self._currency_details

    @currency_details.setter
    def currency_details(self, currency_details):
        """Sets the currency_details of this ClubResponse.


        :param currency_details: The currency_details of this ClubResponse.  # noqa: E501
        :type: CurrencyDetailsResponse
        """

        self._currency_details = currency_details

    @property
    def distance_in_miles(self):
        """Gets the distance_in_miles of this ClubResponse.  # noqa: E501


        :return: The distance_in_miles of this ClubResponse.  # noqa: E501
        :rtype: float
        """
        return self._distance_in_miles

    @distance_in_miles.setter
    def distance_in_miles(self, distance_in_miles):
        """Sets the distance_in_miles of this ClubResponse.


        :param distance_in_miles: The distance_in_miles of this ClubResponse.  # noqa: E501
        :type: float
        """

        self._distance_in_miles = distance_in_miles

    @property
    def is_payment_setup(self):
        """Gets the is_payment_setup of this ClubResponse.  # noqa: E501


        :return: The is_payment_setup of this ClubResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_payment_setup

    @is_payment_setup.setter
    def is_payment_setup(self, is_payment_setup):
        """Sets the is_payment_setup of this ClubResponse.


        :param is_payment_setup: The is_payment_setup of this ClubResponse.  # noqa: E501
        :type: bool
        """

        self._is_payment_setup = is_payment_setup

    @property
    def long_description(self):
        """Gets the long_description of this ClubResponse.  # noqa: E501


        :return: The long_description of this ClubResponse.  # noqa: E501
        :rtype: ContentResponse
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this ClubResponse.


        :param long_description: The long_description of this ClubResponse.  # noqa: E501
        :type: ContentResponse
        """

        self._long_description = long_description

    @property
    def manifest(self):
        """Gets the manifest of this ClubResponse.  # noqa: E501


        :return: The manifest of this ClubResponse.  # noqa: E501
        :rtype: ContentResponse
        """
        return self._manifest

    @manifest.setter
    def manifest(self, manifest):
        """Sets the manifest of this ClubResponse.


        :param manifest: The manifest of this ClubResponse.  # noqa: E501
        :type: ContentResponse
        """

        self._manifest = manifest

    @property
    def media_url(self):
        """Gets the media_url of this ClubResponse.  # noqa: E501


        :return: The media_url of this ClubResponse.  # noqa: E501
        :rtype: str
        """
        return self._media_url

    @media_url.setter
    def media_url(self, media_url):
        """Sets the media_url of this ClubResponse.


        :param media_url: The media_url of this ClubResponse.  # noqa: E501
        :type: str
        """

        self._media_url = media_url

    @property
    def model_type(self):
        """Gets the model_type of this ClubResponse.  # noqa: E501


        :return: The model_type of this ClubResponse.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this ClubResponse.


        :param model_type: The model_type of this ClubResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["ABSOLUTE", "RELATIVE"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"  # noqa: E501
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def model_value(self):
        """Gets the model_value of this ClubResponse.  # noqa: E501


        :return: The model_value of this ClubResponse.  # noqa: E501
        :rtype: float
        """
        return self._model_value

    @model_value.setter
    def model_value(self, model_value):
        """Sets the model_value of this ClubResponse.


        :param model_value: The model_value of this ClubResponse.  # noqa: E501
        :type: float
        """

        self._model_value = model_value

    @property
    def pending_request_list(self):
        """Gets the pending_request_list of this ClubResponse.  # noqa: E501


        :return: The pending_request_list of this ClubResponse.  # noqa: E501
        :rtype: list[int]
        """
        return self._pending_request_list

    @pending_request_list.setter
    def pending_request_list(self, pending_request_list):
        """Sets the pending_request_list of this ClubResponse.


        :param pending_request_list: The pending_request_list of this ClubResponse.  # noqa: E501
        :type: list[int]
        """

        self._pending_request_list = pending_request_list

    @property
    def requested_by(self):
        """Gets the requested_by of this ClubResponse.  # noqa: E501


        :return: The requested_by of this ClubResponse.  # noqa: E501
        :rtype: int
        """
        return self._requested_by

    @requested_by.setter
    def requested_by(self, requested_by):
        """Sets the requested_by of this ClubResponse.


        :param requested_by: The requested_by of this ClubResponse.  # noqa: E501
        :type: int
        """

        self._requested_by = requested_by

    @property
    def role(self):
        """Gets the role of this ClubResponse.  # noqa: E501


        :return: The role of this ClubResponse.  # noqa: E501
        :rtype: ClubRoleResponse
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ClubResponse.


        :param role: The role of this ClubResponse.  # noqa: E501
        :type: ClubRoleResponse
        """

        self._role = role

    @property
    def short_address(self):
        """Gets the short_address of this ClubResponse.  # noqa: E501


        :return: The short_address of this ClubResponse.  # noqa: E501
        :rtype: str
        """
        return self._short_address

    @short_address.setter
    def short_address(self, short_address):
        """Sets the short_address of this ClubResponse.


        :param short_address: The short_address of this ClubResponse.  # noqa: E501
        :type: str
        """

        self._short_address = short_address

    @property
    def short_description(self):
        """Gets the short_description of this ClubResponse.  # noqa: E501


        :return: The short_description of this ClubResponse.  # noqa: E501
        :rtype: ContentResponse
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this ClubResponse.


        :param short_description: The short_description of this ClubResponse.  # noqa: E501
        :type: ContentResponse
        """

        self._short_description = short_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClubResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClubResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EditLeagueRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_information': 'LeagueContentRequest',
        'address_id': 'int',
        'advertise_end': 'date',
        'advertise_start': 'date',
        'attributes': 'dict(str, Attribute)',
        'league_id': 'int',
        'league_name': 'str',
        'liability_waiver_id': 'int',
        'long_description': 'LeagueContentRequest',
        'media_id': 'int',
        'member_fee': 'float',
        'membership_permission': 'str',
        'non_member_fee': 'float',
        'refund_policy': 'LeagueContentRequest',
        'registration_url': 'str',
        'safety_policy': 'LeagueContentRequest',
        'short_description': 'LeagueContentRequest',
        'status': 'str',
        'type': 'str',
        'user_id': 'int'
    }

    attribute_map = {
        'additional_information': 'additionalInformation',
        'address_id': 'addressId',
        'advertise_end': 'advertiseEnd',
        'advertise_start': 'advertiseStart',
        'attributes': 'attributes',
        'league_id': 'leagueId',
        'league_name': 'leagueName',
        'liability_waiver_id': 'liabilityWaiverId',
        'long_description': 'longDescription',
        'media_id': 'mediaId',
        'member_fee': 'memberFee',
        'membership_permission': 'membershipPermission',
        'non_member_fee': 'nonMemberFee',
        'refund_policy': 'refundPolicy',
        'registration_url': 'registrationUrl',
        'safety_policy': 'safetyPolicy',
        'short_description': 'shortDescription',
        'status': 'status',
        'type': 'type',
        'user_id': 'userId'
    }

    def __init__(self, additional_information=None, address_id=None, advertise_end=None, advertise_start=None, attributes=None, league_id=None, league_name=None, liability_waiver_id=None, long_description=None, media_id=None, member_fee=None, membership_permission=None, non_member_fee=None, refund_policy=None, registration_url=None, safety_policy=None, short_description=None, status=None, type=None, user_id=None):  # noqa: E501
        """EditLeagueRequest - a model defined in Swagger"""  # noqa: E501
        self._additional_information = None
        self._address_id = None
        self._advertise_end = None
        self._advertise_start = None
        self._attributes = None
        self._league_id = None
        self._league_name = None
        self._liability_waiver_id = None
        self._long_description = None
        self._media_id = None
        self._member_fee = None
        self._membership_permission = None
        self._non_member_fee = None
        self._refund_policy = None
        self._registration_url = None
        self._safety_policy = None
        self._short_description = None
        self._status = None
        self._type = None
        self._user_id = None
        self.discriminator = None
        if additional_information is not None:
            self.additional_information = additional_information
        self.address_id = address_id
        if advertise_end is not None:
            self.advertise_end = advertise_end
        if advertise_start is not None:
            self.advertise_start = advertise_start
        if attributes is not None:
            self.attributes = attributes
        self.league_id = league_id
        self.league_name = league_name
        if liability_waiver_id is not None:
            self.liability_waiver_id = liability_waiver_id
        if long_description is not None:
            self.long_description = long_description
        if media_id is not None:
            self.media_id = media_id
        if member_fee is not None:
            self.member_fee = member_fee
        if membership_permission is not None:
            self.membership_permission = membership_permission
        self.non_member_fee = non_member_fee
        if refund_policy is not None:
            self.refund_policy = refund_policy
        if registration_url is not None:
            self.registration_url = registration_url
        if safety_policy is not None:
            self.safety_policy = safety_policy
        if short_description is not None:
            self.short_description = short_description
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        self.user_id = user_id

    @property
    def additional_information(self):
        """Gets the additional_information of this EditLeagueRequest.  # noqa: E501


        :return: The additional_information of this EditLeagueRequest.  # noqa: E501
        :rtype: LeagueContentRequest
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this EditLeagueRequest.


        :param additional_information: The additional_information of this EditLeagueRequest.  # noqa: E501
        :type: LeagueContentRequest
        """

        self._additional_information = additional_information

    @property
    def address_id(self):
        """Gets the address_id of this EditLeagueRequest.  # noqa: E501


        :return: The address_id of this EditLeagueRequest.  # noqa: E501
        :rtype: int
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """Sets the address_id of this EditLeagueRequest.


        :param address_id: The address_id of this EditLeagueRequest.  # noqa: E501
        :type: int
        """
        if address_id is None:
            raise ValueError("Invalid value for `address_id`, must not be `None`")  # noqa: E501

        self._address_id = address_id

    @property
    def advertise_end(self):
        """Gets the advertise_end of this EditLeagueRequest.  # noqa: E501


        :return: The advertise_end of this EditLeagueRequest.  # noqa: E501
        :rtype: date
        """
        return self._advertise_end

    @advertise_end.setter
    def advertise_end(self, advertise_end):
        """Sets the advertise_end of this EditLeagueRequest.


        :param advertise_end: The advertise_end of this EditLeagueRequest.  # noqa: E501
        :type: date
        """

        self._advertise_end = advertise_end

    @property
    def advertise_start(self):
        """Gets the advertise_start of this EditLeagueRequest.  # noqa: E501


        :return: The advertise_start of this EditLeagueRequest.  # noqa: E501
        :rtype: date
        """
        return self._advertise_start

    @advertise_start.setter
    def advertise_start(self, advertise_start):
        """Sets the advertise_start of this EditLeagueRequest.


        :param advertise_start: The advertise_start of this EditLeagueRequest.  # noqa: E501
        :type: date
        """

        self._advertise_start = advertise_start

    @property
    def attributes(self):
        """Gets the attributes of this EditLeagueRequest.  # noqa: E501


        :return: The attributes of this EditLeagueRequest.  # noqa: E501
        :rtype: dict(str, Attribute)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this EditLeagueRequest.


        :param attributes: The attributes of this EditLeagueRequest.  # noqa: E501
        :type: dict(str, Attribute)
        """

        self._attributes = attributes

    @property
    def league_id(self):
        """Gets the league_id of this EditLeagueRequest.  # noqa: E501


        :return: The league_id of this EditLeagueRequest.  # noqa: E501
        :rtype: int
        """
        return self._league_id

    @league_id.setter
    def league_id(self, league_id):
        """Sets the league_id of this EditLeagueRequest.


        :param league_id: The league_id of this EditLeagueRequest.  # noqa: E501
        :type: int
        """
        if league_id is None:
            raise ValueError("Invalid value for `league_id`, must not be `None`")  # noqa: E501

        self._league_id = league_id

    @property
    def league_name(self):
        """Gets the league_name of this EditLeagueRequest.  # noqa: E501


        :return: The league_name of this EditLeagueRequest.  # noqa: E501
        :rtype: str
        """
        return self._league_name

    @league_name.setter
    def league_name(self, league_name):
        """Sets the league_name of this EditLeagueRequest.


        :param league_name: The league_name of this EditLeagueRequest.  # noqa: E501
        :type: str
        """
        if league_name is None:
            raise ValueError("Invalid value for `league_name`, must not be `None`")  # noqa: E501

        self._league_name = league_name

    @property
    def liability_waiver_id(self):
        """Gets the liability_waiver_id of this EditLeagueRequest.  # noqa: E501


        :return: The liability_waiver_id of this EditLeagueRequest.  # noqa: E501
        :rtype: int
        """
        return self._liability_waiver_id

    @liability_waiver_id.setter
    def liability_waiver_id(self, liability_waiver_id):
        """Sets the liability_waiver_id of this EditLeagueRequest.


        :param liability_waiver_id: The liability_waiver_id of this EditLeagueRequest.  # noqa: E501
        :type: int
        """

        self._liability_waiver_id = liability_waiver_id

    @property
    def long_description(self):
        """Gets the long_description of this EditLeagueRequest.  # noqa: E501


        :return: The long_description of this EditLeagueRequest.  # noqa: E501
        :rtype: LeagueContentRequest
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this EditLeagueRequest.


        :param long_description: The long_description of this EditLeagueRequest.  # noqa: E501
        :type: LeagueContentRequest
        """

        self._long_description = long_description

    @property
    def media_id(self):
        """Gets the media_id of this EditLeagueRequest.  # noqa: E501


        :return: The media_id of this EditLeagueRequest.  # noqa: E501
        :rtype: int
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id):
        """Sets the media_id of this EditLeagueRequest.


        :param media_id: The media_id of this EditLeagueRequest.  # noqa: E501
        :type: int
        """

        self._media_id = media_id

    @property
    def member_fee(self):
        """Gets the member_fee of this EditLeagueRequest.  # noqa: E501


        :return: The member_fee of this EditLeagueRequest.  # noqa: E501
        :rtype: float
        """
        return self._member_fee

    @member_fee.setter
    def member_fee(self, member_fee):
        """Sets the member_fee of this EditLeagueRequest.


        :param member_fee: The member_fee of this EditLeagueRequest.  # noqa: E501
        :type: float
        """

        self._member_fee = member_fee

    @property
    def membership_permission(self):
        """Gets the membership_permission of this EditLeagueRequest.  # noqa: E501


        :return: The membership_permission of this EditLeagueRequest.  # noqa: E501
        :rtype: str
        """
        return self._membership_permission

    @membership_permission.setter
    def membership_permission(self, membership_permission):
        """Sets the membership_permission of this EditLeagueRequest.


        :param membership_permission: The membership_permission of this EditLeagueRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["CLUB_MEMBERS", "OPEN_TO_ALL"]  # noqa: E501
        if membership_permission not in allowed_values:
            raise ValueError(
                "Invalid value for `membership_permission` ({0}), must be one of {1}"  # noqa: E501
                .format(membership_permission, allowed_values)
            )

        self._membership_permission = membership_permission

    @property
    def non_member_fee(self):
        """Gets the non_member_fee of this EditLeagueRequest.  # noqa: E501


        :return: The non_member_fee of this EditLeagueRequest.  # noqa: E501
        :rtype: float
        """
        return self._non_member_fee

    @non_member_fee.setter
    def non_member_fee(self, non_member_fee):
        """Sets the non_member_fee of this EditLeagueRequest.


        :param non_member_fee: The non_member_fee of this EditLeagueRequest.  # noqa: E501
        :type: float
        """
        if non_member_fee is None:
            raise ValueError("Invalid value for `non_member_fee`, must not be `None`")  # noqa: E501

        self._non_member_fee = non_member_fee

    @property
    def refund_policy(self):
        """Gets the refund_policy of this EditLeagueRequest.  # noqa: E501


        :return: The refund_policy of this EditLeagueRequest.  # noqa: E501
        :rtype: LeagueContentRequest
        """
        return self._refund_policy

    @refund_policy.setter
    def refund_policy(self, refund_policy):
        """Sets the refund_policy of this EditLeagueRequest.


        :param refund_policy: The refund_policy of this EditLeagueRequest.  # noqa: E501
        :type: LeagueContentRequest
        """

        self._refund_policy = refund_policy

    @property
    def registration_url(self):
        """Gets the registration_url of this EditLeagueRequest.  # noqa: E501


        :return: The registration_url of this EditLeagueRequest.  # noqa: E501
        :rtype: str
        """
        return self._registration_url

    @registration_url.setter
    def registration_url(self, registration_url):
        """Sets the registration_url of this EditLeagueRequest.


        :param registration_url: The registration_url of this EditLeagueRequest.  # noqa: E501
        :type: str
        """

        self._registration_url = registration_url

    @property
    def safety_policy(self):
        """Gets the safety_policy of this EditLeagueRequest.  # noqa: E501


        :return: The safety_policy of this EditLeagueRequest.  # noqa: E501
        :rtype: LeagueContentRequest
        """
        return self._safety_policy

    @safety_policy.setter
    def safety_policy(self, safety_policy):
        """Sets the safety_policy of this EditLeagueRequest.


        :param safety_policy: The safety_policy of this EditLeagueRequest.  # noqa: E501
        :type: LeagueContentRequest
        """

        self._safety_policy = safety_policy

    @property
    def short_description(self):
        """Gets the short_description of this EditLeagueRequest.  # noqa: E501


        :return: The short_description of this EditLeagueRequest.  # noqa: E501
        :rtype: LeagueContentRequest
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this EditLeagueRequest.


        :param short_description: The short_description of this EditLeagueRequest.  # noqa: E501
        :type: LeagueContentRequest
        """

        self._short_description = short_description

    @property
    def status(self):
        """Gets the status of this EditLeagueRequest.  # noqa: E501


        :return: The status of this EditLeagueRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EditLeagueRequest.


        :param status: The status of this EditLeagueRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this EditLeagueRequest.  # noqa: E501


        :return: The type of this EditLeagueRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EditLeagueRequest.


        :param type: The type of this EditLeagueRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["FLEX"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user_id(self):
        """Gets the user_id of this EditLeagueRequest.  # noqa: E501


        :return: The user_id of this EditLeagueRequest.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this EditLeagueRequest.


        :param user_id: The user_id of this EditLeagueRequest.  # noqa: E501
        :type: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EditLeagueRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditLeagueRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

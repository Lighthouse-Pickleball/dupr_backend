# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, validator
from dupr_backend.models.age_filter import AgeFilter
from dupr_backend.models.claim_player_rating_filter import ClaimPlayerRatingFilter

class ClaimPlayerSearchFilter(BaseModel):
    """
    ClaimPlayerSearchFilter
    """
    age: Optional[AgeFilter] = None
    gender: Optional[StrictStr] = None
    lat: Optional[Union[StrictFloat, StrictInt]] = None
    lng: Optional[Union[StrictFloat, StrictInt]] = None
    radius_in_meters: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="radiusInMeters")
    rating: Optional[ClaimPlayerRatingFilter] = None
    short_address: Optional[StrictStr] = Field(None, alias="shortAddress")
    __properties = ["age", "gender", "lat", "lng", "radiusInMeters", "rating", "shortAddress"]

    @validator('gender')
    def gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('FEMALE', 'MALE'):
            raise ValueError("must be one of enum values ('FEMALE', 'MALE')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClaimPlayerSearchFilter:
        """Create an instance of ClaimPlayerSearchFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of age
        if self.age:
            _dict['age'] = self.age.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rating
        if self.rating:
            _dict['rating'] = self.rating.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClaimPlayerSearchFilter:
        """Create an instance of ClaimPlayerSearchFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClaimPlayerSearchFilter.parse_obj(obj)

        _obj = ClaimPlayerSearchFilter.parse_obj({
            "age": AgeFilter.from_dict(obj.get("age")) if obj.get("age") is not None else None,
            "gender": obj.get("gender"),
            "lat": obj.get("lat"),
            "lng": obj.get("lng"),
            "radius_in_meters": obj.get("radiusInMeters"),
            "rating": ClaimPlayerRatingFilter.from_dict(obj.get("rating")) if obj.get("rating") is not None else None,
            "short_address": obj.get("shortAddress")
        })
        return _obj



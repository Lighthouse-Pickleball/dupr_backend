# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Geometry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bounds': 'Bounds',
        'location': 'LatLng',
        'location_type': 'str',
        'viewport': 'Bounds'
    }

    attribute_map = {
        'bounds': 'bounds',
        'location': 'location',
        'location_type': 'locationType',
        'viewport': 'viewport'
    }

    def __init__(self, bounds=None, location=None, location_type=None, viewport=None):  # noqa: E501
        """Geometry - a model defined in Swagger"""  # noqa: E501
        self._bounds = None
        self._location = None
        self._location_type = None
        self._viewport = None
        self.discriminator = None
        if bounds is not None:
            self.bounds = bounds
        if location is not None:
            self.location = location
        if location_type is not None:
            self.location_type = location_type
        if viewport is not None:
            self.viewport = viewport

    @property
    def bounds(self):
        """Gets the bounds of this Geometry.  # noqa: E501


        :return: The bounds of this Geometry.  # noqa: E501
        :rtype: Bounds
        """
        return self._bounds

    @bounds.setter
    def bounds(self, bounds):
        """Sets the bounds of this Geometry.


        :param bounds: The bounds of this Geometry.  # noqa: E501
        :type: Bounds
        """

        self._bounds = bounds

    @property
    def location(self):
        """Gets the location of this Geometry.  # noqa: E501


        :return: The location of this Geometry.  # noqa: E501
        :rtype: LatLng
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Geometry.


        :param location: The location of this Geometry.  # noqa: E501
        :type: LatLng
        """

        self._location = location

    @property
    def location_type(self):
        """Gets the location_type of this Geometry.  # noqa: E501


        :return: The location_type of this Geometry.  # noqa: E501
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this Geometry.


        :param location_type: The location_type of this Geometry.  # noqa: E501
        :type: str
        """
        allowed_values = ["APPROXIMATE", "GEOMETRIC_CENTER", "RANGE_INTERPOLATED", "ROOFTOP", "UNKNOWN"]  # noqa: E501
        if location_type not in allowed_values:
            raise ValueError(
                "Invalid value for `location_type` ({0}), must be one of {1}"  # noqa: E501
                .format(location_type, allowed_values)
            )

        self._location_type = location_type

    @property
    def viewport(self):
        """Gets the viewport of this Geometry.  # noqa: E501


        :return: The viewport of this Geometry.  # noqa: E501
        :rtype: Bounds
        """
        return self._viewport

    @viewport.setter
    def viewport(self, viewport):
        """Sets the viewport of this Geometry.


        :param viewport: The viewport of this Geometry.  # noqa: E501
        :type: Bounds
        """

        self._viewport = viewport

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Geometry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Geometry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

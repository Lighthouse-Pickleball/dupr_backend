# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs

    The version of the OpenAPI document: v1.0 alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictInt, conlist
from dupr_backend.models.session_response import SessionResponse

class JoinLeagueResponse(BaseModel):
    """
    JoinLeagueResponse
    """
    failed: Optional[conlist(StrictInt)] = None
    session: Optional[SessionResponse] = None
    success: Optional[conlist(StrictInt)] = None
    __properties = ["failed", "session", "success"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JoinLeagueResponse:
        """Create an instance of JoinLeagueResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of session
        if self.session:
            _dict['session'] = self.session.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JoinLeagueResponse:
        """Create an instance of JoinLeagueResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JoinLeagueResponse.parse_obj(obj)

        _obj = JoinLeagueResponse.parse_obj({
            "failed": obj.get("failed"),
            "session": SessionResponse.from_dict(obj.get("session")) if obj.get("session") is not None else None,
            "success": obj.get("success")
        })
        return _obj



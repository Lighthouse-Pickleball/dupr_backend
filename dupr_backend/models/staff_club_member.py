# coding: utf-8

"""
    DUPR Backend APIs

    Internal RESTful APIs to access DUPR ratings, users and provide matches.

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class StaffClubMember(BaseModel):
    """
    StaffClubMember
    """ # noqa: E501
    user_id: StrictInt = Field(alias="userId")
    club_id: StrictInt = Field(alias="clubId")
    role_id: StrictInt = Field(alias="roleId")
    approval: StrictStr
    name: StrictStr
    email: StrictStr
    phone: Optional[StrictStr] = None
    media_url: Optional[StrictStr] = Field(default=None, alias="mediaUrl")
    dupr_id: StrictStr = Field(alias="duprId")
    iso_alpha2_code: StrictStr = Field(alias="isoAlpha2Code")
    __properties: ClassVar[List[str]] = ["userId", "clubId", "roleId", "approval", "name", "email", "phone", "mediaUrl", "duprId", "isoAlpha2Code"]

    @field_validator('approval')
    def approval_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PENDING', 'IN_REVIEW', 'APPROVED', 'REJECTED']):
            raise ValueError("must be one of enum values ('PENDING', 'IN_REVIEW', 'APPROVED', 'REJECTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StaffClubMember from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StaffClubMember from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "userId": obj.get("userId"),
            "clubId": obj.get("clubId"),
            "roleId": obj.get("roleId"),
            "approval": obj.get("approval"),
            "name": obj.get("name"),
            "email": obj.get("email"),
            "phone": obj.get("phone"),
            "mediaUrl": obj.get("mediaUrl"),
            "duprId": obj.get("duprId"),
            "isoAlpha2Code": obj.get("isoAlpha2Code")
        })
        return _obj



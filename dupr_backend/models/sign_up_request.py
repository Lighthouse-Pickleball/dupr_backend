# coding: utf-8

"""
    DUPR Middleware

    Application REST APIs  # noqa: E501

    OpenAPI spec version: v1.0 alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SignUpRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'birthdate': 'date',
        'doubles_rating': 'float',
        'dupr_id': 'str',
        'email': 'str',
        'external_id': 'str',
        'gender': 'str',
        'phone_number': 'str',
        'player_name': 'str',
        'singles_rating': 'float'
    }

    attribute_map = {
        'address': 'address',
        'birthdate': 'birthdate',
        'doubles_rating': 'doublesRating',
        'dupr_id': 'duprId',
        'email': 'email',
        'external_id': 'externalId',
        'gender': 'gender',
        'phone_number': 'phoneNumber',
        'player_name': 'playerName',
        'singles_rating': 'singlesRating'
    }

    def __init__(self, address=None, birthdate=None, doubles_rating=None, dupr_id=None, email=None, external_id=None, gender=None, phone_number=None, player_name=None, singles_rating=None):  # noqa: E501
        """SignUpRequest - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._birthdate = None
        self._doubles_rating = None
        self._dupr_id = None
        self._email = None
        self._external_id = None
        self._gender = None
        self._phone_number = None
        self._player_name = None
        self._singles_rating = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if birthdate is not None:
            self.birthdate = birthdate
        if doubles_rating is not None:
            self.doubles_rating = doubles_rating
        if dupr_id is not None:
            self.dupr_id = dupr_id
        self.email = email
        if external_id is not None:
            self.external_id = external_id
        if gender is not None:
            self.gender = gender
        if phone_number is not None:
            self.phone_number = phone_number
        self.player_name = player_name
        if singles_rating is not None:
            self.singles_rating = singles_rating

    @property
    def address(self):
        """Gets the address of this SignUpRequest.  # noqa: E501


        :return: The address of this SignUpRequest.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this SignUpRequest.


        :param address: The address of this SignUpRequest.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def birthdate(self):
        """Gets the birthdate of this SignUpRequest.  # noqa: E501


        :return: The birthdate of this SignUpRequest.  # noqa: E501
        :rtype: date
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate):
        """Sets the birthdate of this SignUpRequest.


        :param birthdate: The birthdate of this SignUpRequest.  # noqa: E501
        :type: date
        """

        self._birthdate = birthdate

    @property
    def doubles_rating(self):
        """Gets the doubles_rating of this SignUpRequest.  # noqa: E501


        :return: The doubles_rating of this SignUpRequest.  # noqa: E501
        :rtype: float
        """
        return self._doubles_rating

    @doubles_rating.setter
    def doubles_rating(self, doubles_rating):
        """Sets the doubles_rating of this SignUpRequest.


        :param doubles_rating: The doubles_rating of this SignUpRequest.  # noqa: E501
        :type: float
        """

        self._doubles_rating = doubles_rating

    @property
    def dupr_id(self):
        """Gets the dupr_id of this SignUpRequest.  # noqa: E501


        :return: The dupr_id of this SignUpRequest.  # noqa: E501
        :rtype: str
        """
        return self._dupr_id

    @dupr_id.setter
    def dupr_id(self, dupr_id):
        """Sets the dupr_id of this SignUpRequest.


        :param dupr_id: The dupr_id of this SignUpRequest.  # noqa: E501
        :type: str
        """

        self._dupr_id = dupr_id

    @property
    def email(self):
        """Gets the email of this SignUpRequest.  # noqa: E501


        :return: The email of this SignUpRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SignUpRequest.


        :param email: The email of this SignUpRequest.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def external_id(self):
        """Gets the external_id of this SignUpRequest.  # noqa: E501


        :return: The external_id of this SignUpRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this SignUpRequest.


        :param external_id: The external_id of this SignUpRequest.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def gender(self):
        """Gets the gender of this SignUpRequest.  # noqa: E501


        :return: The gender of this SignUpRequest.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this SignUpRequest.


        :param gender: The gender of this SignUpRequest.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def phone_number(self):
        """Gets the phone_number of this SignUpRequest.  # noqa: E501


        :return: The phone_number of this SignUpRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this SignUpRequest.


        :param phone_number: The phone_number of this SignUpRequest.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def player_name(self):
        """Gets the player_name of this SignUpRequest.  # noqa: E501


        :return: The player_name of this SignUpRequest.  # noqa: E501
        :rtype: str
        """
        return self._player_name

    @player_name.setter
    def player_name(self, player_name):
        """Sets the player_name of this SignUpRequest.


        :param player_name: The player_name of this SignUpRequest.  # noqa: E501
        :type: str
        """
        if player_name is None:
            raise ValueError("Invalid value for `player_name`, must not be `None`")  # noqa: E501

        self._player_name = player_name

    @property
    def singles_rating(self):
        """Gets the singles_rating of this SignUpRequest.  # noqa: E501


        :return: The singles_rating of this SignUpRequest.  # noqa: E501
        :rtype: float
        """
        return self._singles_rating

    @singles_rating.setter
    def singles_rating(self, singles_rating):
        """Sets the singles_rating of this SignUpRequest.


        :param singles_rating: The singles_rating of this SignUpRequest.  # noqa: E501
        :type: float
        """

        self._singles_rating = singles_rating

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SignUpRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SignUpRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
